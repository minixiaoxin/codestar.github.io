<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Windows中配置PigGo图床及CDN加速</title>
    <link href="/website/windows-piggo-picture-cdn.html"/>
    <url>/website/windows-piggo-picture-cdn.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、下载安装PicGo"><a href="#1、下载安装PicGo" class="headerlink" title="1、下载安装PicGo"></a>1、下载安装PicGo</h2><p>PiGo官方仓库网站：</p><p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>进入仓库后选择下面的安装包</p><p><img src="https://codestar.top/note-image/20250713131855390.png" alt="image-20231015233244099"></p><p>下载好了之后，双击程序，按照向导安装完成即可。</p><h2 id="2、配置github作为图床源"><a href="#2、配置github作为图床源" class="headerlink" title="2、配置github作为图床源"></a>2、配置github作为图床源</h2><p>Pigo仅仅作为一个图片中转的工具，不提供图床的服务，需要结合其他图床平台来协同使用，<strong>这里以github作为图床来配置</strong>。</p><h3 id="2-1、新建github仓库"><a href="#2-1、新建github仓库" class="headerlink" title="2.1、新建github仓库"></a>2.1、新建github仓库</h3><p>新建仓库：</p><p><img src="https://codestar.top/note-image/20250713131939650.png" alt="image-20231017001554597"></p><p>修改仓库名称并提交：</p><p><img src="https://codestar.top/note-image/20250713131949066.png" alt="image-20231017001655037"></p><p>之后再上传一个新的文件或创建一个新的文件即可完成创建过程。避免数据公开产生问题，可以选择创建为<code>Private</code>私有库。</p><h3 id="2-2、生成github-token"><a href="#2-2、生成github-token" class="headerlink" title="2.2、生成github token"></a>2.2、生成github token</h3><p>生成一个github token，方便我们使用PicGo来连接到github：</p><ul><li>1、进入到github个人设置（<a href="https://github.com/settings/profile">Settings</a>），开发者设置（<a href="https://github.com/settings/apps">Developer Settings</a>）页面，点击<strong>Generator new token</strong>：</li></ul><p><img src="https://codestar.top/note-image/20250713132004404.png" alt="image-20231017002156021"></p><p><img src="https://codestar.top/note-image/20250713132023882.png" alt="image-20231017002426939"></p><ul><li>2、配置token信息：token名称、过期时间、权限</li></ul><p><img src="https://codestar.top/note-image/20250713132343529.png" alt="image-20231017002614537"></p><ul><li>3、下拉到页面底部点击<code>Generator token</code>，生成token：生成完成，页面如下<br><img src="https://codestar.top/note-image/20250713132409177.png" alt="image-20231017003026824"></li></ul><p><strong>注： token生成之后只显示1次，关闭页面后不再显示，及时保存防止遗忘。</strong></p><h3 id="2-3、PigGo配置github图床"><a href="#2-3、PigGo配置github图床" class="headerlink" title="2.3、PigGo配置github图床"></a>2.3、PigGo配置github图床</h3><p>配置步骤如下：</p><ul><li>1、打开PicGo，进入 “图床设置 -&gt; GitHub”：</li></ul><p><img src="https://codestar.top/note-image/20250713132702845.png" alt="image-20231017003234325"></p><ul><li>2、点击<code>+</code>添加图床配置：</li></ul><p><img src="https://codestar.top/note-image/20250713133215804.png" alt="image-20231017003309793"></p><ul><li><p>3、Github图床配置细节：</p><p>具体配置内容参考如下（CDN可以选填： <a href="https://cdn.jsdelivr.net/gh/+%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D%EF%BC%8C%E4%B9%9F%E5%8F%AF%E7%BD%AE%E7%A9%BA%EF%BC%89%EF%BC%9A">https://cdn.jsdelivr.net/gh/+用户名/仓库名，也可置空）：</a></p></li></ul><p><img src="https://codestar.top/note-image/20250713133229343.png" alt="image-20231017004203604"></p><p>​配置完成后，点击<code>确定</code>，之后会自动替换掉原来的<code>Default</code>设置，将Github设为默认图床。</p><ul><li>4、配置检查：原先的Default配置被替换</li></ul><p><img src="https://codestar.top/note-image/image-20231017012013201.png" alt="image-20231017012013201"></p><p>在配置文件中，也可以查询到相应的配置存在更新：</p><p><img src="https://codestar.top/note-image/20250713142256075.png" alt="image-20250713142131456"></p><p>默认的PicGo配置文件路径如下：</p><ul><li>Windows: <code>%APPDATA%\picgo\data.json</code></li><li>Linux: <code>$XDG_CONFIG_HOME/picgo/data.json</code> or <code>~/.config/picgo/data.json</code></li><li>macOS: <code>~/Library/Application\ Support/picgo/data.json</code></li></ul><h3 id="2-4、上传图片方式"><a href="#2-4、上传图片方式" class="headerlink" title="2.4、上传图片方式"></a>2.4、上传图片方式</h3><p>在PicGo中：</p><ul><li><p><strong>上传区</strong>支持三种上传方式：</p><p>1、MacOS中支持menubar图标拖拽上传</p><p>2、主窗口拖拽或“点击上传”选择图片文件上传</p><p>3、剪贴板图片上传，支持自定义快捷键</p><p><strong>Tips：</strong> 前两种都是可以明确获得文件名，而第三种无法获取文件名（当剪贴板是临时截图时是不存在文件名的）</p></li></ul><p><img src="https://codestar.top/note-image/image-20231017011613032.png" alt="image-20231017011613032"></p><p>图片的链接格式，默认为markdown，也推荐使用markdown格式，必要时修改。</p><ul><li><p><strong>相册区</strong> ：</p><p>上传完成的图片在相册区能够查看到，同时在Github源仓库中也能够查看到对应的文件，下面图标为复制图片链接：</p></li></ul><p><img src="https://codestar.top/note-image/image-20231017012741810.png" alt="image-20231017012741810"></p><p>在markdown文档中，复制的链接格式可以直接使用，其他格式需要做相应转换。</p><p><strong>注意：</strong> 针对gif动图的上传，需要对源文件进行上传，不能直接复制，不然上传时会截取其中1帧上传。</p><h2 id="3、Typora中使用PicGo"><a href="#3、Typora中使用PicGo" class="headerlink" title="3、Typora中使用PicGo"></a>3、Typora中使用PicGo</h2><p>Typora是一热门的markdown文本编辑器，在其中如何使用PicGo步骤如下：</p><ul><li><p>1、偏好设置修改图像上传方式</p><ul><li>修改“插入图片时…”配置为<strong>上传图片</strong>；</li><li>“上传服务设定”中配置上传服务为<strong>PicGo(app)</strong>，同时将前文安装的PicGo路径填入，配置如下图：</li></ul><p><img src="https://codestar.top/note-image/image-20231017012329318.png" alt="image-20231017012329318"></p></li></ul><h2 id="4、添加CDN加速"><a href="#4、添加CDN加速" class="headerlink" title="4、添加CDN加速"></a>4、添加CDN加速</h2><p>考虑到图片上传到github服务器，国内访问，图片会加载缓慢或者加载失败。选择添加**CDN（内容分发网络）**来加速图片加载，我选择的是相对稳定、强大并且免费的<code>CloudFlare</code>，缺点是在国内有时候部分图片的加载会受影响（实际使用2年多，失败的情况很少），下面时配置的过程：</p><h3 id="4-1、注册CloudFlare"><a href="#4-1、注册CloudFlare" class="headerlink" title="4.1、注册CloudFlare"></a>4.1、注册CloudFlare</h3><p>在官网注册账号：<a href="https://www.cloudflare.com/zh-cn/">https://www.cloudflare.com/zh-cn/</a></p><p>填写账号和密码进行注册：</p><p><img src="https://codestar.top/note-image/image-20231022173602884.png" alt="image-20231022173602884"></p><p>注册成功之后，选择此项：</p><p><img src="https://codestar.top/note-image/image-20231022173448833.png" alt="image-20231022173448833"></p><p>会跳转到控制台或直接使用链接进入：<a href="https://dash.cloudflare.com/c67897f1b5c89973376a8ed2c85d43f7/add-site">https://dash.cloudflare.com/c67897f1b5c89973376a8ed2c85d43f7/add-site</a></p><p>刚进入会显示为英文界面，右上角切换语言，支持简体中文：</p><p><img src="https://codestar.top/note-image/image-20231022173855357.png" alt="image-20231022173855357"></p><h3 id="4-2、添加域名"><a href="#4-2、添加域名" class="headerlink" title="4.2、添加域名"></a>4.2、添加域名</h3><p>在<code>网站</code>中添加自己的域名，点击继续开始绑定：</p><p><img src="https://codestar.top/note-image/image-20231022182140400.png" alt="image-20231022182140400"></p><p>付费计划，选择免费的就行，选中之后继续：</p><p><img src="https://codestar.top/note-image/image-20231022182248663.png" alt="image-20231022182248663"></p><p>自动进行域名解析，完成之后如下：</p><p><img src="https://codestar.top/note-image/image-20231022182502419.png" alt="image-20231022182502419"></p><p>**注意：<strong>这里需要选择</strong>“仅DNS”**绕开代理，否则重定向次数太多，无法访问站点。</p><p><img src="https://codestar.top/note-image/20250713143759477.png" alt="image-20250713143740622"></p><p>更改名称服务器：</p><p><img src="https://codestar.top/note-image/image-20231022183620119.png" alt="image-20231022183620119"></p><p>记住这里的cloudflare名称服务器，后续需要将原始的名称服务器（删除一下名称服务器部分）替换为cloudflare的。</p><h3 id="4-3、修改域名DNS"><a href="#4-3、修改域名DNS" class="headerlink" title="4.3、修改域名DNS"></a>4.3、修改域名DNS</h3><p>由于我的域名是namesoli平台的，这里是进入namesoli域名管理平台，其他平台同理：</p><p><img src="https://codestar.top/note-image/image-20231022183028285.png" alt="image-20231022183028285"></p><p>删除原来的名称服务器：</p><p><img src="https://codestar.top/note-image/image-20231022183209677.png" alt="image-20231022183209677"></p><p>将cloudflare的名称服务器加入：</p><p><img src="https://codestar.top/note-image/image-20231022183303283.png" alt="image-20231022183303283"></p><p>之后<code>SUBMIT</code>提交即可。提交之后注册机构需要一定的时间来处理DNS，最长24H之后就被cloudflare接管，实际大概15分钟左右就能够处理好。</p><p>在域名解析页，<strong>删除原有解析内容</strong>，会出现这个提示，无需理会，X掉，继续：</p><p><img src="https://codestar.top/note-image/image-20231022202302186.png" alt="image-20231022202302186"></p><p>保持下面这部分内容为空，<strong>后续的所有域名解析均迁移至CloudFlare中进行配置</strong>：</p><p><img src="https://codestar.top/note-image/image-20231022202350041.png" alt="image-20231022202350041"></p><h3 id="4-4、配置图片处理工作流（cloudflare-worker）"><a href="#4-4、配置图片处理工作流（cloudflare-worker）" class="headerlink" title="4.4、配置图片处理工作流（cloudflare worker）"></a>4.4、配置图片处理工作流（cloudflare worker）</h3><p>完成上一步之后，在CloudFlare中继续下一步，按照页面推荐完成配置（自动HTTPS重写设置为ON）：</p><p><img src="https://codestar.top/note-image/image-20231022184041318.png" alt="image-20231022184041318"></p><p><img src="https://codestar.top/note-image/image-20231022184425035.png" alt="image-20231022184425035"></p><p>成功激活之后会收到1封邮件：</p><p><img src="https://codestar.top/note-image/image-20231022184539008.png" alt="image-20231022184539008"></p><p>进入<code>Workers 和 Pages</code>创建<code>work</code>工作流：</p><p><img src="https://codestar.top/note-image/image-20231022183705621.png" alt="image-20231022183705621"></p><p>自定义部署名称，之后点击<code>部署</code>：</p><p><img src="https://codestar.top/note-image/image-20231022175630817.png" alt="image-20231022175630817"></p><p>部署成功会进入下面的页面：</p><p><img src="https://codestar.top/note-image/image-20231022183726349.png" alt="image-20231022183726349"></p><p>进入<code>编辑代码</code>：</p><p><img src="https://codestar.top/note-image/image-20231022175936381.png" alt="image-20231022175936381"></p><p>在JS编辑面板中贴入下面的代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs shell">// Website you intended to retrieve for users.<br>const upstream = &quot;raw.githubusercontent.com&quot;;<br><br>// Custom pathname for the upstream website.<br>// (1) 填写代理的路径，格式为 /&lt;用户&gt;/&lt;仓库名&gt;/&lt;分支&gt;<br>const upstream_path = &quot;****&quot;;<br><br>// github personal access token.<br>// (2) 填写github令牌<br>const github_token = &quot;****&quot;;<br><br>// Website you intended to retrieve for users using mobile devices.<br>const upstream_mobile = upstream;<br><br>// Countries and regions where you wish to suspend your service.<br>const blocked_region = [];<br><br>// IP addresses which you wish to block from using your service.<br>const blocked_ip_address = [&quot;0.0.0.0&quot;, &quot;127.0.0.1&quot;];<br><br>// Whether to use HTTPS protocol for upstream address.<br>const https = true;<br><br>// Whether to disable cache.<br>const disable_cache = false;<br><br>// Replace texts.<br>const replace_dict = &#123;<br><span class="hljs-meta prompt_">  $</span><span class="language-bash">upstream: <span class="hljs-string">&quot;<span class="hljs-variable">$custom_domain</span>&quot;</span>,</span><br>&#125;;<br><br>addEventListener(&quot;fetch&quot;, (event) =&gt; &#123;<br>  event.respondWith(fetchAndApply(event.request));<br>&#125;);<br><br>async function fetchAndApply(request) &#123;<br>  const region = request.headers.get(&quot;cf-ipcountry&quot;)?.toUpperCase();<br>  const ip_address = request.headers.get(&quot;cf-connecting-ip&quot;);<br>  const user_agent = request.headers.get(&quot;user-agent&quot;);<br><br>  let response = null;<br>  let url = new URL(request.url);<br>  let url_hostname = url.hostname;<br><br>  if (https == true) &#123;<br>    url.protocol = &quot;https:&quot;;<br>  &#125; else &#123;<br>    url.protocol = &quot;http:&quot;;<br>  &#125;<br><br>  if (await device_status(user_agent)) &#123;<br>    var upstream_domain = upstream;<br>  &#125; else &#123;<br>    var upstream_domain = upstream_mobile;<br>  &#125;<br><br>  url.host = upstream_domain;<br>  if (url.pathname == &quot;/&quot;) &#123;<br>    url.pathname = upstream_path;<br>  &#125; else &#123;<br>    url.pathname = upstream_path + url.pathname;<br>  &#125;<br><br>  if (blocked_region.includes(region)) &#123;<br>    response = new Response(<br>      &quot;Access denied: WorkersProxy is not available in your region yet.&quot;,<br>      &#123;<br>        status: 403,<br>      &#125;<br>    );<br>  &#125; else if (blocked_ip_address.includes(ip_address)) &#123;<br>    response = new Response(<br>      &quot;Access denied: Your IP address is blocked by WorkersProxy.&quot;,<br>      &#123;<br>        status: 403,<br>      &#125;<br>    );<br>  &#125; else &#123;<br>    let method = request.method;<br>    let request_headers = request.headers;<br>    let new_request_headers = new Headers(request_headers);<br><br>    new_request_headers.set(&quot;Host&quot;, upstream_domain);<br>    new_request_headers.set(&quot;Referer&quot;, url.protocol + &quot;//&quot; + url_hostname);<br>    new_request_headers.set(&quot;Authorization&quot;, &quot;token &quot; + github_token);<br><br>    let original_response = await fetch(url.href, &#123;<br>      method: method,<br>      headers: new_request_headers,<br>      body: request.body,<br>    &#125;);<br><br>    let connection_upgrade = new_request_headers.get(&quot;Upgrade&quot;);<br>    if (connection_upgrade &amp;&amp; connection_upgrade.toLowerCase() == &quot;websocket&quot;) &#123;<br>      return original_response;<br>    &#125;<br><br>    let original_response_clone = original_response.clone();<br>    let original_text = null;<br>    let response_headers = original_response.headers;<br>    let new_response_headers = new Headers(response_headers);<br>    let status = original_response.status;<br><br>    if (disable_cache) &#123;<br>      new_response_headers.set(&quot;Cache-Control&quot;, &quot;no-store&quot;);<br>    &#125; else &#123;<br>      new_response_headers.set(&quot;Cache-Control&quot;, &quot;max-age=43200000&quot;);<br>    &#125;<br><br>    new_response_headers.set(&quot;access-control-allow-origin&quot;, &quot;*&quot;);<br>    new_response_headers.set(&quot;access-control-allow-credentials&quot;, &quot;true&quot;);<br>    new_response_headers.delete(&quot;content-security-policy&quot;);<br>    new_response_headers.delete(&quot;content-security-policy-report-only&quot;);<br>    new_response_headers.delete(&quot;clear-site-data&quot;);<br><br>    if (new_response_headers.get(&quot;x-pjax-url&quot;)) &#123;<br>      new_response_headers.set(<br>        &quot;x-pjax-url&quot;,<br>        response_headers<br>          .get(&quot;x-pjax-url&quot;)<br>          .replace(&quot;//&quot; + upstream_domain, &quot;//&quot; + url_hostname)<br>      );<br>    &#125;<br><br>    const content_type = new_response_headers.get(&quot;content-type&quot;);<br>    if (<br>      content_type != null &amp;&amp;<br>      content_type.includes(&quot;text/html&quot;) &amp;&amp;<br>      content_type.includes(&quot;UTF-8&quot;)<br>    ) &#123;<br>      original_text = await replace_response_text(<br>        original_response_clone,<br>        upstream_domain,<br>        url_hostname<br>      );<br>    &#125; else &#123;<br>      original_text = original_response_clone.body;<br>    &#125;<br><br>    response = new Response(original_text, &#123;<br>      status,<br>      headers: new_response_headers,<br>    &#125;);<br>  &#125;<br>  return response;<br>&#125;<br><br>async function replace_response_text(response, upstream_domain, host_name) &#123;<br>  let text = await response.text();<br><br>  var i, j;<br>  for (i in replace_dict) &#123;<br>    j = replace_dict[i];<br>    if (i == &quot;$upstream&quot;) &#123;<br>      i = upstream_domain;<br>    &#125; else if (i == &quot;$custom_domain&quot;) &#123;<br>      i = host_name;<br>    &#125;<br><br>    if (j == &quot;$upstream&quot;) &#123;<br>      j = upstream_domain;<br>    &#125; else if (j == &quot;$custom_domain&quot;) &#123;<br>      j = host_name;<br>    &#125;<br><br>    let re = new RegExp(i, &quot;g&quot;);<br>    text = text.replace(re, j);<br>  &#125;<br>  return text;<br>&#125;<br><br>async function device_status(user_agent_info) &#123;<br>  var agents = [<br>    &quot;Android&quot;,<br>    &quot;iPhone&quot;,<br>    &quot;SymbianOS&quot;,<br>    &quot;Windows Phone&quot;,<br>    &quot;iPad&quot;,<br>    &quot;iPod&quot;,<br>  ];<br>  var flag = true;<br>  for (var v = 0; v &lt; agents.length; v++) &#123;<br>    if (user_agent_info.indexOf(agents[v]) &gt; 0) &#123;<br>      flag = false;<br>      break;<br>    &#125;<br>  &#125;<br>  return flag;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要修改的地方有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">// Custom pathname for the upstream website.<br>// (1) 填写代理的路径，格式为 /&lt;用户&gt;/&lt;仓库名&gt;/&lt;分支&gt;<br>const upstream_path = &quot;****&quot;;<br><br>// github personal access token.<br>// (2) 填写github令牌<br>const github_token = &quot;****&quot;;<br></code></pre></td></tr></table></figure><p>按照PicGo中配置的内容来填入即可：</p><p><img src="https://codestar.top/note-image/image-20231022183805035.png" alt="image-20231022183805035"></p><p>修改完成之后，点击“发送”测试是否正常，当响应码为200即为配置成功，之后则点击<code>保存并部署</code>：</p><p><img src="https://codestar.top/note-image/image-20231022183832490.png" alt="image-20231022183832490"></p><h3 id="4-5、绑定域名"><a href="#4-5、绑定域名" class="headerlink" title="4.5、绑定域名"></a>4.5、绑定域名</h3><p>进入到刚才工作流的控制页面：</p><p><img src="https://codestar.top/note-image/image-20231022181344156.png" alt="image-20231022181344156"></p><p>查看<code>Custome Domains</code>：</p><p><img src="https://codestar.top/note-image/image-20231022181253090.png" alt="image-20231022181253090"></p><p>添加自定义域：（这里的域必须要提前加入到cloudflare中才允许添加）</p><p><img src="https://codestar.top/note-image/image-20231022181508512.png" alt="image-20231022181508512"></p><p><img src="https://codestar.top/note-image/image-20231022190017756.png" alt="image-20231022190017756"></p><p>之后<strong>在PicGo中配置域名</strong>，生效配置(域名DNS生效之后此配置才会生效)：</p><p><img src="https://codestar.top/note-image/image-20231022212059643.png" alt="image-20231022212059643"></p><p>之后就可以正常上传图片，并通过Cloudflare加速访问了：</p><p><img src="https://codestar.top/note-image/image-20231022212016931.png" alt="image-20231022212016931"></p><h2 id="5、参考"><a href="#5、参考" class="headerlink" title="5、参考"></a>5、参考</h2><p><a href="https://ji2xpro.github.io/73d224e9/">https://ji2xpro.github.io/73d224e9/</a></p><p><a href="https://sarakale.top/blog/posts/3a730d01">https://sarakale.top/blog/posts/3a730d01</a></p><p><a href="https://james-blog.top/posts/21.html">https://james-blog.top/posts/21.html</a></p><p><a href="https://monkeywie.cn/2020/08/20/fast-github-page-with-cloudflare/">https://monkeywie.cn/2020/08/20/fast-github-page-with-cloudflare/</a></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站指南</tag>
      
      <tag>HEXO</tag>
      
      <tag>PicGo技巧</tag>
      
      <tag>CDN加速</tag>
      
      <tag>站点托管</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL如何进行跨服务器迁移数据</title>
    <link href="/sql/postgresql-cross-server-data-migration.html"/>
    <url>/sql/postgresql-cross-server-data-migration.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、方案"><a href="#1、方案" class="headerlink" title="1、方案"></a>1、方案</h2><p>在针对PostgreSQL的数据迁移这一块功能，官方有相应的工具支持：<code>pg_dump</code>和<code>pg_restore</code>，通过这两个工具，可以很好的对数据库中的数据进行备份和恢复。那既然支持通过包来备份和恢复，那在跨服务器数据迁移，区别也仅仅在于PostgreSQL服务器地址存在差异，需要增加步骤来在两台服务器之间进行备份数据包的传输即可，基于此，下面来说明如何来操作这一系列过程。</p><h2 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h2><p>梳理本地环境以及目标环境相应参数表如下：</p><table><thead><tr><th><strong>配置项</strong></th><th><strong>源数据库（本地）</strong></th><th><strong>目标数据库（远程）</strong></th></tr></thead><tbody><tr><td><strong>服务器IP</strong></td><td><code>localhost(或127.0.0.1)</code></td><td><code>10.17.100.245</code></td></tr><tr><td><strong>数据库名称</strong></td><td><code>sonarqube_db</code></td><td><code>sonarqube_db</code>（可同名或不同名）</td></tr><tr><td><strong>Postgresql连接用户</strong></td><td><code>sonar</code></td><td><code>sonar</code></td></tr><tr><td><strong>Postgresql端口</strong></td><td><code>5432</code>（默认端口）</td><td><code>5432</code>（默认端口）</td></tr><tr><td><strong>远程服务器系统用户</strong></td><td>本地用户</td><td><code>sonar</code>（用于SSH&#x2F;SCP传输）</td></tr></tbody></table><p><strong>上层服务应用：Sonarqube</strong></p><p>操作流程与实际的应用服务理论上无关，这里说明上层应用仅方便后续验证实际数据恢复后的效果用。</p><h2 id="3、操作流程"><a href="#3、操作流程" class="headerlink" title="3、操作流程"></a>3、操作流程</h2><h3 id="3-1-导出原始数据库数据"><a href="#3-1-导出原始数据库数据" class="headerlink" title="3.1 导出原始数据库数据"></a>3.1 导出原始数据库数据</h3><p>登录<strong>原始数据库所在的Linux服务器</strong>，以数据库管理员身份登录到PostgreSQL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -u postgres psql<br></code></pre></td></tr></table></figure><p>使用<code>pg_dump</code>命令导出数据库中的数据:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从本地localhost 5432端口以sonar身份登录postgresql将sonarqube_db数据库导出到文件source_db_dump.custom</span><br>pg_dump -h localhost -p 5432 -U sonar -F c -v -f source_db_dump.custom sonarqube_db<br></code></pre></td></tr></table></figure><p>执行后，会要求输入sonar账户的口令密码，输入密码后开始正常导出数据：</p><p><img src="https://codestar.top/note-image/20250707220544452.png" alt="image-20250427141323988"></p><p>导出完成后，数据文件<code>source_db_dump.custom</code>在当前命令执行的目录下生成：</p><p><img src="https://codestar.top/note-image/20250707220607007.png" alt="image-20250427141510791"></p><h3 id="3-2-传输数据文件"><a href="#3-2-传输数据文件" class="headerlink" title="3.2 传输数据文件"></a>3.2 传输数据文件</h3><p>在完成原始数据库的数据导出之后，使用<code>scp</code>工具将其远程传输到需要恢复数据的目标服务器上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将以sonar用户身份登录到10.17.100.245服务器并传输source_db_dump.custom到/home/sonar路径</span><br>scp source_db_dump.custom sonar@10.17.100.245:/home/sonar/<br></code></pre></td></tr></table></figure><p>输入目标服务器的连接账户密码后开始传输：</p><p><img src="https://codestar.top/note-image/20250707221130058.png" alt="image-20250427142251778"></p><p>传输完成后，开始准备下一步导入数据。</p><h3 id="3-3-目标数据库导入数据"><a href="#3-3-目标数据库导入数据" class="headerlink" title="3.3 目标数据库导入数据"></a>3.3 目标数据库导入数据</h3><h4 id="3-3-1-导入前目标数据库准备"><a href="#3-3-1-导入前目标数据库准备" class="headerlink" title="3.3.1 导入前目标数据库准备"></a>3.3.1 导入前目标数据库准备</h4><p>在开始导入数据前，需提前对目标服务器中的数据库做一些配置：</p><p>1）创建目标数据库</p><ul><li>登录远程服务器，连接到远程 PostgreSQL 数据库：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">可能需要输入 postgres 用户的密码</span><br>sudo -u postgres psql<br></code></pre></td></tr></table></figure><ul><li>创建目标数据库（已有则忽略此步骤）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建sonar账户下的sonarqube_db数据库<br><span class="hljs-keyword">CREATE</span> DATABASE sonarqube_db OWNER sonar;<br># 检查是否创建成功<br>\l<br># 切换到sonarqube_db数据库<br>\c sonarqube_db<br># 完成创建后，退出数据库到终端<br>\q<br></code></pre></td></tr></table></figure><p>2）扩展检查（可选）</p><p><strong>当源数据库使用了扩展时，必须在导入数据前提前安装完成所有的插件，否则导入时会出现异常：</strong></p><ul><li>检查数据库使用的扩展</li></ul><p><code>sudo -u postgres psql</code>登录到源PostgreSQL数据库，执行下列语句检查：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 检查数据库使用的插件<br>\dx<br></code></pre></td></tr></table></figure><ul><li>安装必要插件</li></ul><p>当检查出有插件在使用时，需针对每一个插件进行安装：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 示例：安装postgis插件</span><br><span class="hljs-keyword">CREATE</span> EXTENSION IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> &quot;postgis&quot;;<br></code></pre></td></tr></table></figure><p>每个扩展使用<code>CREATE EXTENSION</code>进行安装。</p><h4 id="3-3-2-数据导入"><a href="#3-3-2-数据导入" class="headerlink" title="3.3.2 数据导入"></a>3.3.2 数据导入</h4><p>完成导入前的准备操作后，在目标服务器终端开始导入数据：</p><ul><li>数据文件路径在：<code>/home/sonar</code></li><li>使用<code>pg_restore</code>导入数据：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">目标服务器停止sonar服务：停止上层应用服务</span><br>/home/sonar/etc/sonarqube/sonarqube-10.4.0.87286/bin/linux-x86-64/sonar.sh stop<br><span class="hljs-meta prompt_"># </span><span class="language-bash">移动到数据文件目录</span><br>cd /home/sonar<br><span class="hljs-meta prompt_"># </span><span class="language-bash">终端执行将source_db_dump.custom数据文件导入到数据库sonarqube_db</span><br>pg_restore -h localhost -p 5432 -U sonar -v -d sonarqube_db --clean source_db_dump.custom<br></code></pre></td></tr></table></figure><p>这里我选择使用<code>--clean</code>参数以覆盖的形式替代原有的所有同名数据，无需覆盖可不加此参数，根据需求使用：</p><p><img src="https://codestar.top/note-image/20250707222855375.png" alt="image-20250427172936647"></p><p><strong>注意：</strong> 覆盖现有的数据后，目标服务器中已有的数据会被清掉，应用服务中的账户内容也会替换为源数据库中的账户，如果账户同名，后续使用时注意密码会更新。</p><h3 id="3-4-数据验证"><a href="#3-4-数据验证" class="headerlink" title="3.4 数据验证"></a>3.4 数据验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">连接到目标数据库</span><br>sudo -u postgres psql<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换至sonarqube_db数据库</span><br>\c sonarqube_db<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有数据库</span><br>\l<br></code></pre></td></tr></table></figure><p>所有的数据库结果如下：</p><p><img src="https://codestar.top/note-image/20250707223404768.png" alt="image-20250707223336718"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有表，检查数量是否与源数据库大致相同。q退出</span><br>\dt<br></code></pre></td></tr></table></figure><p>记录数检查结果如下，可以看到数据记录是前后一致的：</p><p><img src="https://codestar.top/note-image/20250707223644719.png" alt="image-20250427150947568"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查所有序列是否存在</span><br>\ds<br></code></pre></td></tr></table></figure><p>选取projects表作为数据对比表，检查记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> projects;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/20250707224048872.png" alt="image-20250707224033068"></p><p>上述记录可以看到数据已经同步正常，所有的项目均已导入。也可以对数据进行抽查检查数据内容是否有错误：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> projects LIMIT <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p><strong>Tips：</strong> 在导入数据时没有要求数据库要停止服务，但<strong>避免可能在导入时有其他用户或应用存在数据更新而导致数据异常，最好还是先停止数据库服务再进行数据导入。</strong></p><h3 id="3-5-更新数据库统计信息"><a href="#3-5-更新数据库统计信息" class="headerlink" title="3.5 更新数据库统计信息"></a>3.5 更新数据库统计信息</h3><p>当数据存在更新时，需要对数据库统计信息进行更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到postgresql管理员用户</span><br>sudo -i -u postgres<br>psql -d sonarqube_db<br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新统计信息</span><br>ANALYZE VERBOSE;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/20250707231129663.png" alt="image-20250427163801111"></p><p>当出现以下报错，为非管理员账户进行的更新操作导致，切换管理员身份重新操作即可：</p><p><img src="https://codestar.top/note-image/20250707231112040.png" alt="image-20250427164210978"></p><p>如果数据库存在名称变更，上层使用此数据库的应用一定要更新指向新的数据库。至此，所有数据完成迁移。</p><h2 id="4、-应用服务数据更新"><a href="#4、-应用服务数据更新" class="headerlink" title="4、 应用服务数据更新"></a>4、 应用服务数据更新</h2><h3 id="4-1-重建ElasticSearch索引"><a href="#4-1-重建ElasticSearch索引" class="headerlink" title="4.1 重建ElasticSearch索引"></a>4.1 重建ElasticSearch索引</h3><p>由于我这边上层使用PostgreSQL数据的应用为Sonarqube，其中包含ES服务，对于数据库存在更新时，为了保障数据使用正常，需要对ES进行索引重建，操作步骤如下：</p><ul><li><p>1、停止SonarQube服务器&#x2F;集群</p></li><li><p>2、进入SonarQube的安装目录<code>/etc/sonarqube/sonarqube-10.4.0.87286/data</code></p></li></ul><p><em><code>/etc/sonarqube/sonarqube-10.4.0.87286</code>为本地Sonar安装路径，根据实际路径执行</em></p><ul><li>3、删除<code>/etc/sonarqube/sonarqube-10.4.0.87286/data/data/es8</code> 目录下的所有内容 （<em>需要注意在较旧的ES版本中，此目录可能为 <code>es6</code> 或 <code>es7</code></em>）</li></ul><p><img src="https://codestar.top/note-image/20250707231102858.png" alt="image-20250427173435009"></p><ul><li>4、重新启动SonarQube服务器&#x2F;集群。</li></ul><p>具体原因是，<code>es8</code>目录包含Elasticsearch的索引，当此目录不存在时，迫使SonarQube识别到Elasticsearch索引的缺失，在服务启动时会触发完整的索引重建过程，从而确保索引是基于新迁移的数据库构建的。</p><h3 id="4-2-应用数据检查"><a href="#4-2-应用数据检查" class="headerlink" title="4.2 应用数据检查"></a>4.2 应用数据检查</h3><p>重新启动服务，检查数据是否正常：可以看到所有的项目都已完全导入，部分细节访问，如issue板块，需要在索引重建完成后才能完整查看。</p><p><img src="https://codestar.top/note-image/20250707231037720.png" alt="image-20250707231014112"></p><p>完成索引重建后，所有页面都可正常访问：</p><p><img src="https://codestar.top/note-image/20250707230915221.png" alt="image-20250427174202706"></p><h2 id="5、附录：pg-restore参数说明"><a href="#5、附录：pg-restore参数说明" class="headerlink" title="5、附录：pg_restore参数说明"></a>5、附录：pg_restore参数说明</h2><p><code>pg_restore</code>命令格式如下<code>pg_restore [选项]... [文件名]</code>，具体支持的参数如下，供使用时参考：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell">一般选项:<br>  -d, --dbname=名字        连接数据库名字<br>  -f, --file=文件名        输出文件名<br>  -F, --format=c|d|t       备份文件格式(应该自动进行)<br>  -l, --list               打印归档文件的 TOC 概述<br>  -v, --verbose            详细模式<br>  -V, --version            输出版本信息, 然后退出<br>  -?, --help               显示此帮助, 然后退出<br><br>恢复控制选项:<br>  -a, --data-only              只恢复数据, 不包括模式<br>  -c, --clean                  在重新创建之前，先清除（删除）数据库对象<br>  -C, --create                 创建目标数据库<br>  -e, --exit-on-error          发生错误退出, 默认为继续<br>  -I, --index=NAME             恢复指定名称的索引<br>  -j, --jobs=NUM               执行多个并行任务进行恢复工作<br>  -L, --use-list=FILENAME      从这个文件中使用指定的内容表排序<br>                               输出<br>  -n, --schema=NAME            在这个模式中只恢复对象<br>  -N, --exclude-schema=NAME    不恢复此模式中的对象<br>  -O, --no-owner               不恢复对象所属者<br>  -P, --function=NAME(args)    恢复指定名字的函数<br>  -s, --schema-only            只恢复模式, 不包括数据<br>  -S, --superuser=NAME         使用指定的超级用户来禁用触发器<br>  -t, --table=NAME             恢复命名关系（表、视图等）<br>  -T, --trigger=NAME           恢复指定名字的触发器<br>  -x, --no-privileges          跳过处理权限的恢复 (grant/revoke)<br>  -1, --single-transaction     作为单个事务恢复<br>  --disable-triggers           在只恢复数据的过程中禁用触发器<br>  --enable-row-security        启用行安全性<br>  --if-exists                  当删除对象时使用IF EXISTS<br>  --no-comments                不恢复注释<br>  --no-data-for-failed-tables  对那些无法创建的表不进行<br>                               数据恢复<br>  --no-publications            不恢复发行<br>  --no-security-labels         不恢复安全标签信息<br>  --no-subscriptions           不恢复订阅<br>  --no-tablespaces             不恢复表空间的分配信息<br>  --section=SECTION            恢复命名节 (数据前、数据及数据后)<br>  --strict-names               要求每个表和(或)schema包括模式以匹配至少一个实体<br>  --use-set-session-authorization<br>                               使用 SESSION AUTHORIZATION 命令代替<br>                               ALTER OWNER 命令来设置所有权<br><br>联接选项:<br>  -h, --host=主机名        数据库服务器的主机名或套接字目录<br>  -p, --port=端口号        数据库服务器的端口号<br>  -U, --username=名字      以指定的数据库用户联接<br>  -w, --no-password        永远不提示输入口令<br>  -W, --password           强制口令提示 (自动)<br>  --role=ROLENAME          在恢复前执行SET ROLE操作<br><br>选项 -I, -n, -N, -P, -t, -T, 以及 --section 可以组合使用和指定<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PostgreSQL</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
      <tag>SonarQube</tag>
      
      <tag>数据迁移</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试设计方法：因果图基本原理及实践</title>
    <link href="/testskill/causal-diagram-basic-principle-and-application.html"/>
    <url>/testskill/causal-diagram-basic-principle-and-application.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言"></a>1、引言</h2><p>因果图，作为一种黑盒测试方法，经常用来作为复杂场景的案例设计工具，尤其是针对逻辑关系、依赖关系强的场景，而正因为这一点，很好的弥补了我前面讨论的<a href="https://blog.codestar.top/testskill/orthogonal-experiment-basic-principle-and-practice.html">正交试验</a>的不足之处。因果图能够用来研究条件与结果之间的逻辑关系的变化，很好的发现和探索其中的因果之变，下面来探究如何来这一种方法的原理，以及如何使用因果图来设计测试案例。</p><h2 id="2、因果图基本原理及定义"><a href="#2、因果图基本原理及定义" class="headerlink" title="2、因果图基本原理及定义"></a>2、因果图基本原理及定义</h2><p><strong>因果图</strong>是一种针对输入条件的组合进行分析的一种设计方法，基于图的原理，将输入内容和输出结果进行组合和联系。与正交实验不同，因果图不要求输入条件为独立特性，允许条件之间存在相互依赖或相互约束的关系，重点探究的是从输入到输出之间的因果逻辑。</p><h2 id="3、因果图设计步骤"><a href="#3、因果图设计步骤" class="headerlink" title="3、因果图设计步骤"></a>3、因果图设计步骤</h2><p>从需求分析到用因果图生成用例，大致步骤如下：</p><p><strong>1）拆解需求：</strong> </p><ul><li>从最初的需求中，将其拆解为小段的逻辑片段，通过分析逻辑片段来进行因果图分析。</li></ul><p><strong>2）确定“因”和“果”：</strong> </p><ul><li>从需求片段中提取到的所有可能的输入条件和输出结果，这些即为因果图中的原因和结果。例如，在自动饮用水售货机中，投入1元硬币购买，当定价1元时，得到的结果是“购买成功”，投币1元是“因”，“购买成功”是“果”。</li></ul><p><strong>3）明确因果关系及约束关系：</strong> </p><ul><li><strong>因果关系</strong>即为“原因”通过什么样的方式得到什么样的“结果”，原因和结果之间的对应关系即为因果关系。</li><li><strong>约束关系</strong>为条件之间的各种限制，如条件A和条件B同时满足才能得到结果A。实际的例子如自动饮用水售货机，投币1元和商品定价1元，当两个条件同时满足时，才能购买成功，当定价2元时，会是“购买失败，请充值”的结果，这个例子里面“投币1元”和“定价1元”两个条件之间便是互斥关系。</li></ul><p><strong>4）绘制因果图：</strong> </p><ul><li><p>对步骤2分析得到的和输出结果制定编号，每个编号代表1个节点，<strong>将输入条件置为左列，输出结果置为右列</strong>。利用因果图的基本符号，将输入和输出之间连接，便得到初始因果图。</p><blockquote><p>**Tips：**当输入内容较为复杂时，考虑增加中间节点，中间节点仅为输入条件特定情况下的某种状态，用于方便绘制输入和输出之间的联系，仅用于桥梁的作用。</p></blockquote></li></ul><p><strong>5）补充因果约束条件：</strong> </p><ul><li>根据步骤3得到的因果和约束关系，结合约束符号，在初始因果图上补充注明输入条件之间的约束关系，添加约束之后即可得到完整的因果图。</li></ul><p><strong>6）将因果图转为判定表：</strong> </p><ul><li>对每个原因和结果取真和假两种状态，<strong>用 0 和 1 表示</strong>，根据完整的因果图生成有限项判定表，将所有的状态组合列出，再根据因果图中的约束条件，去掉不可能出现的组合。</li></ul><p><strong>7）根据判定表转换为测试用例：</strong></p><ul><li>根据判定表中每一列的值作为依据，设计测试用例，每个有效的列都是一个测试用例。</li></ul><p><img src="https://codestar.top/note-image/20250703230748745.png" alt="Snipaste_2025-07-03_23-05-43"></p><h2 id="4、基本符号与约束关系"><a href="#4、基本符号与约束关系" class="headerlink" title="4、基本符号与约束关系"></a>4、基本符号与约束关系</h2><h3 id="4-1-基本因果图符号"><a href="#4-1-基本因果图符号" class="headerlink" title="4.1 基本因果图符号"></a>4.1 基本因果图符号</h3><table><thead><tr><th align="center">逻辑关系</th><th align="center">说明</th><th align="center">图示</th></tr></thead><tbody><tr><td align="center"><strong>恒等 (Identity)</strong></td><td align="center">如果原因a为真，则结果b为真，中间直线相连接</td><td align="center"><img src="https://codestar.top/note-image/20250702232444097.png" alt="image-20250611171802558"></td></tr><tr><td align="center"><strong>非 (NOT)</strong></td><td align="center">如果原因a为真，则结果b为假；反之，如果a为假，则b为真</td><td align="center"><img src="https://codestar.top/note-image/20250702232458549.png" alt="image-20250611181541240"></td></tr><tr><td align="center"><strong>或 (OR)</strong></td><td align="center">如果多个原因 $a_1$, $a_2$, …, $a_n$中至少有一个为真，条件数目任意，则结果d为真。图形上使用一个“∨”或“OR”标记</td><td align="center"><img src="https://codestar.top/note-image/20250702232515840.png" alt="image-20250611182113939"></td></tr><tr><td align="center"><strong>与 (AND)</strong></td><td align="center">只有当所有原因$a_1$, $a_2$, …, $a_n$均同时为真时，结果d才为真。图形上使用一个“∧”或“AND”标记。</td><td align="center"><img src="https://codestar.top/note-image/20250702232533432.png" alt="image-20250611182148282"></td></tr></tbody></table><h3 id="4-2-约束关系"><a href="#4-2-约束关系" class="headerlink" title="4.2 约束关系"></a>4.2 约束关系</h3><p><strong>约束关系 (Constraint Relationships)</strong>：用于表示原因之间由于语义、环境或业务规则限制而导致某些组合不可能出现或必须同时出现的情况。这些约束通常作用于<strong>一组原因节点</strong>之间。</p><table><thead><tr><th align="center">约束关系</th><th align="center">说明</th><th align="center">图示</th></tr></thead><tbody><tr><td align="center"><strong>E (Exclusive, 互斥)</strong></td><td align="center">表示在$a_1$…$a_n$中，整体必须总为真，最多仅有1个为真。如果出现多个原因为真的情况，则该组合是非法的。例如，一个单选按钮组，只能选择一个选项。</td><td align="center"><img src="https://codestar.top/note-image/20250702233055161.png" alt="image-20250616162124106"></td></tr><tr><td align="center"><strong>I (Inclusive, 包含&#x2F;或)</strong></td><td align="center">表示在$a_1$…$a_n$中，至少有一个原因必须为真。如果所有原因都为假，则该组合是非法的。例如，支付方式至少选择一种。</td><td align="center"><img src="https://codestar.top/note-image/20250702233201984.png" alt="image-20250611192809367"></td></tr><tr><td align="center"><strong>O (One and Only One, 唯一)</strong></td><td align="center">表示在$a_1$…$a_n$中，必须有且仅有一个原因为真。这是E和I约束的结合。</td><td align="center"><img src="https://codestar.top/note-image/20250702233215713.png" alt="image-20250616161611815"></td></tr><tr><td align="center"><strong>R (Requires, 要求)</strong></td><td align="center">表示如果原因a为真，那么原因b也必须为真。即a的发生以b的发生为前提。</td><td align="center"><img src="https://codestar.top/note-image/20250702233228285.png" alt="image-20250611192839606"></td></tr><tr><td align="center"><strong>M (Mask, 屏蔽)</strong></td><td align="center">对条件b进行屏蔽，表示如果原因a（屏蔽条件）为真，那么某个结果E必定为假（或不发生），若a为假，则结果E的值不一定，需考虑b。</td><td align="center"><img src="https://codestar.top/note-image/20250702233253153.png" alt="image-20250611192903399"></td></tr></tbody></table><p>因果图初稿示例：节点4为中间节点，用于共享1、2的状态</p><p><img src="https://codestar.top/note-image/20250702233306194.png" alt="image-20250615110219233"></p><p>带有约束关系的因果图示例：</p><p><img src="https://codestar.top/note-image/20250702233320044.png" alt="image-20250615110625919"></p><h2 id="5、判定表的介绍"><a href="#5、判定表的介绍" class="headerlink" title="5、判定表的介绍"></a>5、判定表的介绍</h2><p>判定表，也称为决策表，是一种表达逻辑判断的工具，能够用来分析不同的操作下的结果如何，是分析和表达多逻辑条件下与不同操作间的逻辑情况的有效利器。判定表经常用于因果图的测试设计当中，两者密不可分，相辅相成。在因果图的设计当中，判定表被视为因果图的最终成果体现，通过一个因果图能否得到高质量的判定表也常常是我们在因果图案例设计中所追求的一个目标。</p><p>下面来介绍判定表的简要结构，包含4个部分：</p><p><img src="https://codestar.top/note-image/20250702233749374.png" alt="image-20250611162827985"></p><ul><li><strong>1、条件桩（Condition Stub）</strong>：包含所有的输入条件，与各条件之间相互独立无影响。</li><li><strong>2、动作桩（Action Stub）</strong>：所有可能采取的动作，即输出条件，所有输出条件之间无影响。</li><li><strong>3、条件项（Condition Entry）</strong>：针对条件桩下，每个条件下，所有可能的取值，真或者假。</li><li><strong>4、动作项（Action Entry）</strong>：列出所有可能的操作项，当与条件操作相匹配时为真，其他为假。</li></ul><p>完整判定表结构如下：</p><p><img src="https://codestar.top/note-image/20250702233801820.png" alt="image-20250615110700582"></p><p>其中，条件项与动作项组成的每一列记录，即为一个<strong>规则</strong>，这是判定表的细节组成部分，最终也是通过这一部分生成我们的测试案例。</p><h2 id="6、实践案例"><a href="#6、实践案例" class="headerlink" title="6、实践案例"></a>6、实践案例</h2><h3 id="6-1-案例一：文件修改功能测试"><a href="#6-1-案例一：文件修改功能测试" class="headerlink" title="6.1 案例一：文件修改功能测试"></a>6.1 案例一：文件修改功能测试</h3><p>一个应用程序，根据输入的第一列（字符）和第二列（数字）判断是否修改文件。若第一列非 A&#x2F;B，输出错误信息 N；若第二列非数字，输出错误信息 M；若均正确，则修改文件。</p><p><strong>分析步骤如下</strong>：</p><ul><li><p><strong>1、确定输入和输出</strong>：</p><ul><li><strong>原因（输入条件）</strong>：</li></ul><table><thead><tr><th align="center">序号</th><th align="center">输入项</th><th align="center">编号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">第一列为A</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">第一列为B</td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">第一列为非A&#x2F;B</td><td align="center">3</td></tr><tr><td align="center">4</td><td align="center">第二列为数字</td><td align="center">4</td></tr><tr><td align="center">5</td><td align="center">第二列为非数字</td><td align="center">5</td></tr></tbody></table><ul><li><strong>中间节点：</strong> 第一列为A或B - 编号11</li><li><strong>结果（输出）：</strong> 修改文件、输出错误信息 N、输出错误信息 M。</li></ul><table><thead><tr><th align="center">序号</th><th align="center">结果项</th><th align="center">编号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">修改文件</td><td align="center">21</td></tr><tr><td align="center">2</td><td align="center">输出错误信息N</td><td align="center">22</td></tr><tr><td align="center">3</td><td align="center">输出错误信息M</td><td align="center">23</td></tr></tbody></table></li><li><p><strong>2、确定因果关系及约束关系</strong>：</p><ul><li><p><strong>因果关系：</strong></p><blockquote><p>第一列为A或B、第二列为数字，修改文件。</p><p>第一列非 A&#x2F;B，输出错误信息 N。</p><p>第二列非数字，输出错误信息 M。</p></blockquote></li><li><p><strong>约束关系：</strong> </p><blockquote><p>第一列A\B\“非AB”不可同时存在</p><p>第二列数字\非数字不可同时存在</p></blockquote></li></ul></li><li><p><strong>3、绘制因果图并补充约束关系</strong>：</p><p><img src="https://codestar.top/note-image/20250702233946371.png" alt="image-20250617145357899"></p></li><li><p><strong>4、将因果图转化为判定表</strong>：列出所有可能的输入组合及其对应的输出结果</p></li></ul><p><img src="https://codestar.top/note-image/20250702233956423.png" alt="image-20250617150947497"></p><ul><li><strong>5、根据判定表设计测试用例</strong>：</li></ul><table><thead><tr><th>测试用例ID</th><th>输入（第一列, 第二列）</th><th>预期输出</th></tr></thead><tbody><tr><td>Case1</td><td>A, 5</td><td>修改文件</td></tr><tr><td>Case2</td><td>A, X</td><td>输出错误信息M</td></tr><tr><td>Case3</td><td>B, 5</td><td>修改文件</td></tr><tr><td>Case4</td><td>B, X</td><td>输出错误信息M</td></tr><tr><td>Case5</td><td>C, 5</td><td>输出错误信息N</td></tr><tr><td>Case6</td><td>C, X</td><td>输出错误信息N和M</td></tr></tbody></table><p>因果图的分析中，可以进一步补充条件进行分析，如在Case1的基础上，再增加分析文件修改权限的讨论。</p><h3 id="6-2-案例二：自助售货机系统"><a href="#6-2-案例二：自助售货机系统" class="headerlink" title="6.2 案例二：自助售货机系统"></a>6.2 案例二：自助售货机系统</h3><p>依据之前讲解的<a href="https://blog.codestar.top/testskill/orthogonal-experiment-basic-principle-and-practice.html">正交试验</a>中的例子，分析自助售货机系统。假设完整的需求如下：</p><blockquote><p>某自助售货机，支持自助售卖饮品，售卖的产品有怡宝、农夫山泉、脉动，售货机支持的支付方式需要有：支付宝、微信支付、数字货币、云闪付并且在交易时，并且支持人民币、美元支付。售卖机投放的区域有两块，区域A、区域B。售卖规则按所属区域自主调控定价。</p><p>完整区域定价表如下： </p><p><img src="https://codestar.top/note-image/20250702234014844.png" alt="image-20250615163229488"></p><p>支付金额与出售价格一致时，可正常交易，会根据选择自动出货对应的饮品。支付金额与出售价格不一致时，会导致交易失败，此时不会出货。设计测试案例。</p></blockquote><p>梳理需求，进行拆解得到下面的需求片段：</p><ul><li>售卖机投放的区域有两块，区域A、区域B</li><li>售卖的产品有怡宝、农夫山泉、脉动</li><li>售货机支持的支付方式需要有：支付宝、微信支付、数字货币、云闪付</li><li>售货机支持支持人民币、美元支付</li><li>支付金额与出售价格一致时，可正常交易，会根据选择自动出货对应的饮品</li><li>支付金额与售出价格不一致时，会导致交易失败，此时不会出货。</li><li>售卖货品区域价格定价表</li></ul><p><strong>分析步骤如下</strong>：</p><ul><li><p><strong>1、确定输入和输出</strong>：</p><ul><li><p><strong>输入条件（原因）：</strong></p><table><thead><tr><th align="center">序号</th><th align="center">输入项</th><th align="center">拆解子项</th><th align="center">编号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">“购买区域”输入</td><td align="center">选择区域A购买；选择区域B购买</td><td align="center">1、2</td></tr><tr><td align="center">2</td><td align="center">“购买产品选择”输入</td><td align="center">选择怡宝购买；选择脉动购买；选择农夫山泉购买</td><td align="center">3、4、5</td></tr><tr><td align="center">3</td><td align="center">“支付方式”输入</td><td align="center">使用支付宝付款；使用微信付款；使用云闪付付款；使用数字货币付款</td><td align="center">6、7、8、9</td></tr><tr><td align="center">4</td><td align="center">”结算货币“输入</td><td align="center">使用人民币结算；使用美金结算</td><td align="center">10、11</td></tr><tr><td align="center">5</td><td align="center">“支付金额”输入</td><td align="center">支付金额￥2；支付金额￥3；支付金额￥6；支付金额$0.3；支付金额$0.5；<br>支付金额$0.9；支付金额￥1.5；支付金额￥5；支付金额$0.4；支付金额$0.8；</td><td align="center">12、13、14、15、16<br>17、18、19、20、21</td></tr></tbody></table></li><li><p><strong>输出结果</strong>：</p><table><thead><tr><th align="center">序号</th><th align="center">结果项</th><th align="center">编号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">购买成功，出货怡宝</td><td align="center">91</td></tr><tr><td align="center">2</td><td align="center">购买成功，出货农夫山泉</td><td align="center">92</td></tr><tr><td align="center">3</td><td align="center">购买成功，出货脉动</td><td align="center">93</td></tr><tr><td align="center">4</td><td align="center">购买失败，不出货</td><td align="center">94</td></tr></tbody></table></li></ul></li><li><p><strong>2、中间节点：</strong></p><table><thead><tr><th align="center">序号</th><th align="center">中间节点</th><th align="center">编号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">选择区域A或区域B</td><td align="center">31</td></tr><tr><td align="center">2</td><td align="center">选择“怡宝”、“脉动”或“农夫山泉”</td><td align="center">32</td></tr><tr><td align="center">3</td><td align="center">选择支付宝、微信、云闪付或数字货币付款</td><td align="center">33</td></tr><tr><td align="center">4</td><td align="center">选择人民币或美金结算</td><td align="center">34</td></tr><tr><td align="center">5</td><td align="center">选择区域A，确定支付方式使用人民币购买商品，开始交易</td><td align="center">41</td></tr><tr><td align="center">6</td><td align="center">选择区域B，确定支付方式使用人民币购买商品，开始交易</td><td align="center">42</td></tr><tr><td align="center">7</td><td align="center">选择区域A，确定支付方式使用美金购买商品，开始交易</td><td align="center">43</td></tr><tr><td align="center">8</td><td align="center">选择区域B，确定支付方式使用美金购买商品，开始交易</td><td align="center">44</td></tr><tr><td align="center">9</td><td align="center">支付￥2，付款成功</td><td align="center">61</td></tr><tr><td align="center">10</td><td align="center">支付￥3，付款成功</td><td align="center">62</td></tr><tr><td align="center">11</td><td align="center">支付￥6，付款成功</td><td align="center">63</td></tr><tr><td align="center">12</td><td align="center">支付$0.3，付款成功</td><td align="center">64</td></tr><tr><td align="center">13</td><td align="center">支付$0.5，付款成功</td><td align="center">65</td></tr><tr><td align="center">14</td><td align="center">支付$0.9，付款成功</td><td align="center">66</td></tr><tr><td align="center">15</td><td align="center">支付￥1.5，付款成功</td><td align="center">67</td></tr><tr><td align="center">16</td><td align="center">支付￥5，付款成功</td><td align="center">68</td></tr><tr><td align="center">17</td><td align="center">支付$0.4，付款成功</td><td align="center">69</td></tr><tr><td align="center">18</td><td align="center">支付$0.8，付款成功</td><td align="center">70</td></tr></tbody></table></li><li><p><strong>3、明确约束关系：</strong></p><table><thead><tr><th align="center">输入</th><th align="center">约束条件</th><th align="center">约束关系</th></tr></thead><tbody><tr><td align="center">“购买区域”输入</td><td align="center">同一时刻仅可在1个区域购买</td><td align="center">1、2互斥</td></tr><tr><td align="center">“购买产品选择”输入</td><td align="center">单次购买仅支持1款商品</td><td align="center">3、4、5互斥</td></tr><tr><td align="center">“支付方式”输入</td><td align="center">单笔订单仅支持1种支付方式</td><td align="center">6、7、8、9互斥</td></tr><tr><td align="center">”结算货币“输入</td><td align="center">单笔订单仅支持1种结算货币</td><td align="center">10、11互斥</td></tr><tr><td align="center">“支付金额”输入</td><td align="center">单笔订单仅显示1种价格</td><td align="center">12~23互斥</td></tr></tbody></table></li><li><p><strong>3、绘制因果图</strong>：根据输入和输出以及它们之间的因果关系和约束条件，绘制完整因果图如下。</p><p><img src="https://codestar.top/note-image/20250702234211409.png" alt="自动售货机-因果图.drawio"></p></li><li><p><strong>4、将因果图转换为判定表</strong>：部分判定表如下：</p></li></ul><p><img src="https://codestar.top/note-image/20250702234228049.png" alt="image-20250617173130280"></p><p>原始的因果图和完整判定表可以查收附件： <a href="https://pan.baidu.com/s/1ROYXKMUDYrrmBx09Tyrr6A?pwd=r74d">自动售货机-案例判定表.xlsx</a> </p><ul><li><strong>5、设计测试用例</strong>：根据判定表直接转为测试用例，部分案例如下，逐个场景转换即可</li></ul><table><thead><tr><th>测试用例ID</th><th>输入（第一列, 第二列）</th><th>预期输出</th></tr></thead><tbody><tr><td>C_1</td><td>A区域, 购买怡宝，使用支付宝人民币结算，付款￥2</td><td>购买失败，不出货</td></tr><tr><td>C_2</td><td>A区域, 购买怡宝，使用支付宝人民币结算，付款￥3</td><td>购买成功，出货怡宝</td></tr></tbody></table><p>通过分析因果图，可以很完整的将所有测试情况考虑到，不用担心测试场景遗漏。</p><h2 id="7、拓展：因果图与正交试验结合"><a href="#7、拓展：因果图与正交试验结合" class="headerlink" title="7、拓展：因果图与正交试验结合"></a>7、拓展：因果图与正交试验结合</h2><p>在实际应用中，正交试验与因果图这两种方法是可以结合使用的，例如：先使用正交试验法对主要因素进行初步筛选和测试，确定一些关键的因素组合，然后针对这些关键组合，使用因果图法进行更详细的测试用例设计，以进一步提高测试的全面性和准确性，下面来介绍两种结合的策略。</p><h3 id="7-1-策略一：基于因果图对正交试验结果进行补充逻辑验证"><a href="#7-1-策略一：基于因果图对正交试验结果进行补充逻辑验证" class="headerlink" title="7.1 策略一：基于因果图对正交试验结果进行补充逻辑验证"></a>7.1 策略一：基于因果图对正交试验结果进行补充逻辑验证</h3><p><strong>1、分析需求并构建因果图：</strong> 分析需求，得到输入和结果，绘制因果图并补充约束关系。</p><p><strong>2、因素与水平的提取：</strong> 从因果图中选取独立”原因“作为正交试验的”因素“，将作为”因素“的每个可能取值，作为该”因素“的”水平“值。</p><p><strong>3、选择正交表并生成测试用例组合：</strong> 根据获取的”因素“和”水平“选取合适的正交表进行试验分析，具体正交表的操作方法可以查看<a href="https://blog.codestar.top/testskill/orthogonal-experiment-basic-principle-and-practice.html">正交试验</a>，得到正交表后，再通过正交表得到初步测试用例。</p><p><strong>4、结合因果图逻辑进行验证与调整：</strong></p><ul><li><strong>约束验证：</strong> 根据因果图中的约束条件（E、R约束等），验证正交表中的测试用例组合，剔除不符合实际业务的组合项。</li><li><strong>关键路径补充： 分析并标记因果图中关键逻辑路径，检查是否被正交试验中的用例所覆盖</strong>，若存在遗漏，需补充相关场景，确保这些关键路径得到测试。</li><li><strong>逻辑验证：</strong> 对于每一项正交表中的测试用例组合，通过因果图验证逻辑推断及其输出结果，得到最终测试用例。</li></ul><h3 id="7-2-策略二：基于因果图生成的判定表规则进行正交抽样"><a href="#7-2-策略二：基于因果图生成的判定表规则进行正交抽样" class="headerlink" title="7.2 策略二：基于因果图生成的判定表规则进行正交抽样"></a>7.2 策略二：基于因果图生成的判定表规则进行正交抽样</h3><p><strong>1、分析因果图生成完整的判定表：</strong> 先通过因果图分析，得到一个完整的判定表。</p><p><strong>2、识别判定表中的条件项作为因素：</strong> 从判定表的输入条件，选取独立特性作为正交试验中的一个个“因素”，再根据输入条件的可能取值，将其作为对应因素的“水平”。</p><p><strong>3、应用正交试验法选择规则子集：</strong> 根据得到的因素和水平值，生成合适的正交表。利用正交表结果，再反向从判定表的所有规则中，取出与正交表对应的所有取值相匹配的规则。</p><p><strong>4、生成测试用例：</strong> 根据判定表中匹配的规则子集，设计具体的测试用例。</p><p>关于这两种策略，策略一更侧重于先从逻辑层面识别关键因素再进行组合优化，策略二则是在已形成完整逻辑规则集（判定表）的基础上进行高效抽样。实际应用中可根据具体情况灵活选择或结合使用。</p><h2 id="8、参考"><a href="#8、参考" class="headerlink" title="8、参考"></a>8、参考</h2><p><a href="https://blog.csdn.net/onforget/article/details/137552880">https://blog.csdn.net/onforget/article/details/137552880</a><br><a href="https://www.cnblogs.com/yilang/p/12259420.html">https://www.cnblogs.com/yilang/p/12259420.html</a><br><a href="https://test-method.tutorial.hogwarts.ceshiren.com/test_method/L1/tutorial/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA-%E5%88%A4%E5%AE%9A%E8%A1%A8/">https://test-method.tutorial.hogwarts.ceshiren.com/test_method/L1/tutorial/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA-%E5%88%A4%E5%AE%9A%E8%A1%A8/</a></p>]]></content>
    
    
    <categories>
      
      <category>测试技术</category>
      
      <category>黑盒测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试设计方法</tag>
      
      <tag>黑盒测试</tag>
      
      <tag>因果图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sonarqube：Jenkins触发sonar扫描出现UnsupportedClassVersionError错误处理</title>
    <link href="/testskill/sonarqube-jenkins-trigger-sonar-scan-error.html"/>
    <url>/testskill/sonarqube-jenkins-trigger-sonar-scan-error.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、问题现象"><a href="#1、问题现象" class="headerlink" title="1、问题现象"></a>1、问题现象</h2><p><strong>问题现象</strong>：在每次Jenkins触发sonar扫描时，Sonar-scanner扫描器执行都会出现<code>UnsupportedClassVersionError</code>异常，如下：</p><p><img src="https://codestar.top/note-image/20250625231818678.png" alt="image-20250624163248423"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR: Error during SonarQube Scanner execution<br>java.lang.UnsupportedClassVersionError: org/sonar/batch/bootstrapper/EnvironmentInformation has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 55.0<br>at java.base/java.lang.ClassLoader.defineClass1(Native Method)<br>at java.base/java.lang.ClassLoader.defineClass(Unknown Source)<br>at java.base/java.security.SecureClassLoader.defineClass(Unknown Source)<br>at java.base/java.net.URLClassLoader.defineClass(Unknown Source)<br>at java.base/java.net.URLClassLoader$1.run(Unknown Source)<br>at java.base/java.net.URLClassLoader$1.run(Unknown Source)<br>at java.base/java.security.AccessController.doPrivileged(Native Method)<br>at java.base/java.net.URLClassLoader.findClass(Unknown Source)<br>at org.sonarsource.scanner.api.internal.IsolatedClassloader.loadClass(IsolatedClassloader.java:82)<br>at java.base/java.lang.ClassLoader.loadClass(Unknown Source)<br>at org.sonarsource.scanner.api.internal.batch.DefaultBatchFactory.createBatch(DefaultBatchFactory.java:32)<br>at org.sonarsource.scanner.api.internal.batch.BatchIsolatedLauncher.execute(BatchIsolatedLauncher.java:46)<br>at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)<br>at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)<br>at java.base/java.lang.reflect.Method.invoke(Unknown Source)<br>at org.sonarsource.scanner.api.internal.IsolatedLauncherProxy.invoke(IsolatedLauncherProxy.java:60)<br>at com.sun.proxy.$Proxy0.execute(Unknown Source)<br>at org.sonarsource.scanner.api.EmbeddedScanner.doExecute(EmbeddedScanner.java:189)<br>at org.sonarsource.scanner.api.EmbeddedScanner.execute(EmbeddedScanner.java:138)<br>at org.sonarsource.scanner.cli.Main.execute(Main.java:112)<br>at org.sonarsource.scanner.cli.Main.execute(Main.java:75)<br>at org.sonarsource.scanner.cli.Main.main(Main.java:61)<br>ERROR: <br>ERROR: Re-run SonarQube Scanner using the -X switch to enable full debug logging.<br></code></pre></td></tr></table></figure><h2 id="2、问题根因"><a href="#2、问题根因" class="headerlink" title="2、问题根因"></a>2、问题根因</h2><p>这个问题表现<strong>在于扫描环境中java版本的错误</strong>，要求执行<code>sonar-scanner</code>时<strong>Java版本 &gt;&#x3D; Java17(class version 61)</strong>，但当前环境实际Java版本为Java11（class version 55），存在不支持的类，所以报错。这个问题本身很好解决，重新配置java环境变量即可，但这里面有个坑，配置的环境变量可能会不生效，需要专门的来说一下。</p><p><strong>根因具体有几方面</strong>：</p><blockquote><ul><li>1、系统默认的Java版本为Java11，导致sonar-scanner执行失败</li><li>2、sonar-scanner.properties配置文件指定了Java11的版本</li><li>3、sonar-scanner执行时使用了内嵌Java，并且版本为Java11（重点）</li></ul></blockquote><h2 id="3、解决思路"><a href="#3、解决思路" class="headerlink" title="3、解决思路"></a>3、解决思路</h2><h3 id="3-1-解决思路1"><a href="#3-1-解决思路1" class="headerlink" title="3.1 解决思路1"></a>3.1 解决思路1</h3><p><strong>针对第1点：</strong> 直接重新配置执行时的环境变量即可，刷新Java生效的环境。</p><p>通过在Execute shell中指定重新配置Java环境变量，添加的时候必须将PATH一起配置，否则，当PATH路径中Java11版本的配置排列在Java17之前，会被优先索引到并采用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64<br>export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/20250625231848294.png" alt="image-20250624173208206"></p><h3 id="3-2-解决思路2"><a href="#3-2-解决思路2" class="headerlink" title="3.2 解决思路2"></a>3.2 解决思路2</h3><p><strong>针对第2点：</strong> 需要对<code>sonar-scanner.properties</code>中设置进行修正，将其指定为Java17的版本。</p><p>配置文件路径通常为<code>/opt/sonarqube/sonar-scanner/conf/sonar-scanner.properties</code></p><p>配置内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sonar.scanner.javaHome=/usr/lib/jvm/java-17-openjdk-amd64<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> <code>sonar.scanner.javaHome</code>的参数支持，需要要求<strong>sonar-scanner版本&gt;&#x3D;4.12</strong>，将<code>sonar-scanner.properties</code>配置完成之后，最好再根据第1点，在执行前指定Java17，sonar-scanner.properties的作用通常在执行扫描时生效。</p><h3 id="3-3-解决思路3"><a href="#3-3-解决思路3" class="headerlink" title="3.3 解决思路3"></a>3.3 解决思路3</h3><p><strong>针对第3点：这里面埋了个大坑</strong>，sonar-scanner脚本本身会指定Java版本，当内嵌的版本为Java11时，外部所有其他方式指定的Java配置均不生效。</p><p>检查sonar-scanner执行脚本，文件路径在这<code>/opt/sonarqube/sonar-scanner/bin/sonar-scanner</code>，在下面几句会指明是否使用内嵌的Java：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">use_embedded_jre=<span class="hljs-literal">true</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$use_embedded_jre</span>&quot;</span> = <span class="hljs-literal">true</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">export</span> JAVA_HOME=<span class="hljs-variable">$sonar_scanner_home</span>/jre<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><blockquote><p>当<code>use_embedded_jre</code>变量值为true时，会直接采用内嵌的java版本，将内嵌的jre路径导入<code>export JAVA_HOME=$sonar_scanner_home/jre</code>，<strong>这一项的优先级高于其他所有的配置。当此配置为true时，我们在第1点、第2点中所修改的内容都将不生效。</strong></p></blockquote><p><strong>解决方法：</strong> 直接修改<code>sonar-scanner执行脚本</code>，将<code>use_embedded_jre</code>设置为false，其他无需更改，即修改为如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">use_embedded_jre=false<br>if [ &quot;$use_embedded_jre&quot; = true ]; then<br>  export JAVA_HOME=$sonar_scanner_home/jre<br>fi<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/20250625232318364.png" alt="image-20250624154648144"></p><p>这样就默认不会采用内嵌的Java，之后再结合第1点的配置调整环境变量。重新触发构建，可正常进行扫描：</p><p><img src="https://codestar.top/note-image/20250625232400366.png" alt="image-20250624175149369"></p><p>如果没有Jenkins服务器权限，可以在Jenkins配置中新建Execute shell，填入以下指令，直接在命令行对<code>sonar-scanner</code>进行修改：除了改动<code>use_embedded_jre</code>值外，其他原封不动粘贴</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt; &#x27;EOF&#x27; &gt; /opt/sonarqube/sonar-scanner/bin/sonar-scanner<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># SonarQube Scanner Startup Script for Unix</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Optional ENV vars:</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  SONAR_SCANNER_OPTS - Parameters passed to the Java VM when running the SonarQube Scanner</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  SONAR_SCANNER_DEBUG_OPTS - Extra parameters passed to the Java VM <span class="hljs-keyword">for</span> debugging</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">  JAVA_HOME - Location of Java<span class="hljs-string">&#x27;s installation</span></span><br><br>real_path () &#123;<br>  target=$1<br><br>  (<br>  while true; do<br>    cd &quot;$(dirname &quot;$target&quot;)&quot;<br>    target=$(basename &quot;$target&quot;)<br>    test -L &quot;$target&quot; || break<br>    target=$(readlink &quot;$target&quot;)<br>  done<br><br>  echo &quot;$(pwd -P)/$target&quot;<br>  )<br>&#125;<br><br>script_path=$(real_path &quot;$0&quot;)<br>sonar_scanner_home=$(dirname &quot;$script_path&quot;)/..<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">make it fully qualified</span></span><br>sonar_scanner_home=$(cd &quot;$sonar_scanner_home&quot; &amp;&amp; pwd -P)<br><br>jar_file=$sonar_scanner_home/lib/sonar-scanner-cli-4.2.0.1873.jar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">check that sonar_scanner_home has been correctly set</span></span><br>if [ ! -f &quot;$jar_file&quot; ] ; then<br>  echo &quot;File does not exist: $jar_file&quot;<br>  echo &quot;&#x27;$sonar_scanner_home&#x27; does not point to a valid installation directory: $sonar_scanner_home&quot;<br>  exit 1<br>fi<br><br>use_embedded_jre=false<br>if [ &quot;$use_embedded_jre&quot; = true ]; then<br>  export JAVA_HOME=$sonar_scanner_home/jre<br>fi<br><br>if [ -n &quot;$JAVA_HOME&quot; ]<br>then<br>  java_cmd=&quot;$JAVA_HOME/bin/java&quot;<br>else<br>  java_cmd=&quot;$(which java)&quot;<br>fi<br><br>if [ -z &quot;$java_cmd&quot; -o ! -x &quot;$java_cmd&quot; ] ; then<br>  echo &quot;Could not find &#x27;java&#x27; executable in JAVA_HOME or PATH.&quot;<br>  exit 1<br>fi<br><br>project_home=$(pwd)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">echo &quot;Info: Using sonar-scanner at $sonar_scanner_home&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">echo &quot;Info: Using java at $java_cmd&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">echo &quot;Info: Using classpath $jar_file&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">echo &quot;Info: Using project $project_home&quot;</span></span><br><br>exec &quot;$java_cmd&quot; \<br>  -Djava.awt.headless=true \<br><span class="hljs-meta prompt_">  $</span><span class="language-bash"><span class="hljs-string">SONAR_SCANNER_OPTS \</span></span><br><span class="hljs-string"><span class="language-bash">  $SONAR_SCANNER_DEBUG_OPTS \</span></span><br><span class="hljs-string"><span class="language-bash">  -classpath  &quot;$jar_file&quot; \</span></span><br><span class="hljs-string"><span class="language-bash">  -Dscanner.home=&quot;$sonar_scanner_home&quot; \</span></span><br><span class="hljs-string"><span class="language-bash">  -Dproject.home=&quot;$project_home&quot; \</span></span><br><span class="hljs-string"><span class="language-bash">  org.sonarsource.scanner.cli.Main &quot;$@&quot;</span></span><br>EOF<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Sonarqube</category>
      
      <category>异常处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
      <tag>Sonarqube</tag>
      
      <tag>异常处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试设计方法：正交试验原理分析与实践</title>
    <link href="/testskill/orthogonal-experiment-basic-principle-and-practice.html"/>
    <url>/testskill/orthogonal-experiment-basic-principle-and-practice.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、引言"><a href="#1、引言" class="headerlink" title="1、引言"></a>1、引言</h2><p>软件领域从上世纪60年代发展至今，开发技术不断地迭代，软件的复杂度也日趋复杂，质量保障地实践方法也在发生着变化。早期的黑盒测试，通过等价类划分、边界值分析、错误猜测等方法对程序功能进行分析，对黑盒测试的案例设计方法也在不断的探索，下面来介绍一种新的黑盒测试设计方法：正交试验。一种十分经典的设计方法，将统计学正交试验的思路结合到了测试设计的过程中，通过采用此方法，可以非常高效的提高案例的设计效率，十分方便。</p><h2 id="2、基本原理及定义"><a href="#2、基本原理及定义" class="headerlink" title="2、基本原理及定义"></a>2、基本原理及定义</h2><p><strong>正交试验</strong>，是一种基于统计学原理的黑盒测试方法，本质是利用正交表，来将各种因素进行均匀的搭配组合，来提高我们的测试场景整体的覆盖密度，确保我们每个独立的因素场景及它们之间的交互场景都能被充分的验证到。因为这一点，通过这一种方法，生成的测试案例的数量会相对少很多，减少了用例场景之间的冗余。也正因为这一点，可以在不影响整体测试效果下，大幅提升测试效率，并且测试的结果依然可靠。</p><p>正交试验包含下面三种基本要素：</p><ul><li><p><strong>1、因素 (Factor)</strong>：</p><p>指代能够影响软件功能、性能、或配置一种独立的输入变量。例如自动售货机，交易时的支付方式、售卖物品都可视为独立因素。</p></li><li><p><strong>2、水平 (Level)</strong>：</p><p>表示独立因素下，所有可能的取值或状态。例如自动售货机，支付方式有支付宝、微信支付、数字货币、云闪付，这些都是支付方式这一因素的水平值。</p></li><li><p><strong>3、正交表 (Orthogonal Array)</strong>：</p><p>一种预设好的、用于安排多因素试验的标准化表格，也可称之为因子状态表，依据伽罗瓦理论（Galois Theory）生成。通常用$\ L_n(m^k)$来表示：</p><ul><li><strong>L</strong>：代表正交表 (Latin Square)</li><li><strong>n</strong>：代表正交表的行数，即试验的次数，对应最终生成的测试用例的数量</li><li><strong>k</strong>：代表正交表的列数（栏数），表示最多可以安排的因素个数</li><li><strong>m</strong>：表示每个因素所具有的水平数</li></ul><p>$\ L_n(m^k)$表示的是一个可研究k个因素，每个因素最多可具有m个水平值的需n次试验的正交试验。</p></li></ul><h2 id="3、正交表的分类"><a href="#3、正交表的分类" class="headerlink" title="3、正交表的分类"></a>3、正交表的分类</h2><h3 id="3-1、标准正交表"><a href="#3-1、标准正交表" class="headerlink" title="3.1、标准正交表"></a>3.1、标准正交表</h3><p>在研究的案例下，<strong>当所研究的所有因素都具有相同的水平值时</strong>，通过这种格式生成的正交表即为标准正交表，也称为单一水平正交表。</p><p>如$L_9(3^4)$表示的就是一个需要进行9次试验的标准正交表，可以用来研究最多4个因素，每个因素有3个水平：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">factor1: level_1, level_2, level_3<br>factor2: level_1, level_2, level_3<br>factor3: level_1, level_2, level_3<br>factor4: level_1, level_2, level_3<br></code></pre></td></tr></table></figure><p>正交表示例：</p><table><thead><tr><th>用例</th><th>factor1</th><th>factor2</th><th>factor3</th><th>factor4</th></tr></thead><tbody><tr><td>用例1</td><td>level_1</td><td>level_1</td><td>level_1</td><td>level_1</td></tr><tr><td>用例2</td><td>level_1</td><td>level_2</td><td>level_3</td><td>level_2</td></tr><tr><td>用例3</td><td>level_1</td><td>level_3</td><td>level_2</td><td>level_3</td></tr><tr><td>用例4</td><td>level_2</td><td>level_1</td><td>level_3</td><td>level_3</td></tr><tr><td>用例5</td><td>level_2</td><td>level_2</td><td>level_2</td><td>level_1</td></tr><tr><td>用例6</td><td>level_2</td><td>level_3</td><td>level_1</td><td>level_2</td></tr><tr><td>用例7</td><td>level_3</td><td>level_1</td><td>level_2</td><td>level_2</td></tr><tr><td>用例8</td><td>level_3</td><td>level_2</td><td>level_1</td><td>level_3</td></tr><tr><td>用例9</td><td>level_3</td><td>level_3</td><td>level_3</td><td>level_1</td></tr></tbody></table><h3 id="3-2、混合水平正交表"><a href="#3-2、混合水平正交表" class="headerlink" title="3.2、混合水平正交表"></a>3.2、混合水平正交表</h3><p>大多数情况下，问题涉及的因素水平数并不会相同，这种情况下采用混合水平正交表。像$L_{6}(2^{1}\ 3^{1})$表示的是一个需要6次试验的混合水平正交表，其中存在1个因素有2水平、1个因素有3水平。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">factor1: level_1, level_2<br>factor2: level_1, level_2, level_3<br></code></pre></td></tr></table></figure><p>正交表示例：</p><table><thead><tr><th>用例</th><th>factor1</th><th>factor2</th></tr></thead><tbody><tr><td>用例1</td><td>level_1</td><td>level_1</td></tr><tr><td>用例2</td><td>level_1</td><td>level_2</td></tr><tr><td>用例3</td><td>level_1</td><td>level_3</td></tr><tr><td>用例4</td><td>level_2</td><td>level_1</td></tr><tr><td>用例5</td><td>level_2</td><td>level_2</td></tr><tr><td>用例6</td><td>level_2</td><td>level_3</td></tr></tbody></table><p>总结：标准正交表的格式固定，生成的表可以查阅标准表，见附录[9.1 常用正交表查阅表](###9.1 常用正交表查阅表)，其中也包含一部分常见的混合水平正交表可以查阅。</p><h2 id="4、正交试验设计步骤"><a href="#4、正交试验设计步骤" class="headerlink" title="4、正交试验设计步骤"></a>4、正交试验设计步骤</h2><p>通过正交试验设计用例，简要分为下面四个步骤：</p><ul><li><p><strong>第一步：</strong> 分析需求中涉及的所有的“因素”以及“水平”值。</p></li><li><p><strong>第二步：</strong> 选择合适的正交表，优先采用标准正交表。当因素水平不一致时采用混合水平正交表。</p></li><li><p><strong>第三步：</strong> 将“因素”以及“水平”根据正交表水平值映射到正交表。</p></li><li><p><strong>第四步：</strong> 根据完整正交表生成测试用例。</p></li></ul><p>上面的四个步骤中，相对复杂的是对正交表的选用，下面通过具体案例进行探究。</p><h2 id="5、应用案例"><a href="#5、应用案例" class="headerlink" title="5、应用案例"></a>5、应用案例</h2><h3 id="5-1-案例一：自助售货机"><a href="#5-1-案例一：自助售货机" class="headerlink" title="5.1 案例一：自助售货机"></a>5.1 案例一：自助售货机</h3><p>以上面提到的自助售货机为例，假设完整需求规格书如下：</p><blockquote><p>某自助售货机，支持自助售卖饮品，售卖的产品有怡宝、农夫山泉、脉动，售货机支持的支付方式需要有：支付宝、微信支付、数字货币、云闪付并且在交易时，并且支持人民币、美元支付。售卖机投放的区域有两块，区域A、区域B。售卖规则按所属区域自主调控定价。设计针对自助售货机的售货功能测试。</p></blockquote><p><strong>1、分析需求中的“因素”和“水平”：</strong></p><blockquote><p>售卖物品：怡宝、农夫山泉、脉动 ———— 因素：售卖物品、水平值：3</p><p>支付方式：支付宝、微信支付、数字货币、云闪付 ———— 因素：支付方式、水平值：4</p><p>交易货币：人民币、美元 ———— 因素：交易货币、水平值：2</p><p>销售区域：区域A、区域B ———— 因素：销售区域、水平值：2</p></blockquote><p><strong>2、选择合适正交表：</strong></p><p>这里很明显的是，四个因素，各自有不同的水平值，采用的是混合正交表$L_{24}(2^{2}\ 3^{1}\ 4^{1})$，混合正交表处理方式有很多种，这里采用拆分2个小的正交表，再进行合并：</p><ul><li>拆分正交表1：$L_{2}(2^{2})$：处理的因素”交易货币“、”销售区域“。将此部分处理好整体作为1个因素A，此因素有2种结果。</li></ul><p>针对”交易货币“、”销售区域“得到标准正交表：</p><table><thead><tr><th>交易货币</th><th>销售区域</th></tr></thead><tbody><tr><td>人民币</td><td>区域 B</td></tr><tr><td>美元</td><td>区域 A</td></tr></tbody></table><ul><li>拆分正交表2：$L_{12}(3^{1}\ 4^{1})$：剩余2个因素待处理，最大水平为4，直接进行正交组合得到12个试验，再补全关联因素A，以标准正交表来进行处理得到如下：</li></ul><table><thead><tr><th align="center">试验序号</th><th align="center">售卖物品</th><th align="center">支付方式</th><th align="center">因素A</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">怡宝</td><td align="center">支付宝</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">怡宝</td><td align="center">微信支付</td><td align="center">1</td></tr><tr><td align="center">3</td><td align="center">怡宝</td><td align="center">数字货币</td><td align="center">1</td></tr><tr><td align="center">4</td><td align="center">怡宝</td><td align="center">云闪付</td><td align="center">1</td></tr><tr><td align="center">5</td><td align="center">农夫山泉</td><td align="center">支付宝</td><td align="center">1</td></tr><tr><td align="center">6</td><td align="center">农夫山泉</td><td align="center">微信支付</td><td align="center">1</td></tr><tr><td align="center">7</td><td align="center">农夫山泉</td><td align="center">数字货币</td><td align="center">1</td></tr><tr><td align="center">8</td><td align="center">农夫山泉</td><td align="center">云闪付</td><td align="center">1</td></tr><tr><td align="center">9</td><td align="center">脉动</td><td align="center">支付宝</td><td align="center">1</td></tr><tr><td align="center">10</td><td align="center">脉动</td><td align="center">微信支付</td><td align="center">1</td></tr><tr><td align="center">11</td><td align="center">脉动</td><td align="center">数字货币</td><td align="center">1</td></tr><tr><td align="center">12</td><td align="center">脉动</td><td align="center">云闪付</td><td align="center">1</td></tr></tbody></table><p><strong>3、处理子正交表：</strong> 将拆分表1和表2正交合并，并将”因素“和”水平“映射到正交表，最终生成的正交表如下：</p><table><thead><tr><th align="center">试验序号</th><th align="center">售卖物品</th><th align="center">支付方式</th><th align="center">交易货币</th><th align="center">销售区域</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">怡宝</td><td align="center">支付宝</td><td align="center">人民币</td><td align="center">区域 A</td></tr><tr><td align="center">2</td><td align="center">怡宝</td><td align="center">微信支付</td><td align="center">人民币</td><td align="center">区域 B</td></tr><tr><td align="center">3</td><td align="center">怡宝</td><td align="center">数字货币</td><td align="center">美元</td><td align="center">区域 A</td></tr><tr><td align="center">4</td><td align="center">怡宝</td><td align="center">云闪付</td><td align="center">美元</td><td align="center">区域 B</td></tr><tr><td align="center">5</td><td align="center">农夫山泉</td><td align="center">支付宝</td><td align="center">人民币</td><td align="center">区域 B</td></tr><tr><td align="center">6</td><td align="center">农夫山泉</td><td align="center">微信支付</td><td align="center">人民币</td><td align="center">区域 A</td></tr><tr><td align="center">7</td><td align="center">农夫山泉</td><td align="center">数字货币</td><td align="center">美元</td><td align="center">区域 B</td></tr><tr><td align="center">8</td><td align="center">农夫山泉</td><td align="center">云闪付</td><td align="center">美元</td><td align="center">区域 A</td></tr><tr><td align="center">9</td><td align="center">脉动</td><td align="center">支付宝</td><td align="center">美元</td><td align="center">区域 A</td></tr><tr><td align="center">10</td><td align="center">脉动</td><td align="center">微信支付</td><td align="center">美元</td><td align="center">区域 B</td></tr><tr><td align="center">11</td><td align="center">脉动</td><td align="center">数字货币</td><td align="center">人民币</td><td align="center">区域 A</td></tr><tr><td align="center">12</td><td align="center">脉动</td><td align="center">云闪付</td><td align="center">人民币</td><td align="center">区域 B</td></tr><tr><td align="center">13</td><td align="center">怡宝</td><td align="center">支付宝</td><td align="center">美元</td><td align="center">区域 B</td></tr><tr><td align="center">14</td><td align="center">怡宝</td><td align="center">微信支付</td><td align="center">美元</td><td align="center">区域 A</td></tr><tr><td align="center">15</td><td align="center">怡宝</td><td align="center">数字货币</td><td align="center">人民币</td><td align="center">区域 B</td></tr><tr><td align="center">16</td><td align="center">怡宝</td><td align="center">云闪付</td><td align="center">人民币</td><td align="center">区域 A</td></tr><tr><td align="center">17</td><td align="center">农夫山泉</td><td align="center">支付宝</td><td align="center">美元</td><td align="center">区域 A</td></tr><tr><td align="center">18</td><td align="center">农夫山泉</td><td align="center">微信支付</td><td align="center">美元</td><td align="center">区域 B</td></tr><tr><td align="center">19</td><td align="center">农夫山泉</td><td align="center">数字货币</td><td align="center">人民币</td><td align="center">区域 A</td></tr><tr><td align="center">20</td><td align="center">农夫山泉</td><td align="center">云闪付</td><td align="center">人民币</td><td align="center">区域 B</td></tr><tr><td align="center">21</td><td align="center">脉动</td><td align="center">支付宝</td><td align="center">人民币</td><td align="center">区域 B</td></tr><tr><td align="center">22</td><td align="center">脉动</td><td align="center">微信支付</td><td align="center">人民币</td><td align="center">区域 A</td></tr><tr><td align="center">23</td><td align="center">脉动</td><td align="center">数字货币</td><td align="center">美元</td><td align="center">区域 B</td></tr><tr><td align="center">24</td><td align="center">脉动</td><td align="center">云闪付</td><td align="center">美元</td><td align="center">区域 A</td></tr></tbody></table><p><strong>4、将正交表输出到完整测试用例，每一行输出到一个测试用例。</strong></p><p>以此，每一行试验项，为一个测试用例，最终得到完整的24个测试用例。四个因素，在不使用正交试验的情况下，总共会产生$3\times4\times2\times2&#x3D;48$个测试案例。采用正交试验后对比减少50%的用例数量。针对混合水平的处理，有许多不同的处理思路，不同的处理方式下，得到的最终正交表的规格会有差异。具体方法思路参考附录：[9.2 取得正交表的常用方法](###9.2 取得正交表的常用方法)</p><h3 id="5-2-案例一：自动化处理"><a href="#5-2-案例一：自动化处理" class="headerlink" title="5.2 案例一：自动化处理"></a>5.2 案例一：自动化处理</h3><h4 id="1）PICT自动化工具介绍"><a href="#1）PICT自动化工具介绍" class="headerlink" title="1）PICT自动化工具介绍"></a>1）PICT自动化工具介绍</h4><p><a href="https://github.com/microsoft/pict"><strong>PICT (Pairwise Independent Combinatorial Testing tool)</strong></a>：微软开发的一款免费开源工具，用于正交表生成的命令行工具，支持自定义因素、水平及因素间约束关系，甚至可针对因素配置自定义权重，生成高效的成对测试用例集，广泛应用于组合测试。</p><p>基本命令语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pict sample.txt &gt; sample.xls [options]<br></code></pre></td></tr></table></figure><ul><li>sample.txt：包含所有的因素水平等内容，因素后“:”跟接各水平值，逗号相隔，因素水平默认不区分大小写。示例：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">因素A: a1, a2, a3<br>因素B: b1, b2, b3, b4, b5<br></code></pre></td></tr></table></figure><ul><li>sample.xls：生成的正交表，仅支持xls格式。</li><li>[options]：可选项，详细如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">❯ pict<br>Pairwise Independent Combinatorial Testing<br><br>Usage: pict model [options]<br><br>Options:<br> /o:N|max - Order of combinations (default: 2)  # 设置测试组合的阶数<br> /d:C     - Separator for values  (default: ,)  # 设置输出文件中值的分隔符<br> /a:C     - Separator for aliases (default: |)  # 设置值别名的分隔符<br> /n:C     - Negative value prefix (default: ~)  # 设置约束条件中表示否定的前缀<br> /e:file  - File with seeding rows              # 指定包含预定义测试用例的文件<br> /r[:N]   - Randomize generation, N - seed      # 随机生成测试用例[- 不带参数：使用当前时间作为种子;- N：指定随机种子]<br> /c       - Case-sensitive model evaluation     # 在评估模型时区分大小写，默认不区分<br> /s       - Show model statistics# 显示模型统计和生成的测试用例统计<br></code></pre></td></tr></table></figure><h4 id="2）自动化处理过程"><a href="#2）自动化处理过程" class="headerlink" title="2）自动化处理过程"></a>2）自动化处理过程</h4><p>按照pict规则，将案例1因素和水平处理后如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">售卖物品: 怡宝,农夫山泉,脉动<br>支付方式: 支付宝,微信支付,数字货币,云闪付<br>交易货币: 人民币,美元<br>销售区域: 区域A,区域B<br></code></pre></td></tr></table></figure><p>保存到sample3.txt，将其生成正交表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pict sample3.txt &gt; sample3.xls<br></code></pre></td></tr></table></figure><p>得到完整的正交表如下：</p><table><thead><tr><th align="center">试验序号</th><th align="center">售卖物品</th><th align="center">支付方式</th><th align="center">交易货币</th><th align="center">销售区域</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">怡宝</td><td align="center">微信支付</td><td align="center">人民币</td><td align="center">区域B</td></tr><tr><td align="center">2</td><td align="center">怡宝</td><td align="center">数字货币</td><td align="center">美元</td><td align="center">区域A</td></tr><tr><td align="center">3</td><td align="center">农夫山泉</td><td align="center">数字货币</td><td align="center">美元</td><td align="center">区域B</td></tr><tr><td align="center">4</td><td align="center">农夫山泉</td><td align="center">微信支付</td><td align="center">人民币</td><td align="center">区域A</td></tr><tr><td align="center">5</td><td align="center">怡宝</td><td align="center">云闪付</td><td align="center">美元</td><td align="center">区域B</td></tr><tr><td align="center">6</td><td align="center">农夫山泉</td><td align="center">支付宝</td><td align="center">人民币</td><td align="center">区域A</td></tr><tr><td align="center">7</td><td align="center">脉动</td><td align="center">云闪付</td><td align="center">人民币</td><td align="center">区域A</td></tr><tr><td align="center">8</td><td align="center">怡宝</td><td align="center">支付宝</td><td align="center">美元</td><td align="center">区域B</td></tr><tr><td align="center">9</td><td align="center">农夫山泉</td><td align="center">云闪付</td><td align="center">人民币</td><td align="center">区域A</td></tr><tr><td align="center">10</td><td align="center">脉动</td><td align="center">数字货币</td><td align="center">美元</td><td align="center">区域B</td></tr><tr><td align="center">11</td><td align="center">脉动</td><td align="center">支付宝</td><td align="center">人民币</td><td align="center">区域A</td></tr><tr><td align="center">12</td><td align="center">脉动</td><td align="center">微信支付</td><td align="center">美元</td><td align="center">区域B</td></tr><tr><td align="center">13</td><td align="center">农夫山泉</td><td align="center">数字货币</td><td align="center">人民币</td><td align="center">区域A</td></tr></tbody></table><p>工具生成的结果相比于上述手动处理结果更加精简，对交易货币和销售区域进行了进一步精简交叉。之后将处理得到的正交表转为用例即可。</p><h3 id="5-3-案例二：终端设备端口交互测试"><a href="#5-3-案例二：终端设备端口交互测试" class="headerlink" title="5.3 案例二：终端设备端口交互测试"></a>5.3 案例二：终端设备端口交互测试</h3><h4 id="1）PICT约束基本规则"><a href="#1）PICT约束基本规则" class="headerlink" title="1）PICT约束基本规则"></a>1）PICT约束基本规则</h4><p>基本符号：</p><table>    <thead>        <tr>            <th>操作符类型</th>            <th>操作符</th>            <th>说明</th>        </tr>    </thead>    <tbody>        <tr>            <td rowspan="6"><b>关系操作符</b></td>            <td><code>=</code></td>            <td>等于</td>        </tr>        <tr>            <td><code><></code></td>            <td>不等于</td>        </tr>        <tr>            <td><code><</code></td>            <td>小于</td>        </tr>        <tr>            <td><code>></code></td>            <td>大于</td>        </tr>        <tr>            <td><code><=</code></td>            <td>小于等于</td>        </tr>        <tr>            <td><code>>=</code></td>            <td>大于等于</td>        </tr>        <tr>            <td rowspan="4"><b>逻辑操作符</b></td>            <td><code>and</code></td>            <td>与</td>        </tr>        <tr>            <td><code>or</code></td>            <td>或</td>        </tr>        <tr>            <td><code>not</code></td>            <td>非</td>        </tr>         <tr>            <td><code>xor</code></td>            <td>异或</td>        </tr>        <tr>            <td rowspan="2"><b>集合操作符</b></td>            <td><code>in</code></td>            <td>属于某个集合</td>        </tr>        <tr>            <td><code>not in</code></td>            <td>不属于某个集合</td>        </tr>    </tbody></table><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">如果 ParameterA 等于 ValueA 则 ParameterB 要求等于 ValueB</span><br>if [ParameterA] = &quot;ValueA&quot; then [ParameterB] = &quot;ValueB&quot;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果 ParameterA 等于 ValueA 则 ParameterB 要求不等于 ValueB</span><br>if [ParameterA] = &quot;ValueA&quot; then [ParameterB] &lt;&gt; &quot;ValueB&quot;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果 ParameterA 等于 ValueA 且 ParameterB 等于 ValueB 则 ParameterC 等于 ValueC</span> <br>if [ParameterA] = &quot;ValueA&quot; and [ParameterB] = &quot;ValueB&quot; then [ParameterC] = &quot;ValueC&quot;;<br></code></pre></td></tr></table></figure><h4 id="2）自动化处理过程-1"><a href="#2）自动化处理过程-1" class="headerlink" title="2）自动化处理过程"></a>2）自动化处理过程</h4><p>完整需求如下：</p><blockquote><p>有一款终端设备，有3个端口，分别为A、B、C，端口A支持接入PC、适配器、OTG、上位机，端口B与端口A相同支持4种设备接入，端口C为专用接口，用来连接终端底座，拓展其他外设。端口C与端口B存在物理上互斥，无法同时接入。分析端口的测试场景。</p></blockquote><p>对其多端口场景进行分析，得到的因素和水平分别如下：</p><p>**1、分析“因素”及所有可能的“水平”值：**可充分考虑同时接入3、2、1端口的场景</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">A端口: PC、适配器、OTG、上位机、空闲 ———— 因素：A端口、水平值：5<br>B端口: PC、适配器、OTG、上位机、空闲 ———— 因素：B端口、水平值：5<br>C端口: 底座、空闲 ———— 因素：C端口、水平值：2<br></code></pre></td></tr></table></figure><p>由于B端口与C端口物理互斥，存在约束条件：</p><ul><li>长边B端口：接入 -&gt; C端口：无法接入（反之亦然）</li></ul><p><strong>2、生成正交表：</strong></p><p>直接使用PICT工具，将约束条件及因素和水平值整理得到如下初始表单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Sample</span><br>A端口: PC,适配器,OTG,上位机,空闲<br>B端口: PC,适配器,OTG,上位机,空闲<br>C端口: 底座,空闲<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">约束条件:如果B接入外设，则C必须为空</span><br>if [B端口] &lt;&gt; &quot;空闲&quot; then [C端口] = &quot;空闲&quot;;<br></code></pre></td></tr></table></figure><p>使用工具直接生成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pict demo.txt &gt; demo.xls<br></code></pre></td></tr></table></figure><p>输出正交表如下：</p><table><thead><tr><th align="center">试验序号</th><th align="center">A端口</th><th align="center">B端口</th><th align="center">C端口</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">上位机</td><td align="center">OTG</td><td align="center">空闲</td></tr><tr><td align="center">2</td><td align="center">适配器</td><td align="center">上位机</td><td align="center">空闲</td></tr><tr><td align="center">3</td><td align="center">空闲</td><td align="center">适配器</td><td align="center">空闲</td></tr><tr><td align="center">4</td><td align="center">PC</td><td align="center">空闲</td><td align="center">底座</td></tr><tr><td align="center">5</td><td align="center">空闲</td><td align="center">上位机</td><td align="center">空闲</td></tr><tr><td align="center">6</td><td align="center">PC</td><td align="center">适配器</td><td align="center">空闲</td></tr><tr><td align="center">7</td><td align="center">PC</td><td align="center">PC</td><td align="center">空闲</td></tr><tr><td align="center">8</td><td align="center">OTG</td><td align="center">上位机</td><td align="center">空闲</td></tr><tr><td align="center">9</td><td align="center">OTG</td><td align="center">适配器</td><td align="center">空闲</td></tr><tr><td align="center">10</td><td align="center">PC</td><td align="center">OTG</td><td align="center">空闲</td></tr><tr><td align="center">11</td><td align="center">上位机</td><td align="center">PC</td><td align="center">空闲</td></tr><tr><td align="center">12</td><td align="center">空闲</td><td align="center">空闲</td><td align="center">底座</td></tr><tr><td align="center">13</td><td align="center">空闲</td><td align="center">OTG</td><td align="center">空闲</td></tr><tr><td align="center">14</td><td align="center">适配器</td><td align="center">PC</td><td align="center">空闲</td></tr><tr><td align="center">15</td><td align="center">上位机</td><td align="center">上位机</td><td align="center">空闲</td></tr><tr><td align="center">16</td><td align="center">适配器</td><td align="center">空闲</td><td align="center">底座</td></tr><tr><td align="center">17</td><td align="center">OTG</td><td align="center">PC</td><td align="center">空闲</td></tr><tr><td align="center">18</td><td align="center">PC</td><td align="center">上位机</td><td align="center">空闲</td></tr><tr><td align="center">19</td><td align="center">适配器</td><td align="center">OTG</td><td align="center">空闲</td></tr><tr><td align="center">20</td><td align="center">空闲</td><td align="center">PC</td><td align="center">空闲</td></tr><tr><td align="center">21</td><td align="center">OTG</td><td align="center">OTG</td><td align="center">空闲</td></tr><tr><td align="center">22</td><td align="center">上位机</td><td align="center">空闲</td><td align="center">底座</td></tr><tr><td align="center">23</td><td align="center">适配器</td><td align="center">适配器</td><td align="center">空闲</td></tr><tr><td align="center">24</td><td align="center">OTG</td><td align="center">空闲</td><td align="center">底座</td></tr><tr><td align="center">25</td><td align="center">OTG</td><td align="center">空闲</td><td align="center">空闲</td></tr><tr><td align="center">26</td><td align="center">上位机</td><td align="center">适配器</td><td align="center">空闲</td></tr></tbody></table><p><strong>4、根据正交表输出测试用例</strong></p><p>上面的例子下，原始用例数量为，$5\times5\times2&#x3D;50$条用例，用例数量可以看出，减少了24条的用例量。这两个例子下，在使用正交试验法设计用例时，均能够在保证一定覆盖率的前提下，大幅缩减测试用例的数量，提高测试设计的效率。</p><h2 id="6、正交试验的优势和局限"><a href="#6、正交试验的优势和局限" class="headerlink" title="6、正交试验的优势和局限"></a>6、正交试验的优势和局限</h2><h3 id="6-1-优势"><a href="#6-1-优势" class="headerlink" title="6.1 优势"></a>6.1 优势</h3><table><thead><tr><th align="center">优势</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><strong>高效性</strong></td><td align="center">可有效减少测试用例的总数，提高测试效率。因素水平越复杂的场景效果越明显。</td></tr><tr><td align="center"><strong>均匀覆盖率</strong></td><td align="center">元素水平均匀覆盖，保证每对因素水平组合至少被测试一次，确保了测试的覆盖面。</td></tr><tr><td align="center"><strong>系统性</strong></td><td align="center">提供了一套系统化的方法来输出测试用例，避免主观随意性，防止场景遗漏。</td></tr><tr><td align="center"><strong>易操作性</strong></td><td align="center">过程相对简单，一旦理解了原理，便可借助现有的正交表或工具，快速设计用例。</td></tr></tbody></table><h3 id="6-2-局限"><a href="#6-2-局限" class="headerlink" title="6.2 局限"></a>6.2 局限</h3><table><thead><tr><th align="center">局限性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><strong>不适用强交互因素场景</strong></td><td align="center">对因素的独立性要求高，当因素间有强交互作用时，正交实验处理的效果会大打折扣，结果准确性也更差，不适宜采用正交实验进行处理。</td></tr><tr><td align="center"><strong>边界与异常覆盖不足</strong></td><td align="center">正交实验关注的是整体覆盖均匀，对于单个因素的边界值或异常值的关注不足，需结合其他方法（如边界值分析）处理。</td></tr><tr><td align="center"><strong>因素水平不同时处理相对复杂</strong></td><td align="center">当不同因素的水平数不同时，需要使用混合水平正交表，选择和使用混合水平正交表相对复杂，增加了测试设计的难度。</td></tr><tr><td align="center"><strong>特定组合的遗漏</strong></td><td align="center">正交试验本质上确保各因素水平两两组合，但不是所有可能的组合都会出现，可能遗漏业务逻辑上重要的特定组合，对于生成的组合需结合业务场景审查。</td></tr></tbody></table><h2 id="7、其他实用工具推荐"><a href="#7、其他实用工具推荐" class="headerlink" title="7、其他实用工具推荐"></a>7、其他实用工具推荐</h2><p>对于正交表的生成，除PICT外，还有下面的一些实用工具：</p><ul><li><p><a href="https://www.chemtools.cn/orthogonal/index.html"><strong>在线正交表生成器</strong></a>：chemtools.cn提供的一款免费在线工具，可以直接根据因素和水平值生成正交表。</p></li><li><p><a href="https://github.com/joebmt/allpairs"><strong>allpairs</strong></a>：python工具库，用于直接生成all-pairs（pairwise）测试组合，开源免费。 </p></li><li><p><a href="https://www.minitab.com/zh-cn/"><strong>Minitab</strong></a>：一款适用于各水平的统计学工具，功能强大，支持生成各类标准正交表及混合水平正交表，但需付费。</p><p>应用中“统计-&gt;DOE-&gt;田口-&gt;创建田口设计”：田口设计即为正交试验</p><p><img src="https://codestar.top/note-image/20250622224510464.png" alt="image-20250612231602962"></p><p>生成正交表示例：</p><p><img src="https://codestar.top/note-image/20250622224536653.png" alt="image-20250612231658033"></p></li></ul><h2 id="8、拓展：加权正交试验"><a href="#8、拓展：加权正交试验" class="headerlink" title="8、拓展：加权正交试验"></a>8、拓展：加权正交试验</h2><p>在进行正交试验时，有时部分因素的重要程度比较高，比如一个网页的兼容性，客户的主要群体假设是程序员，则依据市场占有率以及客户群体本身，chrome浏览器的占比就相对较高。则在网络应用的正交案例中，chrome这一项因素水平就可以将其权重提高，针对正交试验中的各因素水平进行加权，在进行因素组合时，根据不同权重决定组合中因素的优先采用：</p><p>通过PICT工具可以直接实现自定义因素水平的权重：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：Chrome权重定义为10，windows权重定义为7，1920×1080权重定义为2</span><br>浏览器：Chrome(10), Firefox, Edge, Safari, Opera<br>操作系统：Windows(7) , MacOS<br>分辨率：1920×1080(2), 1366× 768<br></code></pre></td></tr></table></figure><p> 其他所有的未指明的水平，权重都为1，在确定因素水平权重之后，直接进行正交表生成即可。</p><p>**注：**权重仅在不影响整体因素覆盖标准时，才会根据权重确定最终结果，且权重值必须为正整数。</p><p>更多详情参考：<a href="https://github.com/Microsoft/pict/blob/main/doc/pict.md">https://github.com/Microsoft/pict/blob/main/doc/pict.md</a></p><h2 id="9、附录"><a href="#9、附录" class="headerlink" title="9、附录"></a>9、附录</h2><h3 id="9-1-常用正交表查阅表"><a href="#9-1-常用正交表查阅表" class="headerlink" title="9.1 常用正交表查阅表"></a>9.1 常用正交表查阅表</h3><p>SSPSAU提供的10水平以下常用正交表查阅，包含标准正交表和混合水平正交表： <a href="https://pubimage.spssau.com/SPSSAU%E6%AD%A3%E4%BA%A4%E8%A1%A8%E6%89%8B%E5%86%8C2020%E7%89%88.xlsx">SPSSAU正交表手册2020版.xlsx</a> </p><p><img src="https://codestar.top/note-image/20250623231423947.png" alt="image-20250623161543768"></p><h3 id="9-2-取得正交表的常用方法"><a href="#9-2-取得正交表的常用方法" class="headerlink" title="9.2 取得正交表的常用方法"></a>9.2 取得正交表的常用方法</h3><table><thead><tr><th align="center">获取方法</th><th align="center">适用类型</th><th align="center">描述</th><th align="center">优势</th><th align="center">局限性</th><th align="center">推荐程度</th></tr></thead><tbody><tr><td align="center"><strong>专业正交表软件</strong></td><td align="center">标准&#x2F;混合</td><td align="center">使用SPSS Orthogonal Design、OrthArray、PICT等专门工具</td><td align="center">功能专注，针对性强</td><td align="center">可能需要专业知识，部分软件收费</td><td align="center">⭐⭐⭐⭐⭐</td></tr><tr><td align="center"><strong>统计软件生成</strong></td><td align="center">标准&#x2F;混合</td><td align="center">使用Minitab、SAS、JMP、Design Expert等统计软件自动生成</td><td align="center">操作简便，可视化强，支持分析</td><td align="center">部分软件收费，学习成本相对高一些</td><td align="center">⭐⭐⭐⭐⭐</td></tr><tr><td align="center"><strong>标准正交表手册</strong></td><td align="center">标准</td><td align="center">使用已发表的标准正交表集合，如$L_4(2^3)$、$L_8(2^7)$、$L_9(3^4)$等</td><td align="center">方便快捷，可靠性高</td><td align="center">仅限于常见规格的标准正交表</td><td align="center">⭐⭐⭐⭐</td></tr><tr><td align="center"><strong>在线正交表生成器</strong></td><td align="center">标准&#x2F;混合</td><td align="center">使用网站如STATEASE、正交设计助手等</td><td align="center">无需安装，随时可用</td><td align="center">功能可能受限，稳定性不确定</td><td align="center">⭐⭐⭐⭐</td></tr><tr><td align="center"><strong>编程自动生成</strong></td><td align="center">标准&#x2F;混合</td><td align="center">使用R、Python等编程语言实现算法生成</td><td align="center">高度自定义，可批量生成</td><td align="center">需编程能力，算法复杂</td><td align="center">⭐⭐⭐⭐</td></tr><tr><td align="center"><strong>泰格奇正交表集</strong></td><td align="center">标准&#x2F;混合</td><td align="center">使用田口玄一编制的正交表集合</td><td align="center">工业实践验证，配套分析方法</td><td align="center">特定领域针对性，选择有限</td><td align="center">⭐⭐⭐⭐</td></tr><tr><td align="center"><strong>交互作用设计法</strong></td><td align="center">标准&#x2F;混合</td><td align="center">考虑因素交互作用影响的设计方法</td><td align="center">可分析因素间相互作用</td><td align="center">设计复杂度增加，运行次数增多</td><td align="center">⭐⭐⭐⭐</td></tr><tr><td align="center"><strong>Excel模板工具</strong></td><td align="center">标准</td><td align="center">使用预设Excel模板选择和生成正交表</td><td align="center">广泛可用，易于操作</td><td align="center">功能有限，大规模设计不适用</td><td align="center">⭐⭐⭐⭐</td></tr><tr><td align="center"><strong>表格查询法</strong></td><td align="center">标准</td><td align="center">根据因素数和水平数，查询标准正交表目录</td><td align="center">简单直接，无需软件</td><td align="center">只适用于标准正交表</td><td align="center">⭐⭐⭐</td></tr><tr><td align="center"><strong>混合水平转换法</strong></td><td align="center">混合</td><td align="center">从标准正交表转换，如将3水平转为2水平</td><td align="center">利用已有正交表资源</td><td align="center">可能导致正交性下降</td><td align="center">⭐⭐⭐</td></tr><tr><td align="center"><strong>替换法</strong></td><td align="center">混合</td><td align="center">用多个低水平因素替换一个高水平因素</td><td align="center">操作相对简单</td><td align="center">需注意替换规则，保持正交性</td><td align="center">⭐⭐⭐</td></tr><tr><td align="center"><strong>缩减法</strong></td><td align="center">标准&#x2F;混合</td><td align="center">从大规模正交表删除列或合并行得到</td><td align="center">灵活性强</td><td align="center">需确保删减后仍保持正交性</td><td align="center">⭐⭐⭐</td></tr><tr><td align="center"><strong>基本正交表构造法</strong></td><td align="center">标准</td><td align="center">基于GF(q)伽罗华域或其他数学方法构造</td><td align="center">适用于特定结构正交表</td><td align="center">需要数学背景，复杂度高</td><td align="center">⭐⭐</td></tr><tr><td align="center"><strong>拼接法</strong></td><td align="center">混合</td><td align="center">将多个正交表按规则拼接成更大的正交表</td><td align="center">可构造大规模正交表</td><td align="center">技术要求高，易出错</td><td align="center">⭐⭐</td></tr><tr><td align="center"><strong>正交拉丁方阵变换</strong></td><td align="center">标准</td><td align="center">基于拉丁方阵变换构造正交表</td><td align="center">数学基础扎实</td><td align="center">仅适用于特定结构</td><td align="center">⭐⭐</td></tr></tbody></table><h2 id="10、参考"><a href="#10、参考" class="headerlink" title="10、参考"></a>10、参考</h2><p><a href="https://baike.baidu.com/item/%E6%AD%A3%E4%BA%A4%E8%A1%A8/948850">https://baike.baidu.com/item/%E6%AD%A3%E4%BA%A4%E8%A1%A8/948850</a></p><p><a href="https://spssau.com/helps/medicalmethod/orthogonal.html">https://spssau.com/helps/medicalmethod/orthogonal.html</a></p><p><a href="https://testerhome.com/articles/16837">https://testerhome.com/articles/16837</a></p>]]></content>
    
    
    <categories>
      
      <category>测试技术</category>
      
      <category>黑盒测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试设计方法</tag>
      
      <tag>黑盒测试</tag>
      
      <tag>正交试验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python程序封装为exe应用方法</title>
    <link href="/python/python-exe-packaging.html"/>
    <url>/python/python-exe-packaging.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h2><p>在我们执行python脚本的过程中，每次执行都需要在命令面板执行一段指令，如<code>python timecalc.py</code>。通过指令执行的方式，利于动态修改脚本检查效果，方便调试。当我们脚本的功能都已经实现完成后，那么在windows PC中，考虑将其封装为exe程序，之后每次运行，只需要双击应用即可，也无需执行命令。</p><h2 id="2、exe封装过程"><a href="#2、exe封装过程" class="headerlink" title="2、exe封装过程"></a>2、exe封装过程</h2><h3 id="2-1-原始应用"><a href="#2-1-原始应用" class="headerlink" title="2.1 原始应用"></a>2.1 原始应用</h3><p>基于时间计算器timecalc.py进行封装，基本功能，计算毫秒级别时间序列及时间戳的差值，界面如下，执行<code>python timecalc.py</code>运行脚本：</p><p><img src="https://codestar.top/note-image/202502072231259.png" alt="image-20250206143701436"></p><p><img src="https://codestar.top/note-image/202502072232330.png" alt="image-20250206142614691"></p><h3 id="2-2-Pyinstaller封装环境准备"><a href="#2-2-Pyinstaller封装环境准备" class="headerlink" title="2.2 Pyinstaller封装环境准备"></a>2.2 Pyinstaller封装环境准备</h3><p>Pyinstaller为封装python脚本的三方库，通过pip进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install pyinstaller<br></code></pre></td></tr></table></figure><p>如果在配置文件中修改过PIP镜像源为清华PIP镜像源，可能会出现403断联情况（实际为本机IP被pip清华源封禁，无此问题可忽略，正常下载即可）：</p><p><img src="https://codestar.top/note-image/202502072236192.png" alt="image-20250117105212582"></p><p>另外可使用<code>-i</code>参数在安装时指定官方镜像源下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">后接-i参数，指定镜像源</span><br>pip install pyinstaller -i https://pypi.python.org/simple<br></code></pre></td></tr></table></figure><p>安装成功如下，安装成功会出现Successfully关键字：</p><p><img src="https://codestar.top/note-image/202502072237456.png" alt="image-20250117105319506"></p><p>安装完成，可以直接在控制台执行<code>pyinstaller</code>验证安装，正常会返回以下说明内容：</p><p><img src="https://codestar.top/note-image/202502072237712.png" alt="image-20250117105804552"></p><h3 id="2-3-Pyinstaller封装py程序"><a href="#2-3-Pyinstaller封装py程序" class="headerlink" title="2.3 Pyinstaller封装py程序"></a>2.3 Pyinstaller封装py程序</h3><p>拷贝需要打包的python程序地址：选中python程序文件，shift+鼠标右键，点击复制文件地址</p><p><img src="https://codestar.top/note-image/202502072237723.png" alt="image-20250206143255550"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">后接python程序实际绝对路径</span><br>pyinstaller &quot;E:\浏览器下载文件\timecalc.py&quot;<br></code></pre></td></tr></table></figure><p>执行后即开始打包过程：</p><p><img src="https://codestar.top/note-image/202502072238960.png" alt="image-20250117110151311"></p><p>出现‘completed successfully’字段即打包完成：</p><p><img src="https://codestar.top/note-image/202502072239948.png" alt="image-20250117110127219"></p><p>按照此方法执行完成后会在同路径下生成<code>dict文件夹、build文件夹、timecalc.spec文件</code>：</p><p><img src="https://codestar.top/note-image/202502072239670.png" alt="image-20250206144234747"></p><p>最后只需要dist路径下的exe程序即可：</p><p><img src="https://codestar.top/note-image/202502072239722.png" alt="image-20250206144347407"></p><p>运行之后，效果是和执行脚本一样：</p><p><img src="https://codestar.top/note-image/202502072240751.png" alt="image-20250206144504946"></p><p><strong>注意：</strong> 此方法存在的缺点就是，exe应用执行时需要和<code>_internal</code>路径在一块，这个目录下存放的为依赖文件，分开存放的话，程序会执行失败。</p><h3 id="2-4-Pyinstaller无依赖封装py程序"><a href="#2-4-Pyinstaller无依赖封装py程序" class="headerlink" title="2.4 Pyinstaller无依赖封装py程序"></a>2.4 Pyinstaller无依赖封装py程序</h3><ul><li>使用<code>-F</code>参数，打包时不生成依赖文件：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">无依赖文件打包</span><br>pyinstaller -F .\timecalc.py<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202502072240550.png" alt="image-20250206145321037"></p><p>exe文件可以任意搬运，但每次执行，都会出现控制台运行框。</p><ul><li>使用<code>-w</code>参数，去除控制台：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">无依赖文件，无控制台</span><br>pyinstaller -F -w .\timecalc.py<br></code></pre></td></tr></table></figure><ul><li>使用<code>-i</code>参数，指定图标进行打包：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Pyinstaller -F -w -i dragon.ico .\timecalc.py<br></code></pre></td></tr></table></figure><p>使用这项图标进行打包：</p><p><img src="https://codestar.top/note-image/202502072242039.png" alt="image-20250117111705355"></p><p>windows下打包的图标需使用.ico文件，这个格式为windows原生支持的一项图标格式，在日常打开时不会出现兼容性问题，使用其他的png、jpg图片格式可能会出现图标显示异常等问题。</p><blockquote><p>jpg格式转ico格式工具：<a href="https://convertio.co/zh/jpg-ico/">https://convertio.co/zh/jpg-ico/</a></p></blockquote><p>完整的打包指令参考如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Pyinstaller -F -w -i &quot;E:\浏览器下载文件\dragon.ico&quot; &quot;E:\浏览器下载文件\timecalc_v1.2.py&quot;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202502072242071.png" alt="image-20250117111837697"></p><p>直接在dist目录下生成带图标的exe应用，且无依赖文件：</p><p><img src="https://codestar.top/note-image/202502072242662.png" alt="image-20250117112007467"></p><p>打包之后的程序输出，我们可以指定其输出位置，方便我们直接查找生成的应用：使用<code>--distpath</code>参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">输出exe到指定目录</span><br>Pyinstaller -F -w -i &quot;E:\dragon.ico&quot; --distpath &quot;E:\浏览器下载文件&quot; &quot;E:\浏览器下载文件\timecalc_v1.2.py&quot;<br></code></pre></td></tr></table></figure><h2 id="3、参数说明"><a href="#3、参数说明" class="headerlink" title="3、参数说明"></a>3、参数说明</h2><p>常用参数列表如下，方便查询：</p><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>-F</code> 或 <code>--onefile</code></td><td align="center">将所有文件打包成一个单独的可执行文件。</td></tr><tr><td align="center"><code>-D</code> 或 <code>--onedir</code></td><td align="center">将所有文件打包到一个目录中（默认选项）。</td></tr><tr><td align="center"><code>-n NAME</code> 或 <code>--name NAME</code></td><td align="center">指定生成的可执行文件或目录的名称。</td></tr><tr><td align="center"><code>--add-data &lt;SRC;DEST&gt;</code></td><td align="center">添加额外的文件或目录到打包中，格式为 <code>源路径;目标路径</code>。</td></tr><tr><td align="center"><code>--add-binary &lt;SRC;DEST&gt;</code></td><td align="center">添加额外的二进制文件到打包中，格式为 <code>源路径;目标路径</code>。</td></tr><tr><td align="center"><code>-p DIR</code> 或 <code>--paths DIR</code></td><td align="center">添加额外的 Python 模块搜索路径。</td></tr><tr><td align="center"><code>--hidden-import MODULE</code></td><td align="center">强制导入指定的隐藏模块。</td></tr><tr><td align="center"><code>--exclude-module MODULE</code></td><td align="center">排除指定的模块。</td></tr><tr><td align="center"><code>--clean</code></td><td align="center">清理临时文件和缓存。</td></tr><tr><td align="center"><code>--log-level LEVEL</code></td><td align="center">设置日志级别（如 <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, <code>CRITICAL</code>）。</td></tr><tr><td align="center"><code>--windowed</code> 或 <code>-w</code></td><td align="center">不显示命令行窗口（适用于 GUI 程序）。</td></tr><tr><td align="center"><code>--console</code> 或 <code>-c</code></td><td align="center">显示命令行窗口（默认选项）。</td></tr><tr><td align="center"><code>--icon FILE.ico</code></td><td align="center">设置生成的可执行文件的图标。</td></tr><tr><td align="center"><code>--version-file FILE.txt</code></td><td align="center">设置生成的可执行文件的版本信息文件。</td></tr><tr><td align="center"><code>--upx-dir DIR</code></td><td align="center">指定 UPX 压缩工具的路径。</td></tr><tr><td align="center"><code>--key KEY</code></td><td align="center">使用指定的密钥加密 Python 字节码。</td></tr><tr><td align="center"><code>--distpath DIR</code></td><td align="center">指定生成的可执行文件的输出目录。</td></tr><tr><td align="center"><code>--workpath DIR</code></td><td align="center">指定临时文件的目录。</td></tr><tr><td align="center"><code>--specpath DIR</code></td><td align="center">指定 <code>.spec</code> 文件的生成目录。</td></tr><tr><td align="center"><code>--noupx</code></td><td align="center">禁用 UPX 压缩。</td></tr><tr><td align="center"><code>--debug</code></td><td align="center">启用调试模式，生成调试信息。</td></tr><tr><td align="center"><code>--strip</code></td><td align="center">去除调试信息（减小文件大小）。</td></tr><tr><td align="center"><code>--runtime-tmpdir DIR</code></td><td align="center">指定运行时的临时文件目录。</td></tr><tr><td align="center"><code>--additional-hooks-dir DIR</code></td><td align="center">添加额外的钩子目录。</td></tr><tr><td align="center"><code>--runtime-hook FILE.py</code></td><td align="center">添加额外的运行时钩子文件。</td></tr><tr><td align="center"><code>--uac-admin</code></td><td align="center">启用 UAC 管理员权限（仅适用于 Windows）。</td></tr><tr><td align="center"><code>--uac-uiaccess</code></td><td align="center">启用 UAC UI 访问权限（仅适用于 Windows）。</td></tr></tbody></table><p>参考：<a href="https://blog.csdn.net/m0_63203517/article/details/124383678">https://blog.csdn.net/m0_63203517/article/details/124383678</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>EXE打包方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PIP镜像源配置详细记录</title>
    <link href="/python/pip-mirror-configuration.html"/>
    <url>/python/pip-mirror-configuration.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>在python国内的网络环境下，pip的镜像源默认为官方库：<a href="https://pypi.python.org/simple">https://pypi.python.org/simple</a>，但国内连接官方库网络延迟太高，很容易出现包下载中断导致安装失败，因此需要替换为国内的pip镜像源避免下载延迟过高导致的安装失败问题，也为了提升下载速度，提高安装效率。</p><h2 id="2、临时方法"><a href="#2、临时方法" class="headerlink" title="2、临时方法"></a>2、临时方法</h2><p>使用<code>-i</code>参数，在单次执行中指定镜像源下载，示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用指定的镜像源下载numpy库</span><br>pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple/<br></code></pre></td></tr></table></figure><h2 id="3、永久修改"><a href="#3、永久修改" class="headerlink" title="3、永久修改"></a>3、永久修改</h2><h3 id="3-1、windows设备"><a href="#3-1、windows设备" class="headerlink" title="3.1、windows设备"></a>3.1、windows设备</h3><p>进入AppData路径：文件管理器中输入<code>%APPDATA%</code></p><p><img src="https://codestar.top/note-image/202412151612128.png" alt="image-20231114095149935"></p><p>进入后默认会是：C:\Users\PC用户名\AppData\Roaming路径下：</p><p>新建下面的路径和文件：pip\pip.ini</p><p><img src="https://codestar.top/note-image/202412151612225.png" alt="image-20231114095403225"></p><p>填入下面的配置内容，我配置的是清华源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[global]<br>index-url = https://pypi.tuna.tsinghua.edu.cn/simple/<br>trusted-host = pypi.tuna.tsinghua.edu.cn<br>timeout = 6000<br></code></pre></td></tr></table></figure><p>安装一个库<code>pip install loguru</code>验证一下，之后就会默认从清华源查找库：</p><p><img src="https://codestar.top/note-image/202412151613346.png" alt="image-20231114095750763"></p><h3 id="3-2、linux设备"><a href="#3-2、linux设备" class="headerlink" title="3.2、linux设备"></a>3.2、linux设备</h3><p>修改pip配置文件（没有文件时会自动创建）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.pip/pip.conf<br></code></pre></td></tr></table></figure><p>填入以下内容，使用的是清华镜像源，配置内容与windows一致：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[global]<br>index-url = https://pypi.tuna.tsinghua.edu.cn/simple/<br>trusted-host = pypi.tuna.tsinghua.edu.cn<br>timeout = 6000<br></code></pre></td></tr></table></figure><p>或使用以下指令一键替换，与上述方法等价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple/<br>pip config set global.trusted-host pypi.tuna.tsinghua.edu.cn<br>pip config set global.timeout 500<br></code></pre></td></tr></table></figure><p><strong>注：</strong> 使用命令行修改，需要pip版本&gt;&#x3D;10.0.0才行，如果pip版本太低，需要执行<code>python -m pip install --upgrade pip</code>升级pip为最新版本后再操作。</p><h3 id="3-3、查看镜像源配置"><a href="#3-3、查看镜像源配置" class="headerlink" title="3.3、查看镜像源配置"></a>3.3、查看镜像源配置</h3><p>配置完成之后，可以使用以下指令查看设置的是否正确：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip config list<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202412151613276.png" alt="image-20241118144650579"></p><h2 id="4、Pycharm修改pip镜像源"><a href="#4、Pycharm修改pip镜像源" class="headerlink" title="4、Pycharm修改pip镜像源"></a>4、Pycharm修改pip镜像源</h2><ul><li>旧版Pycharm UI：</li></ul><p>ctrl + alt + s 进入设置，搜索interpret：</p><p><img src="https://codestar.top/note-image/202412151613669.png" alt="image-20241118151342862"></p><p>点击‘ + ’号进入包管理页面，之后点击‘Manage Repositories’进入到源管理界面，点击‘ + ’添加镜像源。</p><ul><li>新版Pycharm UI：</li></ul><p>新版本UI发生了变化，其包管理器移到了主界面：位于页面的左下侧，点击<img src="/./PIP%E9%95%9C%E5%83%8F%E6%BA%90%E9%85%8D%E7%BD%AE%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95.assets/image-20241118152213575.png">即可进入</p><p><img src="https://codestar.top/note-image/202412151614786.png" alt="image-20241118152157926"></p><p>包管理页面，点击右上角齿轮，选择管理仓库，进入源管理界面：</p><p><img src="https://codestar.top/note-image/202412151615942.png" alt="image-20241118152332199"></p><p>添加对应的镜像源，应用即可：</p><p><img src="https://codestar.top/note-image/202412151615733.png" alt="image-20241118152435209"></p><p>配置完成之后，在包管理页面会增加新配置的镜像源：</p><p><img src="https://codestar.top/note-image/202412151615663.png" alt="image-20241118153640656"></p><h2 id="5、镜像源列表"><a href="#5、镜像源列表" class="headerlink" title="5、镜像源列表"></a>5、镜像源列表</h2><table><thead><tr><th>镜像源</th><th>地址</th></tr></thead><tbody><tr><td>清华(每隔5分钟同步一次官方镜像)</td><td><a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></td></tr><tr><td>阿里云</td><td><a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></td></tr><tr><td>中国科技大学</td><td><a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></td></tr><tr><td>华中理工大学</td><td><a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></td></tr><tr><td>山东理工大学</td><td><a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a></td></tr><tr><td>豆瓣</td><td><a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></td></tr></tbody></table><p>参考：</p><p><a href="https://blog.csdn.net/weixin_41010198/article/details/94054194">https://blog.csdn.net/weixin_41010198/article/details/94054194</a></p><p><a href="https://blog.csdn.net/kantin_y/article/details/121087117">https://blog.csdn.net/kantin_y/article/details/121087117</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>PIP环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sonarqube DataCenter版本手动搭建完整流程</title>
    <link href="/testskill/sonarqube-datacenter-installation.html"/>
    <url>/testskill/sonarqube-datacenter-installation.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、Sonarqube介绍"><a href="#1、Sonarqube介绍" class="headerlink" title="1、Sonarqube介绍"></a>1、Sonarqube介绍</h2><p>Sonar (SonarQube)是一个开源平台，用于管理源代码的质量，Datacenter版本为最高版本。其支持C、C++、Java、kotlin、Scala、python、JavaScrip等几乎所有编程语言的代码质量管理与检测。支持将代码扫描集成到现有的工作流，以便在项目分支和拉取请求之间进行连续的代码检查。</p><p>sonarqube分为四个版本：社区版、开发版、企业版、数据中心版，各版本之间差异如下</p><p><img src="https://codestar.top/note-image/202410092324256.png" alt="image-20240413021201801"></p><p>官网：<a href="https://www.sonarsource.com/products/sonarqube/">https://www.sonarsource.com/products/sonarqube/</a></p><p>Sonar分为两部分：</p><ul><li>第一部分为服务端，为Sonarqube为代码指令管理平台</li><li>第二部分为客户端，为sonar-scanner扫描器</li></ul><p>由于是安装Data Center版本，不支持docker安装，后续操作基于<strong>本地安装包搭建完整的sonarqube服务平台过程做记录</strong>。</p><h2 id="2、环境配置要求"><a href="#2、环境配置要求" class="headerlink" title="2、环境配置要求"></a>2、环境配置要求</h2><p>官方配置要求：<a href="https://docs.sonarsource.com/sonarqube/latest/setup-and-upgrade/installation-requirements/server-host/">https://docs.sonarsource.com/sonarqube/latest/setup-and-upgrade/installation-requirements/server-host/</a></p><p>搭建环境配置参考：</p><table><thead><tr><th align="center">类型</th><th align="center">配置</th></tr></thead><tbody><tr><td align="center">OS系统</td><td align="center">Ubuntu 24.1 LTS</td></tr><tr><td align="center">RAM</td><td align="center">8G（要求&gt;&#x3D;4G）</td></tr><tr><td align="center">CPU</td><td align="center">2 cores（要求&gt;&#x3D;2 cores）</td></tr><tr><td align="center">硬盘</td><td align="center">20G（要求&gt;&#x3D;30G）</td></tr><tr><td align="center">JAVA</td><td align="center">version 17（要求至少为JAVA 11，不支持Java8）</td></tr><tr><td align="center">PostgreSQL</td><td align="center">version 16（要求&gt;&#x3D;11）</td></tr></tbody></table><p>其中硬盘自行决定，这里20GB仅作为短时间验证使用，存储空间按照官方要求来。Java配置过程参考：<a href="https://blog.csdn.net/weixin_62636014/article/details/137872596">https://blog.csdn.net/weixin_62636014/article/details/137872596</a></p><h2 id="3、搭建sonarqube流程"><a href="#3、搭建sonarqube流程" class="headerlink" title="3、搭建sonarqube流程"></a>3、搭建sonarqube流程</h2><h3 id="3-1、获取Sonarqube-Datacenter安装包"><a href="#3-1、获取Sonarqube-Datacenter安装包" class="headerlink" title="3.1、获取Sonarqube Datacenter安装包"></a>3.1、获取Sonarqube Datacenter安装包</h3><p>下载安装包：<a href="https://pan.baidu.com/s/1TnwrJvdts7rrSr3vPkHiaA">https://pan.baidu.com/s/1TnwrJvdts7rrSr3vPkHiaA</a> 提取码：9y4b</p><p>上传至Linux服务器路径，这里我上传到<code>/usr/local/etc/sonarqube</code>。</p><p>将压缩包进行解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unzip sonarqube-datacenter-10.4.0.87286.zip -d /usr/local/etc/sonarqube<br></code></pre></td></tr></table></figure><p>解压后如下：</p><p><img src="https://codestar.top/note-image/202410102225359.png" alt="image-20240919195926875"></p><p>后续所有的操作均基于此路径。</p><h3 id="3-2、创建非管理员用户"><a href="#3-2、创建非管理员用户" class="headerlink" title="3.2、创建非管理员用户"></a>3.2、创建非管理员用户</h3><p><strong>注意:</strong>  由于elastic search不支持root用户启动，需要创建单独的非root用户来启动sonar。</p><h4 id="1）创建用户sonar"><a href="#1）创建用户sonar" class="headerlink" title="1）创建用户sonar"></a>1）创建用户sonar</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新增用户sonar，根据提示完成密码配置</span><br>sudo adduser sonar<br></code></pre></td></tr></table></figure><p>修改账户密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo passwd sonar<br></code></pre></td></tr></table></figure><h4 id="2）将sonar用户添加sudo管理特权"><a href="#2）将sonar用户添加sudo管理特权" class="headerlink" title="2）将sonar用户添加sudo管理特权"></a>2）将sonar用户添加sudo管理特权</h4><p>执行<code>visudo</code>打开配置文件，添加sonar用户配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sonar   ALL=(ALL:ALL) ALL<br></code></pre></td></tr></table></figure><p>添加到下面<code>User privilege specification</code>位置：</p><p><img src="https://codestar.top/note-image/202410102225007.png" alt="image-20240919200350800"></p><p>添加完成后，键入<kbd>Ctrl</kbd>+<kbd>O</kbd>写入内容，出现弹窗时点击<kbd>enter</kbd>完成写入：</p><p><img src="https://codestar.top/note-image/202410102226928.png" alt="image-20240919200604937"></p><p><img src="https://codestar.top/note-image/202410102226870.png" alt="image-20240919200623177"></p><p>写入完成后键入<kbd>Ctrl</kbd>+<kbd>X</kbd>离开文本编辑页。</p><p>检查修改是否完成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/sudoers |grep &quot;sonar&quot;<br></code></pre></td></tr></table></figure><p>正常返回如下：</p><p><img src="https://codestar.top/note-image/202410102227257.png" alt="image-20240919200932493"></p><h4 id="3）切换到sonar用户"><a href="#3）切换到sonar用户" class="headerlink" title="3）切换到sonar用户"></a>3）切换到sonar用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su - sonar<br></code></pre></td></tr></table></figure><h3 id="3-3、启动sonarqube"><a href="#3-3、启动sonarqube" class="headerlink" title="3.3、启动sonarqube"></a>3.3、启动sonarqube</h3><p>使用sonar用户启动sonarqube：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sonar用户执行</span><br>sh /usr/local/etc/sonarqube/sonarqube-10.4.0.87286/bin/linux-x86-64/sonar.sh start<br>sh /usr/local/etc/sonarqube/sonarqube-10.4.0.87286/bin/linux-x86-64/sonar.sh start<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410102227583.png" alt="image-20240918102303902"></p><p><strong>注意：</strong>  当不小心以root用户启动sonarqube时，可删除路径.&#x2F;temp路径下的所有文件、SonarQube.pid、es.log、sonar.log文件再重新执行启动指令即可。原因为这些文件的权限归属到root非sonar用户。</p><p>运行日志查看路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/etc/sonarqube/sonarqube-10.4.0.87286/logs<br></code></pre></td></tr></table></figure><p>启动过程可查看sonar运行日志<code>tail -f /usr/local/etc/sonarqube/sonarqube-10.4.0.87286/logs/sonar.log</code>，出现下面两串关键字系统可正常操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">2024.09.18 16:48:22 INFO  app[][o.s.a.SchedulerImpl] Process[ce] is up<br>2024.09.18 16:48:22 INFO  app[][o.s.a.SchedulerImpl] SonarQube is operational<br></code></pre></td></tr></table></figure><p>进入sonarqube主页：<a href="http://localhost:9000/sessions/new?return_to=/">http://localhost:9000/sessions/new?return_to=%2F</a></p><p><img src="https://codestar.top/note-image/202410102305161.png" alt="image-20240914190131330"></p><p>默认账户和密码：admin&#x2F;admin，登录后更新密码即可进入到主页。</p><h2 id="4、配置PostgreSQL数据库"><a href="#4、配置PostgreSQL数据库" class="headerlink" title="4、配置PostgreSQL数据库"></a>4、配置PostgreSQL数据库</h2><p>**Tips：**这里默认已经安装完成PostgreSQL数据库的安装，具体详情可参考《Ubuntu手动安装及配置PostgreSQL》。</p><p>进入sonar配置文件修改数据库配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/etc/sonarqube/sonarqube-10.4.0.87286/conf/sonar.properties<br></code></pre></td></tr></table></figure><p>根据数据库类型，修改对应配置项：</p><p><img src="https://codestar.top/note-image/202410102305343.png" alt="image-20240918110431430"></p><p>这里我选择的是PostgreSQL，在本地已有PostgreSQL数据库后修改如下：</p><p><img src="https://codestar.top/note-image/202410102235695.png" alt="image-20240918160438523"></p><p>重启sonarqube服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh /usr/local/etc/sonarqube/sonarqube-10.4.0.87286/bin/linux-x86-64/sonar.sh restart<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：在配置PostgreSQL之前，需要确保能正常进行远程连接，否则elastic search会启动失败报错（143错误）。</p><h2 id="5、破解流程"><a href="#5、破解流程" class="headerlink" title="5、破解流程"></a>5、破解流程</h2><p><a href="https://dashenxian.github.io/static/posts/2023/2023-12-19-SonarQube%E7%A0%B4%E8%A7%A3-SonarQubeAgent-1.1-SNAPSHOT.jar">下载</a>破解agent jar包，或在3.1节中将百度云的jar包保存下来：</p><p><img src="https://codestar.top/note-image/202410102306275.png" alt="image-20240918144545988"></p><p>上传<code>SonarQubeAgent-1.2-SNAPSHOT.jar</code>到sonarqube安装目录，这里是<code>/usr/local/etc/sonarqube</code>。</p><p>修改配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /usr/local/etc/sonarqube/sonarqube-10.4.0.87286/conf/sonar.properties<br></code></pre></td></tr></table></figure><p>加入下面内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">注意：路径需替换为本地实际jar所在的位置</span><br>sonar.web.javaOpts=-javaagent:/usr/local/etc/sonarqube/SonarQubeAgent-1.2-SNAPSHOT.jar -Xmx1G -Xms128m -XX:+HeapDumpOnOutOfMemoryError<br>sonar.ce.javaOpts=-javaagent:/usr/local/etc/sonarqube/SonarQubeAgent-1.2-SNAPSHOT.jar -Xmx2G -Xms128m -XX:+HeapDumpOnOutOfMemoryError<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410102312639.png" alt="image-20240918145311394"></p><p>重启sonarqube服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh /usr/local/etc/sonarqube/sonarqube-10.4.0.87286/bin/linux-x86-64/sonar.sh restart<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410102312533.png" alt="image-20240918145407602"></p><p>登录后进入到许可证页面，添加授权：<a href="http://localhost:9000/admin/extension/license/app">http://localhost:9000/admin/extension/license/app</a></p><p><img src="https://codestar.top/note-image/202410102312457.png" alt="image-20240918153953792"></p><p>将授权码信息通过BASE64算法加密,之后将加密后的内容后填入license框中：<a href="https://tool.oschina.net/encrypt?type=3">https://tool.oschina.net/encrypt?type=3</a></p><ul><li>授权码信息,根据需要选择其中任意一个：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">datacenter版</span><br>Company=Unknown<br>Digest=NotRequired<br>Edition=Datacenter<br>EditionLabel=Datacenter<br>Expiration=2099-01-01<br>MaxLoc=9223372036854775806<br>Plugins=abap,cpp,plsql,security,sonarapex,swift,tsql,vbnet,cobol,pli,rpg,vb<br>Features=*<br>ServerId=*<br>Support=false<br>Type=ny0c<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Enterprice版</span><br>Company=Unknown<br>Digest=NotRequired<br>Edition=Enterprise<br>EditionLabel=Enterprise<br>Expiration=2099-01-01<br>MaxLoc=9223372036854775806<br>Plugins=abap,cpp,plsql,security,sonarapex,swift,tsql,vbnet,cobol,pli,rpg,vb<br>Features=*<br>ServerId=*<br>Support=false<br>Type=ny0c<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Develop</span><br>Company=Unknown<br>Digest=NotRequired<br>Edition=Developer<br>EditionLabel=Developer<br>Expiration=2099-01-01<br>MaxLoc=9223372036854775806<br>Plugins=abap,cpp,plsql,security,sonarapex,swift,tsql,vbnet,cobol,pli,rpg,vb<br>Features=*<br>ServerId=*<br>Support=false<br>Type=ny0c<br></code></pre></td></tr></table></figure><p>之后就可以正常的使用了：</p><p><img src="https://codestar.top/note-image/202410102321323.png" alt="image-20240918154130450"></p><h2 id="6、中文插件安装"><a href="#6、中文插件安装" class="headerlink" title="6、中文插件安装"></a>6、中文插件安装</h2><p>插件官方库：<a href="https://github.com/xuhuisheng/sonar-l10n-zh">https://github.com/xuhuisheng/sonar-l10n-zh</a></p><p>根据sonarqube下载对应的版本，我这里安装的为sonarqube10.4版本，插件也下载对应的版本：</p><p><img src="https://codestar.top/note-image/202410102319881.png" alt="image-20240918154314348"></p><p>进入release界面：</p><p><img src="https://codestar.top/note-image/202410102320131.png" alt="image-20240918154351545"></p><p>将下好的插件，放入到插件路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">/usr/local/etc/sonarqube为安装路径</span><br>/usr/local/etc/sonarqube/sonarqube-10.4.0.87286/extensions/plugins<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410102320143.png" alt="image-20240918154837656"></p><p>之后，重启sonarqube即可生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh /usr/local/etc/sonarqube/sonarqube-10.4.0.87286/bin/linux-x86-64/sonar.sh restart<br></code></pre></td></tr></table></figure><p>之后重新进入页面即可显示中文样式：</p><p><img src="https://codestar.top/note-image/202410102320907.png" alt="image-20240918155114443"></p><p>至此，大功告成~</p><p>参考：</p><p><a href="https://www.cnblogs.com/anliven/p/11986480.html">https://www.cnblogs.com/anliven/p/11986480.html</a></p><p><a href="https://www.813972.xyz/p/%E5%9C%A8rocky-linux-9%E4%B8%8A%E5%AE%89%E8%A3%85sonarqude/">https://www.813972.xyz/p/%E5%9C%A8rocky-linux-9%E4%B8%8A%E5%AE%89%E8%A3%85sonarqude/</a></p><p><a href="https://dashenxian.github.io/post/SonarQube%E7%A0%B4%E8%A7%A3">https://dashenxian.github.io/post/SonarQube%E7%A0%B4%E8%A7%A3</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>Sonarqube</category>
      
      <category>代码扫描</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>代码扫描</tag>
      
      <tag>Sonarqube</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu docker搭建sonarqube社区版</title>
    <link href="/linux/ubuntu-docker-setup-sonarqube.html"/>
    <url>/linux/ubuntu-docker-setup-sonarqube.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、sonarqube介绍"><a href="#1、sonarqube介绍" class="headerlink" title="1、sonarqube介绍"></a>1、sonarqube介绍</h2><p>Sonar (SonarQube)是一个开源平台，用于管理源代码的质量。支持Java、kotlin、Scala、python、JavaScrip等二十几种编程语言的代码质量管理与检测。支持将代码扫描集成到现有的工作流，以便在项目分支和拉取请求之间进行连续的代码检查。</p><p>sonarqube分为四个版本：社区版、开发版、企业版、数据中心版，各版本之间差异如下</p><p><img src="https://codestar.top/note-image/202410092324256.png" alt="image-20240413021201801"></p><p>官网：<a href="https://www.sonarsource.com/products/sonarqube/">https://www.sonarsource.com/products/sonarqube/</a></p><p>Sonar分为两部分：</p><ul><li>第一部分为服务端，为Sonarqube为代码指令管理平台</li><li>第二部分为客户端，为sonar-scanner扫描器</li></ul><p>后续操作将完整的docker搭建sonarqube服务平台过程做记录，并使用sonar-scanner进行手工代码扫描尝试。</p><h2 id="2、环境配置要求"><a href="#2、环境配置要求" class="headerlink" title="2、环境配置要求"></a>2、环境配置要求</h2><p>官方配置要求：<a href="https://docs.sonarsource.com/sonarqube/latest/setup-and-upgrade/installation-requirements/server-host/">https://docs.sonarsource.com/sonarqube/latest/setup-and-upgrade/installation-requirements/server-host/</a></p><p>搭建环境配置参考：</p><table><thead><tr><th align="center">类型</th><th align="center">配置</th></tr></thead><tbody><tr><td align="center">OS系统</td><td align="center">Ubuntu 24.1 LTS</td></tr><tr><td align="center">RAM</td><td align="center">8G（要求&gt;&#x3D;4G）</td></tr><tr><td align="center">CPU</td><td align="center">2 cores（要求&gt;&#x3D;2 cores）</td></tr><tr><td align="center">硬盘</td><td align="center">20G（要求&gt;&#x3D;30G）</td></tr><tr><td align="center">JAVA</td><td align="center">version 17（要求至少为JAVA 11，不支持Java8）</td></tr><tr><td align="center">PostgreSQL</td><td align="center">version 16（要求&gt;&#x3D;11）</td></tr></tbody></table><p>其中硬盘自行决定，这里20GB仅作为短时间验证使用，存储空间按照官方要求来。</p><h2 id="3、docker安装PostgreSQL"><a href="#3、docker安装PostgreSQL" class="headerlink" title="3、docker安装PostgreSQL"></a>3、docker安装PostgreSQL</h2><p>由于PostgreSQL在性能和兼容性方面优于MySQL，并且作为官方的推荐使用数据库，这里基于PostgreSQL来进行安装配置：</p><h3 id="3-1、拉取PostgreSQL镜像"><a href="#3-1、拉取PostgreSQL镜像" class="headerlink" title="3.1、拉取PostgreSQL镜像"></a>3.1、拉取PostgreSQL镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search postgres<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410092325119.png" alt="image-20240911134408955"></p><p>拉取上图中标红的官方镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull postgres<br><span class="hljs-meta prompt_"># </span><span class="language-bash">也可指定版本拉取</span><br>docker pull postgres:11.5<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410092325636.png" alt="image-20240911134636344"></p><p>完成后如下：</p><p><img src="https://codestar.top/note-image/202410092325801.png" alt="image-20240911134752386"></p><p>查看拉取的镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker images<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410092325457.png" alt="image-20240911135012288"></p><h3 id="3-2、创建PostgreSQL容器"><a href="#3-2、创建PostgreSQL容器" class="headerlink" title="3.2、创建PostgreSQL容器"></a>3.2、创建PostgreSQL容器</h3><p>创建镜像实例（容器）：</p><ul><li><your-postgres-container-name>：容器名称。自定义</li><li><your-postgres-user>：账户名</li><li><your-postgres-password>：账户密码</li><li><your-postgres-database>：数据库名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker run --name &lt;your-postgres-container-name&gt; -e POSTGRES_USER=&lt;your-postgres-user&gt; -e POSTGRES_PASSWORD=&lt;your-postgres-password&gt; -e POSTGRES_DB=&lt;your-postgres-database&gt; -p 5432:5432 -d postgres</span><br>docker run --name postgresql \<br>--restart=always \<br>-e POSTGRES_USER=admin \<br>-e POSTGRES_PASSWORD=123456! \<br>-e POSTGRES_DB=sonarqube_db \<br>-p 5432:5432 \<br>-v /opt/postgres:/var/lib/postgresql/data \<br>-e ALLOW_IP_RANGE=0.0.0.0/0 \<br>-d postgres<br></code></pre></td></tr></table></figure><p>其中<code>-p</code>后接映射端口，此实例下，将容器PostgreSQL默认端口映射到主机的5432端口上。ALLOW_IP_RANGE&#x3D;0.0.0.0&#x2F;0 允许任何主机访问，-v &#x2F;opt&#x2F;postgres:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data，做数据持久化，此目录需确保存在。</p><p>执行后，<code>docker ps</code>查看运行的容器：</p><p><img src="https://codestar.top/note-image/202410092325518.png" alt="image-20240911150909155"></p><p><img src="https://codestar.top/note-image/202410092326174.png" alt="image-20240911150948080"></p><p>使用前面的账户名，连接到postgresql容器指定的数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -it &lt;your-postgres-container-name&gt; psql -U &lt;your-postgres-user&gt; -d &lt;your-postgres-database&gt;</span><br>docker exec -it postgresql psql -U admin -d sonarqube_db<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或进入容器控制台后执行psql -U admin -d sonarqube_db</span><br>docker exec -it 143aa13dd734 /bin/bash<br></code></pre></td></tr></table></figure><p>psql为postgres控制指令。也可使用其他工具如navicat、datagrip等客户端连接到对应的数据库。</p><p>效果如下：</p><p><img src="https://codestar.top/note-image/202410092326282.png" alt="image-20240911140954521"></p><p><code>\l</code>查看所有的数据库：</p><p><img src="https://codestar.top/note-image/202410092326179.png" alt="image-20240911141428224"></p><p><code>\q</code>退出postgre命令行。</p><h2 id="4、使用docker安装sonarqube"><a href="#4、使用docker安装sonarqube" class="headerlink" title="4、使用docker安装sonarqube"></a>4、使用docker安装sonarqube</h2><h3 id="4-1、拉取sonarqube镜像"><a href="#4-1、拉取sonarqube镜像" class="headerlink" title="4.1、拉取sonarqube镜像"></a>4.1、拉取sonarqube镜像</h3><p>Docker Hub库：<a href="https://hub.docker.com/_/sonarqube/tags">https://hub.docker.com/_/sonarqube/tags</a></p><p>根据需要选择对应版本，我这里选择社区版本，拷贝后面的拉取镜像指令：</p><p><img src="https://codestar.top/note-image/202410092326229.png" alt="image-20240911111344715"></p><p>在Ubuntu执行，拉取sonarqube社区版镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull sonarqube:9.9-community<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410092327343.png" alt="image-20240911112050508"></p><p>拉取完成如下：</p><p><img src="https://codestar.top/note-image/202410092327323.png" alt="image-20240911112314331"></p><p>使用<code>docker images</code>查看本地的镜像，可以看到已经有对应镜像：</p><p><img src="https://codestar.top/note-image/202410092344436.png" alt="image-20240911112618908"></p><h3 id="4-2、创建sonarqube容器实例"><a href="#4-2、创建sonarqube容器实例" class="headerlink" title="4.2、创建sonarqube容器实例"></a>4.2、创建sonarqube容器实例</h3><h4 id="1）创建默认数据库实例"><a href="#1）创建默认数据库实例" class="headerlink" title="1）创建默认数据库实例"></a>1）创建默认数据库实例</h4><p>我们来根据镜像创建并运行实例，当不指定数据库创建时，默认为H2嵌入式数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker run --name 容器名(可任意) -d -p 内部端口:外部端口 镜像名</span><br>docker run --name sonarqube -p 9000:9000 -d sonarqube:9.9-community<br></code></pre></td></tr></table></figure><p>运行成功：</p><p><img src="https://codestar.top/note-image/202410092342800.png" alt="image-20240911112904627"></p><p>之后根据创建时的端口，在Linux设备中浏览器访问对应的地址：<a href="http://localhost:9000/">http://localhost:9000/</a> ，初始管理员用户和密码为：<code>admin/admin</code></p><p><img src="https://codestar.top/note-image/202410092344204.png" alt="image-20240911113325377"></p><p>登录之后会要求更新密码：</p><p><img src="https://codestar.top/note-image/202410102120672.png" alt="image-20240911113422454"></p><p>登录之后页面如下：</p><p><img src="https://codestar.top/note-image/202410102120835.png" alt="image-20240911113605657"></p><p>默认的H2嵌入式数据库有下面几个缺点：</p><ul><li>内嵌数据库<strong>只能用于测试场景</strong>。</li><li>内嵌数据库无法扩展。</li><li>无法升级到新版本的SonarQube。</li><li>不支持将数据迁移至其他数据库引擎。</li></ul><p>基于这些点，也参考官方推荐，使用postgresql数据库是较好的一种方式。下面来说明如何指定PostgreSQL创建sonarqube创建容器实例。</p><h4 id="2）创建指定PostgreSQL数据库实例-推荐"><a href="#2）创建指定PostgreSQL数据库实例-推荐" class="headerlink" title="2）创建指定PostgreSQL数据库实例-推荐"></a>2）创建指定PostgreSQL数据库实例-推荐</h4><p>提前在Linux设备创建下面几个目录，做相关的数据存放：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /opt/sonarqube/data /opt/sonarqube/extensions /opt/sonarqube/logs /opt/sonarqube/conf<br></code></pre></td></tr></table></figure><p>之后，创建PostgreSQL数据库容器实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name sonarqube \<br>--restart=always \<br>    -e SONAR_JDBC_URL=jdbc:postgresql://192.168.135.128:5432/sonarqube_db \<br>    -e SONAR_JDBC_USERNAME=admin \<br>    -e SONAR_JDBC_PASSWORD=123456! \<br>    -p 9000:9000 \<br>    -v sonarqube_data:/opt/sonarqube/data \<br>    -v sonarqube_extensions:/opt/sonarqube/extensions \<br>    -v sonarqube_logs:/opt/sonarqube/logs \<br>    -v sonarqube_conf:/opt/sonarqube/conf \<br>    -d sonarqube:9.9-community<br></code></pre></td></tr></table></figure><p>通过下面这些参数，将指定Postgresql数据库启动，IP替换为postgresql所在的主机地址，sonarqube_db对应为<a href="##3%E3%80%81docker%E5%AE%89%E8%A3%85PostgreSQL">第三节：3、docker安装PostgreSQL</a>创建的数据库名称：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">注意IP、数据库、用户名、密码不要出现错误！与第三节配置保持一致</span><br>-e SONAR_JDBC_URL=jdbc:postgresql://192.168.135.128:5432/sonarqube_db \<br>    -e SONAR_JDBC_USERNAME=admin \<br>    -e SONAR_JDBC_PASSWORD=123456! \<br></code></pre></td></tr></table></figure><p>下面路径分别做数据存放：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">存储 SonarQube 的数据文件：如索引、分析结果、快照等</span><br>-v sonarqube_data:/opt/sonarqube/data \<br><span class="hljs-meta prompt_"># </span><span class="language-bash">用于存放 SonarQube 的扩展和插件</span><br>    -v sonarqube_extensions:/opt/sonarqube/extensions \<br><span class="hljs-meta prompt_"># </span><span class="language-bash">存储 SonarQube 的日志文件</span><br>    -v sonarqube_logs:/opt/sonarqube/logs \<br><span class="hljs-meta prompt_"># </span><span class="language-bash">存放 SonarQube 的配置文件</span><br>    -v sonarqube_conf:/opt/sonarqube/conf \<br></code></pre></td></tr></table></figure><p>创建完成后，<code>docker ps -a</code>查看对应的容器状态：</p><p><img src="https://codestar.top/note-image/202410102206581.png" alt="image-20240911155852444"></p><p><img src="https://codestar.top/note-image/202410102123641.png" alt="image-20240911155917518"></p><p>在Linux设备浏览器中访问sonarqube服务对应的地址：<a href="http://localhost:9000/">http://localhost:9000/</a> ，默认管理员用户及密码：admin&#x2F;admin，与上一节相同，更新密码后进入到主界面：</p><p><img src="https://codestar.top/note-image/202410102123961.png" alt="image-20240911160234108"></p><p>**注：**切换到postgresql首次启动，初始化时间相对会长一些。</p><p>若出现问题，可以通过<code>docker logs -f sonarqube</code>查看对应的日志信息检查错误点，修正后重启容器。sonarqube为容器名称。</p><h2 id="5、插件安装"><a href="#5、插件安装" class="headerlink" title="5、插件安装"></a>5、插件安装</h2><h3 id="5-1、中文汉化插件安装"><a href="#5-1、中文汉化插件安装" class="headerlink" title="5.1、中文汉化插件安装"></a>5.1、中文汉化插件安装</h3><p>进入到插件商城，搜索插件<code>chinese</code>，按下面操作进入到插件主页进行下载：</p><p><img src="https://codestar.top/note-image/202410102124358.png" alt="image-20240911160719504"></p><p>跳转后到如下仓库，进入发布页面：</p><p><img src="https://codestar.top/note-image/202410102128127.png" alt="image-20240911161651943"></p><p>选择指定版本，点击下载jar包：</p><p><img src="https://codestar.top/note-image/202410102128323.png" alt="image-20240911161510076"></p><p><strong>注：</strong> 下载的插件版本需要与实际sonarqube版本一致，兼容性表参考：</p><p><img src="https://codestar.top/note-image/202410102129292.png" alt="image-20240911161557274"></p><p>将下好的插件放置到以下路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/var/lib/docker/volumes/sonarqube_extensions/_data/plugins<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410102131589.png" alt="image-20240911163931822"></p><p>此路径，通过<code>docker inspect 772c017e3e4e</code>检查mounts可查看到，772c017e3e4e为容器ID：</p><p><img src="https://codestar.top/note-image/202410102131611.png" alt="image-20240911163601260"></p><p>放置好插件之后，执行<code>docker restart 772c017e3e4e</code>重启sonarqube容器生效，772c017e3e4e为容器ID。</p><p><img src="https://codestar.top/note-image/202410102132525.png" alt="image-20240911164136503"></p><p>之后再进入sonarqube首页，可以看到切换为了中文界面。</p><p><img src="https://codestar.top/note-image/202410102132857.png" alt="image-20240911164251850"></p><h3 id="5-2、PDF分析报告导出插件"><a href="#5-2、PDF分析报告导出插件" class="headerlink" title="5.2、PDF分析报告导出插件"></a>5.2、PDF分析报告导出插件</h3><p>PDF报告导出的功能，<strong>官方需要升级到企业版才支持</strong>，社区版可通过插件来拓展能力。</p><h4 id="1）方案1：pdf-plugin插件"><a href="#1）方案1：pdf-plugin插件" class="headerlink" title="1）方案1：pdf-plugin插件"></a>1）方案1：pdf-plugin插件</h4><p>插件仓库：<a href="https://gitee.com/zzulj/sonar-pdf-plugin/releases">https://gitee.com/zzulj/sonar-pdf-plugin/releases</a></p><p>下载9.x版本：</p><p><img src="https://codestar.top/note-image/202410102132759.png" alt="image-20240912111823791"></p><p>放置到插件路径：</p><p><img src="https://codestar.top/note-image/202410102133010.png" alt="image-20240912112857575"></p><p>重启sonarqube容器：</p><p><img src="https://codestar.top/note-image/202410102133173.png" alt="image-20240912113059245"></p><p>重启后进入sonarqube首页，配置PDF下载的账户：填写账户名及密码</p><p><img src="https://codestar.top/note-image/202410102133284.png" alt="image-20240912113330294"></p><p>之后在‘项目’-&gt;‘更多’中，可以看到有下载PDF的按钮，点击直接下载即可：</p><p><img src="https://codestar.top/note-image/202410102133213.png" alt="image-20240912113515997"></p><p><strong>需要注意的是，在安装完这个插件之后，首次使用需要进行1次新的扫描，否则无法下载PDF。</strong></p><p>此插件，目前实测使用存在问题，sonarqube 9.9 LTS版本在执行完1次扫描后，依旧无法下载，实际使用的话需要考虑一下。</p><h4 id="2）方案2：bitegarden-Report-Plugin"><a href="#2）方案2：bitegarden-Report-Plugin" class="headerlink" title="2）方案2：bitegarden Report Plugin"></a>2）方案2：bitegarden Report Plugin</h4><p>其他生成报告插件，付费插件，此插件有14天试用期：<a href="https://www.bitegarden.com/sonarqube-report-documentation">https://www.bitegarden.com/sonarqube-report-documentation</a></p><p>填写相关申请信息下载插件使用，信息内容自定义，无校验：</p><p><img src="https://codestar.top/note-image/202410102134450.png" alt="image-20240919163118559"></p><p>插件下载完成放到sonarqube插件路径，重启sonarqube容器生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">插件路径</span><br>/var/lib/docker/volumes/sonarqube_extensions/_data/plugins<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410102135078.png" alt="image-20240919163906210"></p><h3 id="5-3、配置PMD、findbugs、checkstyle规则插件"><a href="#5-3、配置PMD、findbugs、checkstyle规则插件" class="headerlink" title="5.3、配置PMD、findbugs、checkstyle规则插件"></a>5.3、配置PMD、findbugs、checkstyle规则插件</h3><ul><li><p>PMD插件：<a href="https://github.com/jborgers/sonar-pmd">https://github.com/jborgers/sonar-pmd</a></p></li><li><p>findbugs插件：<a href="https://github.com/spotbugs/sonar-findbugs">https://github.com/spotbugs/sonar-findbugs</a></p></li><li><p>checkstyle插件：<a href="https://github.com/checkstyle/sonar-checkstyle">https://github.com/checkstyle/sonar-checkstyle</a></p></li></ul><p><img src="https://codestar.top/note-image/202410102135762.png" alt="image-20240919164857955"></p><p>根据<a href="https://docs.sonarsource.com/sonarqube/9.9/instance-administration/plugin-version-matrix/">官方插件适配矩阵</a>，选择对应版本集成相应的规则插件。下载jar包放入插件路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/var/lib/docker/volumes/sonarqube_extensions/_data/plugins<br></code></pre></td></tr></table></figure><p>重启sonarqube容器生效。</p><h3 id="5-4、C语言扫描插件"><a href="#5-4、C语言扫描插件" class="headerlink" title="5.4、C语言扫描插件"></a>5.4、C语言扫描插件</h3><p>插件仓库：<a href="https://github.com/SonarOpenCommunity/sonar-cxx">https://github.com/SonarOpenCommunity/sonar-cxx</a></p><p>根据适配矩阵下载插件版本，放入插件路径。重启sonarqube容器使插件生效。</p><p>配置C&#x2F;c++扫描规则：</p><ul><li>1、创建质量配置：质量配置-&gt;创建-&gt;创建空质量配置-&gt;语言选择cxx-&gt;名称自定义</li></ul><p><img src="https://codestar.top/note-image/202410102141137.png" alt="image-20240919171118223"></p><ul><li>2、进入质量配置-&gt;打开创建的<code>cpp_extra_rule</code>配置-&gt;右上角齿轮-&gt;激活更多规则</li></ul><p><img src="https://codestar.top/note-image/202410102141784.png" alt="image-20240919171358690"></p><ul><li>3、进入到代码规则页面：批量修改-&gt;激活-&gt;选择<code>cpp_extra_rule</code>配置-&gt;应用</li></ul><p><img src="https://codestar.top/note-image/202410102142027.png" alt="image-20240919181041344"></p><ul><li><p>4、切换默认规则：进入质量配置-&gt;cxx配置-&gt;<code>cpp_extra_rule</code>右侧齿轮打开菜单-&gt;选择<code>设为默认</code></p></li><li><p>5、项目配置：进入项目页面-&gt;打开项目配置-&gt;选择<code>质量配置</code></p></li></ul><p><img src="https://codestar.top/note-image/202410102142674.png" alt="image-20240914175949631"></p><ul><li>6、配置项目语言及文件后缀：</li></ul><p>添加新语言：选择CXX-&gt;选择<code>cpp_extra_rule</code>配置</p><p><img src="https://codestar.top/note-image/202410102154417.png" alt="image-20240919181821869"></p><p>进入CXX配置页-&gt;修改File suffixes文件后缀-&gt;添加下面的后缀(.cxx&#x2F;,cpp&#x2F;.cc&#x2F;.c)</p><p><img src="https://codestar.top/note-image/202410102154256.png" alt="image-20240914175911833"></p><p>至此，可正常在此项目下进行c语言项目扫描了：</p><h2 id="6、手动代码分析"><a href="#6、手动代码分析" class="headerlink" title="6、手动代码分析"></a>6、手动代码分析</h2><p>在配置完sonarqube后，进入到主页，我们点击‘手工’尝试一下手动代码扫描：填入显示名、项目标识，点击设置进入下一步</p><p><img src="https://codestar.top/note-image/202410102154411.png" alt="image-20240911170717465"></p><p>由于暂时还未集成其他系统，这里选择其他CI：</p><p><img src="https://codestar.top/note-image/202410102155817.png" alt="image-20240911171103276"></p><p>进入令牌创建页，点击创建：</p><p><img src="https://codestar.top/note-image/202410102155888.png" alt="image-20240911171249226"></p><p>保存令牌并点击继续：创建的令牌可在期限内应用到多项目的扫描中</p><p><img src="https://codestar.top/note-image/202410102156342.png" alt="image-20240911171338640"></p><p>接着根据项目情况选择类型：</p><p><img src="https://codestar.top/note-image/202410102156026.png" alt="image-20240911171559717"></p><p>根据下面的步骤进行操作：</p><p><img src="https://codestar.top/note-image/202410102157967.png" alt="image-20240911171809485"></p><ul><li>1、拷贝第一步中的指令，在windows poershell中执行，下载windows平台的扫描器</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$env:SONAR_SCANNER_VERSION</span> = <span class="hljs-string">&quot;4.7.0.2747&quot;</span><br><span class="hljs-variable">$env:SONAR_DIRECTORY</span> = [<span class="hljs-type">System.IO.Path</span>]::Combine(<span class="hljs-variable">$</span>(<span class="hljs-built_in">get-location</span>).Path,<span class="hljs-string">&quot;.sonar&quot;</span>)<br><span class="hljs-variable">$env:SONAR_SCANNER_HOME</span> = <span class="hljs-string">&quot;<span class="hljs-variable">$env:SONAR_DIRECTORY</span>/sonar-scanner-<span class="hljs-variable">$env:SONAR_SCANNER_VERSION</span>-windows&quot;</span><br><span class="hljs-built_in">rm</span> <span class="hljs-variable">$env:SONAR_SCANNER_HOME</span> <span class="hljs-literal">-Force</span> <span class="hljs-literal">-Recurse</span> <span class="hljs-literal">-ErrorAction</span> SilentlyContinue<br><span class="hljs-built_in">New-Item</span> <span class="hljs-literal">-path</span> <span class="hljs-variable">$env:SONAR_SCANNER_HOME</span> <span class="hljs-literal">-type</span> directory<br>(<span class="hljs-built_in">New-Object</span> System.Net.WebClient).DownloadFile(<span class="hljs-string">&quot;https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-<span class="hljs-variable">$env:SONAR_SCANNER_VERSION</span>-windows.zip&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-variable">$env:SONAR_DIRECTORY</span>/sonar-scanner.zip&quot;</span>)<br><span class="hljs-built_in">Add-Type</span> <span class="hljs-literal">-AssemblyName</span> System.IO.Compression.FileSystem<br>[<span class="hljs-type">System.IO.Compression.ZipFile</span>]::ExtractToDirectory(<span class="hljs-string">&quot;<span class="hljs-variable">$env:SONAR_DIRECTORY</span>/sonar-scanner.zip&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-variable">$env:SONAR_DIRECTORY</span>&quot;</span>)<br><span class="hljs-built_in">rm</span> ./.sonar/sonar<span class="hljs-literal">-scanner</span>.zip <span class="hljs-literal">-Force</span> <span class="hljs-literal">-ErrorAction</span> SilentlyContinue<br><span class="hljs-variable">$env:Path</span> += <span class="hljs-string">&quot;;<span class="hljs-variable">$env:SONAR_SCANNER_HOME</span>/bin&quot;</span><br><span class="hljs-variable">$env:SONAR_SCANNER_OPTS</span>=<span class="hljs-string">&quot;-server&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410102204059.png" alt="image-20240911173131811"></p><ul><li>2、添加环境变量</li></ul><p>系统环境变量中创建<code>SONAR_TOKEN</code>，对应值为令牌内容：</p><p><img src="https://codestar.top/note-image/202410102201093.png" alt="image-20240911173327868"></p><ul><li>3、在项目目录下执行扫描器，触发扫描：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sonar-scanner.bat -D&quot;sonar.projectKey=sonarqube-test-code&quot; -D&quot;sonar.sources=.&quot; -D&quot;sonar.host.url=http://192.168.135.128:9000&quot;<br></code></pre></td></tr></table></figure><p>进入到项目目录，执行上述扫描指令：</p><p><img src="https://codestar.top/note-image/202410102201604.png" alt="image-20240911175203318"></p><p>执行完成之后，会出现<code>EXECUTION SUCCESS</code>关键字，sonarqube页面会自动刷新结果：</p><p><img src="https://codestar.top/note-image/202410102202404.png" alt="image-20240911175107785"></p><p><img src="https://codestar.top/note-image/202410102202479.png" alt="image-20240911175747525"></p><p><img src="https://codestar.top/note-image/202410102203457.png" alt="image-20240911175832610"></p><p>点击对应项可查看详情：</p><p><img src="https://codestar.top/note-image/202410102203312.png" alt="image-20240912111732661"></p><p>参考：</p><p><a href="https://www.pkslow.com/docs/zh/docker-sonarqube/#_2-1-%E5%AE%89%E8%A3%85">https://www.pkslow.com/docs/zh/docker-sonarqube/#_2-1-%E5%AE%89%E8%A3%85</a></p><p><a href="https://blog.csdn.net/qq_44281591/article/details/132252039">https://blog.csdn.net/qq_44281591/article/details/132252039</a></p><p><a href="https://www.cnblogs.com/lixie0215/p/15341843.html">https://www.cnblogs.com/lixie0215/p/15341843.html</a></p><p><a href="https://juejin.cn/post/7021019542130262024">https://juejin.cn/post/7021019542130262024</a></p><p><a href="https://blog.advance.ai/zh-cn/sonar-qube-topic-0">https://blog.advance.ai/zh-cn/sonar-qube-topic-0</a></p><p><a href="https://juejin.cn/post/7265614572119490595">https://juejin.cn/post/7265614572119490595</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>Docker</category>
      
      <category>SonarQube</category>
      
      <category>代码扫描</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Docker</tag>
      
      <tag>SonarQube</tag>
      
      <tag>代码扫描</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装及配置PostgreSQL</title>
    <link href="/linux/install-docker-postgresql.html"/>
    <url>/linux/install-docker-postgresql.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、前置条件"><a href="#1、前置条件" class="headerlink" title="1、前置条件"></a>1、前置条件</h2><p>设备已安装docker：<code>docker version</code>检查版本。安装过程参考《Ubuntu安装docker环境及docker常用指令》</p><h2 id="2、docker安装PostgreSQL"><a href="#2、docker安装PostgreSQL" class="headerlink" title="2、docker安装PostgreSQL"></a>2、docker安装PostgreSQL</h2><h3 id="2-1、拉取PostgreSQL镜像"><a href="#2-1、拉取PostgreSQL镜像" class="headerlink" title="2.1、拉取PostgreSQL镜像"></a>2.1、拉取PostgreSQL镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search postgres<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082254477.png" alt="image-20240911134408955"></p><p>拉取上图中标红的官方镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull postgres<br><span class="hljs-meta prompt_"># </span><span class="language-bash">也可指定版本拉取</span><br>docker pull postgres:11.5<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082258728.png" alt="image-20240911134636344"></p><p>完成后如下：</p><p><img src="https://codestar.top/note-image/202410082307788.png" alt="image-20240911134752386"></p><p>查看拉取的镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker images<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082308940.png" alt="image-20240911135012288"></p><h3 id="2-2、创建PostgreSQL容器"><a href="#2-2、创建PostgreSQL容器" class="headerlink" title="2.2、创建PostgreSQL容器"></a>2.2、创建PostgreSQL容器</h3><p>创建镜像实例（容器）并运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建容器名称为postgresql、账户admin、密码为123456!、新建数据库sonarqube_db的postgres镜像实例</span><br>docker run --name postgresql \<br>--restart=always \<br>-e POSTGRES_USER=admin \<br>-e POSTGRES_PASSWORD=123456! \<br>-e POSTGRES_DB=sonarqube_db \<br>-p 5432:5432 \<br>-v /opt/postgres:/var/lib/postgresql/data \<br>-e ALLOW_IP_RANGE=0.0.0.0/0 \<br>-d postgres<br></code></pre></td></tr></table></figure><p>其中<code>-p</code>后接映射端口，此实例下，将容器PostgreSQL默认端口映射到主机的5432端口上。ALLOW_IP_RANGE&#x3D;0.0.0.0&#x2F;0 允许任何主机访问，-v &#x2F;opt&#x2F;postgres:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data，做数据持久化，此目录需确保存在。</p><p>执行后，<code>docker ps</code>检查容器状态，创建的容器已运行：</p><p><img src="https://codestar.top/note-image/202410082309447.png" alt="image-20240911140016953"></p><p>使用前面的账户名，连接到postgresql容器指定的数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">运行postgresql容器并使用admin连接到sonarqube_db数据库</span><br>docker exec -it postgresql psql -U admin -d sonarqube_db<br></code></pre></td></tr></table></figure><p>psql为postgres控制指令。也可使用其他工具如navicat、datagrip等客户端连接到对应的数据库。</p><p>效果如下：</p><p><img src="https://codestar.top/note-image/202410082309510.png" alt="image-20240911140954521"></p><p><code>\l</code>列出所有的数据库：</p><p><img src="https://codestar.top/note-image/202410082309338.png" alt="image-20240911141428224"></p><p><code>\q</code>退出postgre命令行。</p><h2 id="3-使用客户端连接"><a href="#3-使用客户端连接" class="headerlink" title="3.使用客户端连接"></a>3.使用客户端连接</h2><p>这里以Datagrip连接示例：新建-&gt;数据源-&gt;PostgreSQL</p><p><img src="https://codestar.top/note-image/202410082318748.png" alt="image-20240919140039580"></p><p>进入配置页面，填写postgresql服务地址，就是装有postgresql的那台设备的IP，以及账户密码（前面创建镜像实例时配置的账户及密码）：</p><p><img src="https://codestar.top/note-image/202410082318970.png" alt="image-20240919140544369"></p><p>点击测试连接，一般docker环境按上述配置完后，连接时正常的：</p><p><img src="https://codestar.top/note-image/202410082319014.png" alt="image-20240919140745432"></p><p>测试正常后，直接应用即可。</p><p>参考：</p><p><a href="https://blog.csdn.net/hmx224_2014/article/details/136060525">https://blog.csdn.net/hmx224_2014/article/details/136060525</a></p><p><a href="https://moltke.cn/detail/163">https://moltke.cn/detail/163</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>PostgreSQL</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>PostgreSQL</tag>
      
      <tag>数据库</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu安装docker环境及docker常用指令</title>
    <link href="/linux/ubuntu-install-docker.html"/>
    <url>/linux/ubuntu-install-docker.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、docker安装"><a href="#1、docker安装" class="headerlink" title="1、docker安装"></a>1、docker安装</h2><p>在Ubuntu中，docker这个名称已被用作Dockerlet应用，不能直接使用<code>apt install docker</code>进行安装，实际docker容器应用被命名为<strong>docker.io</strong>，使用下面的指令来进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install docker.io docker-compose<br></code></pre></td></tr></table></figure><p>等待包下载及安装：</p><p><img src="https://codestar.top/note-image/202410082321928.png" alt="image-20240911110015239"></p><p>安装完成后，检查安装版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker -v<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082321573.png" alt="image-20240911110214122"></p><h2 id="2、docker验证"><a href="#2、docker验证" class="headerlink" title="2、docker验证"></a>2、docker验证</h2><p>docker默认有一个hello world镜像：</p><p><img src="https://codestar.top/note-image/202410082321142.png" alt="image-20240919141944591"></p><p>使用hello world镜像验证安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建hello-world镜像实例并运行</span><br>docker run hello-world<br></code></pre></td></tr></table></figure><p>正常执行如下，会出现<code>Hello from Docker！</code>字样：</p><p><img src="https://codestar.top/note-image/202410082322422.png" alt="image-20240911110515464"></p><p>通过<code>docker ps -a</code>可以看到刚才创建的实例正常运行：</p><p><img src="https://codestar.top/note-image/202410082322730.png" alt="image-20240919142429875"></p><p>执行过程中可能会出现“无法连接到 Docker 守护进程”的问题，重启系统再次执行指令可解决。</p><h2 id="3、docker常用指令"><a href="#3、docker常用指令" class="headerlink" title="3、docker常用指令"></a>3、docker常用指令</h2><table>  <thead>    <tr>      <th>类型</th>      <th>指令</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td rowspan="2">基础操作</td>      <td><code>docker --version</code></td>      <td>查看 Docker 版本</td>    </tr>    <tr>      <td><code>docker info</code></td>      <td>查看 Docker 系统信息</td>    </tr>    <tr>      <td rowspan="6">镜像操作</td>      <td><code>docker images</code></td>      <td>列出本地所有镜像</td>    </tr>    <tr>      <td><code>docker pull [image]</code></td>      <td>从 Docker Hub 拉取或者更新指定镜像</td>    </tr>    <tr>      <td><code>docker build -t [image] [path]</code></td>      <td>从 Dockerfile 构建镜像</td>    </tr>    <tr>      <td><code>docker rmi [image]</code></td>      <td>删除指定镜像</td>    </tr>    <tr>      <td><code>docker tag [source-image] [target-image]</code></td>      <td>标记本地镜像，将其归入某一仓库</td>    </tr>    <tr>      <td><code>docker history [image]</code></td>      <td>查看指定镜像的创建历史</td>    </tr>    <tr>      <td rowspan="18">容器操作</td>      <td><code>docker run [options] [image]</code></td>      <td>创建一个新的容器并运行</td>    </tr>    <tr>      <td><code>docker ps</code></td>      <td>列出所有正在运行的容器</td>    </tr>    <tr>      <td><code>docker ps -a</code></td>      <td>列出所有容器，包括未运行的</td>    </tr>    <tr>      <td><code>docker stop [container]</code></td>      <td>停止一个运行的容器，有一定的等待时间</td>    </tr>    <tr>      <td><code>docker kill [container]</code></td>      <td>强制终止容器，立即停止。适用于容器出现无响应的场景</td>    </tr>    <tr>      <td><code>docker start [container]</code></td>      <td>启动一个停止的容器</td>    </tr>    <tr>      <td><code>docker restart [container]</code></td>      <td>重启一个容器</td>    </tr>    <tr>      <td><code>docker rm [container]</code></td>      <td>删除一个容器</td>    </tr>    <tr>      <td><code>docker rename old_container_name new_container_name</code></td>      <td>修改容器名称</td>    </tr>    <tr>      <td><code>docker pause [container]</code></td>      <td>暂停容器运行，ps -a可以查看到状态为pause</td>    </tr>    <tr>      <td><code>docker unpause [container]</code></td>      <td>恢复容器运行</td>    </tr>    <tr>      <td><code>docker exec -it [container] [command]</code></td>      <td>进入一个正在运行的容器执行命令</td>    </tr>    <tr>      <td><code>docker logs [container]</code></td>      <td>查看容器的日志</td>    </tr>    <tr>      <td><code>docker port [container]</code></td>      <td>查看容器的端口映射</td>    </tr>    <tr>      <td><code>docker inspect [container]</code></td>      <td>查询容器和镜像基本信息，包含挂载信息、网络信息、IP地址等</td>    </tr>    <tr>      <td><code>docker diff [container]</code></td>      <td>检查容器文件系统的变更，文件的变化、目录的变化等（A:新增项、D：删除项、C：变更项）</td>    </tr>    <tr>      <td><code>docker top [container]</code></td>      <td>查询容器的系统进程情况</td>    </tr>    <tr>      <td><code>docker stats</code></td>      <td>列出容器资源使用详情：CPU、RAM、NetworkI/O、BlockI/O、Process IDs</td>    </tr>    <tr>      <td rowspan="4">网络操作</td>      <td><code>docker network ls</code></td>      <td>列出所有 Docker 网络</td>    </tr>    <tr>      <td><code>docker network create [name]</code></td>      <td>创建一个新的网络</td>    </tr>    <tr>      <td><code>docker network connect [network] [container]</code></td>      <td>将容器连接到网络</td>    </tr>    <tr>      <td><code>docker network disconnect [network] [container]</code></td>      <td>将容器从网络中断开</td>    </tr>    <tr>      <td rowspan="3">数据卷操作</td>      <td><code>docker volume ls</code></td>      <td>列出所有数据卷</td>    </tr>    <tr>      <td><code>docker volume create [name]</code></td>      <td>创建一个新的数据卷</td>    </tr>    <tr>      <td><code>docker volume rm [name]</code></td>      <td>删除一个数据卷</td>    </tr>    <tr>      <td rowspan="2">文件拷贝</td>      <td><code>docker cp [container]:[path] [path]</code></td>      <td>从容器中拷贝文件到主机</td>    </tr>    <tr>      <td><code>docker cp [path] [container]:[path]</code></td>      <td>从主机拷贝文件到容器</td>    </tr>    <tr>      <td>容器 Commit</td>      <td><code>docker commit [container] [image]</code></td>      <td>从容器创建一个新的镜像</td>    </tr>  </tbody></table><p>参考：</p><p><a href="https://linux.cn/article-16531-1.html">https://linux.cn/article-16531-1.html</a></p><p><a href="https://linuxhandbook.com/essential-docker-commands/">https://linuxhandbook.com/essential-docker-commands/</a></p><p><a href="https://blog.csdn.net/qq_44281591/article/details/132252039">https://blog.csdn.net/qq_44281591/article/details/132252039</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu手动安装及配置PostgreSQL</title>
    <link href="/linux/ubuntu-install-postgresql.html"/>
    <url>/linux/ubuntu-install-postgresql.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、PostgreSQL官方源配置"><a href="#1、PostgreSQL官方源配置" class="headerlink" title="1、PostgreSQL官方源配置"></a>1、PostgreSQL官方源配置</h2><p>添加PostgreSQL官方APT源到本地：方便后续从官方源下载或更新PostgreSQL包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo sh -c &#x27;echo &quot;deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main&quot; &gt; /etc/apt/sources.list.d/pgdg.list&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082323907.png" alt="image-20240919104914454"></p><p>导入PostgreSQL官方的GPG公钥：用来验证PostgreSQL相关包的完整性，防止下载的包被篡改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ACCC4CF8.asc为官方公钥文件</span><br>wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -<br></code></pre></td></tr></table></figure><p>之后执行<code>apt-get update -y</code>或<code>apt update -y</code>更新一下配置的源。</p><h2 id="2、PostgreSQL安装"><a href="#2、PostgreSQL安装" class="headerlink" title="2、PostgreSQL安装"></a>2、PostgreSQL安装</h2><p>直接执行下面APT指令进行在线安装PostgreSQL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt -y install postgresql<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082323028.png" alt="image-20240918114813169"></p><p>安装完成如下：</p><p><img src="https://codestar.top/note-image/202410082324147.png" alt="image-20240918115025965"></p><p><strong>注意：</strong> 这里需要注意自己安装的版本为多少，后续需要用到，此处安装的最新版本为PostgreSQL 16。</p><h2 id="3、PostgreSQL配置"><a href="#3、PostgreSQL配置" class="headerlink" title="3、PostgreSQL配置"></a>3、PostgreSQL配置</h2><h3 id="3-1、创建PostgreSQL数据库账户"><a href="#3-1、创建PostgreSQL数据库账户" class="headerlink" title="3.1、创建PostgreSQL数据库账户"></a>3.1、创建PostgreSQL数据库账户</h3><p>这里创建一个非管理员用户，供某个应用单独的使用，隔离数据库与表的权限。下面创建新用户sonar，后续用它来绑定sonarqube应用相关联的数据库：</p><p>默认postgres为超级管理员，初始创建数据库及权限配置需要使用该账户操作：</p><ul><li>1、以postgres用户直接登录到PostgreSQL控制台：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -u postgres psql<br></code></pre></td></tr></table></figure><p>或先切换到postgres用户，再执行<code>psql</code>指令进入PostgreSQL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i -u postgres<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082324788.png" alt="image-20240918134753771"></p><p>进入到PostgreSQL控制台：</p><p><img src="https://codestar.top/note-image/202410082324800.png" alt="image-20240918135037549"></p><p>2、创建PostgreSQL新账户sonar：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建sonar用户并设置密码ad123456!</span><br>CREATE USER sonar WITH PASSWORD &#x27;ad123456!&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或下面这种，两者等价</span><br>CREATE ROLE sonar WITH PASSWORD &#x27;ad123456!&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在创建的时候同步添加权限：依次为登录、创建数据库、创建角色权限，建议只设置登录权限和密码，后续其他权限单独操作。</span><br>CREATE ROLE sonar WITH<br>    LOGIN<br>    CREATEDB<br>    CREATEROLE<br>    PASSWORD &#x27;ad123456!&#x27;;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082325256.png" alt="image-20240918135236979"></p><h3 id="3-2、创建PostgreSQL数据库"><a href="#3-2、创建PostgreSQL数据库" class="headerlink" title="3.2、创建PostgreSQL数据库"></a>3.2、创建PostgreSQL数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据库sonarqube_db，并且指定所有者为sonar</span><br>CREATE DATABASE sonarqube_db OWNER sonar;<br></code></pre></td></tr></table></figure><p><code>\l</code>查看所有数据库，看以看到刚才的数据库成功创建</p><p><img src="https://codestar.top/note-image/202410082325974.png" alt="image-20240918135632541"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将sonarqube_db数据库的所有权限都赋予sonar，否则sonar只能登录控制台，没有任何数据库操作权限</span><br>GRANT ALL PRIVILEGES ON DATABASE sonarqube_db to sonar;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082325735.png" alt="image-20240918135822246"></p><p>之后就可以使用sonar用户登录到对应的数据库了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入到sonarqube_db数据库</span><br>\c sonarqube_db<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或在postgresql控制台直接以sonar用户进入到sonarqube_db数据库</span><br>psql -U sonar -d sonarqube_db<br></code></pre></td></tr></table></figure><p>切换非超级管理员区别在控制台的符号会有变化：</p><p><img src="https://codestar.top/note-image/202410082326899.png" alt="image-20240918143354084"></p><p>使用<code>\q</code>退出PostgreSQL命令行。</p><h3 id="3-3、启动PostgreSQL远程访问"><a href="#3-3、启动PostgreSQL远程访问" class="headerlink" title="3.3、启动PostgreSQL远程访问"></a>3.3、启动PostgreSQL远程访问</h3><p>修改远程监听配置：修改为对所有连接IP进行监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置文件路径</span><br>/etc/postgresql/16/main/postgresql.conf<br>sudo vim /etc/postgresql/16/main/postgresql.conf<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> 所有用户控制台，均能看到配置文件，建议在postgresql控制台（postgres用户）中进行调整。</p><p><img src="https://codestar.top/note-image/202410082326569.png" alt="image-20240918140445978"></p><p>默认情况下，postgresql服务器仅监听本地地址，其中Connections Settings将listen_address修改为’*’开启远程访问：</p><p><img src="https://codestar.top/note-image/202410082327615.png" alt="image-20240918141036993"></p><p><img src="https://codestar.top/note-image/202410082327239.png" alt="image-20240918141240461"></p><p>修改完成保存即可。之后重启PostgreSQL服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service postgresql restart<br></code></pre></td></tr></table></figure><h3 id="3-4、配置防火墙及PostgreSQL端口开放"><a href="#3-4、配置防火墙及PostgreSQL端口开放" class="headerlink" title="3.4、配置防火墙及PostgreSQL端口开放"></a>3.4、配置防火墙及PostgreSQL端口开放</h3><ul><li>配置防火墙：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看防火墙状态：</span><br>sudo ufw status<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082327127.png" alt="image-20240918142240306"></p><p>防火墙状态如果为活动状态，则执行下面指令开放5432端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ufw allow 5432<br></code></pre></td></tr></table></figure><p>手动关闭防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ufw disable<br></code></pre></td></tr></table></figure><p>开启防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ufw enable<br></code></pre></td></tr></table></figure><ul><li>检查5432端口监听：</li></ul><p>默认PostgreSQL开放5432端口，检查：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ss -nlt | grep 5432<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>netstat -anp | grep 5432<br></code></pre></td></tr></table></figure><p>可以看到对任意IP(0.0.0.0)地址5432端口进行监听：</p><p><img src="https://codestar.top/note-image/202410082328061.png" alt="image-20240918141909692"></p><h3 id="3-5、配置服务器接受远程连接"><a href="#3-5、配置服务器接受远程连接" class="headerlink" title="3.5、配置服务器接受远程连接"></a>3.5、配置服务器接受远程连接</h3><p>PostgreSQL安全策略默认无法通过远程访问数据库，直接远程连接会报[28000]错误：</p><p><img src="https://codestar.top/note-image/202410082328766.png" alt="image-20240918152337152"></p><p>配置服务器接收远程连接，编辑<code>pg_hba.conf</code>配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/postgresql/16/main/pg_hba.conf<br></code></pre></td></tr></table></figure><p>在ipv4那里添加一行下面这行内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置允许所有IP连接</span><br>host            all            all           0.0.0.1/0           trust<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082329297.png" alt="image-20240918152827215"></p><p>保存后重启postgresql服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service postgresql restart<br></code></pre></td></tr></table></figure><p>之后使用客户端就可以正常远程连接了：</p><p><img src="https://codestar.top/note-image/202410082329446.png" alt="image-20240918153021855"></p><p>参考：</p><p><a href="https://developer.aliyun.com/article/1206821">https://developer.aliyun.com/article/1206821</a></p><p><a href="https://blog.csdn.net/Alenxjxj/article/details/135254476">https://blog.csdn.net/Alenxjxj/article/details/135254476</a></p><p><a href="https://blog.csdn.net/Blingbling007/article/details/107908347">https://blog.csdn.net/Blingbling007/article/details/107908347</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>PostgreSQL</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>PostgreSQL</tag>
      
      <tag>数据库</tag>
      
      <tag>Linux系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows配置安装gcc、g++、gdb编译环境</title>
    <link href="/windows/windows-install-gcc-gdb-g++.html"/>
    <url>/windows/windows-install-gcc-gdb-g++.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、MinGW下载"><a href="#1、MinGW下载" class="headerlink" title="1、MinGW下载"></a>1、MinGW下载</h2><p>MinGW为windows平台模拟Linux中gcc编译环境的一套工具集，整合了GUN工具集，包括gcc、g++、make等内容，通过这个工具，我们能在windows平台中进行c代码或其他语言的编译任务。</p><p>MinGW下载地址：<a href="https://sourceforge.net/projects/mingw/files/">https://sourceforge.net/projects/mingw/files/</a></p><p>下载最新版：</p><p><img src="https://codestar.top/note-image/202410082330378.png" alt="image-20240918170622661"></p><p>下载完成后，修改自定义路径，点击<kbd>continue</kbd>进行安装：</p><p><img src="https://codestar.top/note-image/202410082330693.png" alt="image-20240918170537291"></p><h2 id="2、MinGW环境变量配置"><a href="#2、MinGW环境变量配置" class="headerlink" title="2、MinGW环境变量配置"></a>2、MinGW环境变量配置</h2><p>在安装完成后，需要配置环境变量，才能在系统命令行中正常使用：</p><ul><li><kbd>win</kbd>+<kbd>r</kbd>打开运行面板，输入<code>sysdm.cpl</code>，进入“高级-&gt;环境变量”：</li></ul><p><img src="https://codestar.top/note-image/202410082330951.png" alt="image-20240919102303293"></p><p>修改系统变量中的<code>path</code>变量值，新建项添加MinGW执行文件位置<code>D:\MinGW\bin</code>，这里与前面安装的路径相对应：</p><p><img src="https://codestar.top/note-image/202410082330409.png" alt="image-20240919102616891"></p><p>之后打开cmd命令行，输入<code>mingw-get</code>检查是否配置生效：执行完正常跳到MinGW界面则配置正常</p><p><img src="https://codestar.top/note-image/202410082331694.png" alt="image-20240918170957258"></p><p><strong>注：</strong> 若在配置环境前打开了cmd面板，需要重新打开环境变量才会生效。</p><h2 id="3、安装GCC、GDB、G-编译工具"><a href="#3、安装GCC、GDB、G-编译工具" class="headerlink" title="3、安装GCC、GDB、G++编译工具"></a>3、安装GCC、GDB、G++编译工具</h2><ul><li>安装GCC：</li></ul><p>在cmd面板，执行以下指令进行gcc安装：安装包相对想多，需要一些时间，耐心等待</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mingw-get install gcc<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082331560.png" alt="image-20240918171107054"></p><p>安装完成后执行<code>gcc -v</code>检查版本：安装成功正常返回版本信息如下</p><p><img src="https://codestar.top/note-image/202410082332379.png" alt="image-20240918171556189"></p><ul><li>安装G++：</li></ul><p>进一步安装g++、执行下面指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mingw-get install g++<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082333116.png" alt="image-20240919103450703"></p><p>执行<code>g++ -v</code>检查安装版本，与gcc结果类似：</p><p><img src="https://codestar.top/note-image/202410082333525.png" alt="image-20240919103619281"></p><ul><li>安装gdb：</li></ul><p>进一步安装gdb，执行下面指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mingw-get install gdb<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202410082334197.png" alt="image-20240919103845478"></p><p>安装完成后，执行<code>gdb -v</code>验证版本：正常返回版本信息</p><p><img src="https://codestar.top/note-image/202410082335543.png" alt="image-20240919103929003"></p><p>参考：<a href="https://blog.csdn.net/weixin_64064486/article/details/123940266">https://blog.csdn.net/weixin_64064486/article/details/123940266</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>编译基础</category>
      
      <category>调试技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译基础</tag>
      
      <tag>调试技术</tag>
      
      <tag>Windows</tag>
      
      <tag>用户管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows Terminal内核、配置及主题优化全流程</title>
    <link href="/windows/windows-terminal-kernel-configuration-and-theme-optimization.html"/>
    <url>/windows/windows-terminal-kernel-configuration-and-theme-optimization.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、内核优化"><a href="#1、内核优化" class="headerlink" title="1、内核优化"></a>1、内核优化</h2><p>替换为优化内核PWSH 7，官方仓库：</p><p><a href="https://github.com/PowerShell/PowerShell/releases">https://github.com/PowerShell/PowerShell/releases</a></p><p>进入后，下载Windows 64位安装包：</p><p><img src="https://codestar.top/note-image/202409112253307.png" alt="image-20240909173313490"></p><p>根据安装向导，一路点击安装，安装完成后打开Windows terminal设置页面，将启动的内核切换为<code>PowerShell</code>：</p><p><img src="https://codestar.top/note-image/202409112254705.png" alt="image-20240909173607167"></p><h2 id="2、配置优化"><a href="#2、配置优化" class="headerlink" title="2、配置优化"></a>2、配置优化</h2><h3 id="2-1、默认配置文件"><a href="#2-1、默认配置文件" class="headerlink" title="2.1、默认配置文件"></a>2.1、默认配置文件</h3><p>安装完成后的windows terminal默认配置文件为<code>settings.json</code>，默认路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">xxx为PC账户名</span><br>C:\Users\xxx\AppData\Local\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState<br></code></pre></td></tr></table></figure><p>通过Windows terminal设置界面，可以直接打开配置文件：</p><p><img src="https://codestar.top/note-image/202409112255352.png" alt="image-20240909175147668"></p><h3 id="2-2、配置优化"><a href="#2-2、配置优化" class="headerlink" title="2.2、配置优化"></a>2.2、配置优化</h3><p>对于windows terminal，我们来对其进行简单的配置优化，打开<code>settings.json</code>文件，修改profiles中的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">完整配置如下：</span><br>&quot;profiles&quot;: <br>    &#123;<br>        &quot;defaults&quot;: // 适用于所有配置文件的默认设置 <br>        &#123;<br>            //设置字体配置  <br>            &quot;font&quot;: <br>                &#123;<br>                    &quot;face&quot;: &quot;Agave Nerd Font&quot;,<br>                    &quot;size&quot;: 12<br>                &#125;,<br>            //设置配色方案<br>            &quot;colorScheme&quot;: &quot;One Half Dark (copy)&quot;,<br>            //设置亚克力效果<br>            &quot;useAcrylic&quot;: true,<br>            //亚克力效果不透明度<br>            &quot;acrylicOpacity&quot;: 0.80,<br>            //设置背景图片<br>            &quot;backgroundImage&quot;: &quot;F:\\\u4e2a\u4eba\u6587\u6863\\\u58c1\u7eb8\\wallhaven-x6jo5o.jpg&quot;,<br>            //设置背景透明度<br>            &quot;backgroundImageOpacity&quot;: 0.85,<br>            //设置背景图片拉伸模式<br>            &quot;backgroundImageStretchMode&quot;: &quot;uniformToFill&quot;,<br>            //设置光标形状<br>            &quot;cursorShape&quot;: &quot;bar&quot;<br>        &#125;,<br>        &quot;list&quot;: //配置独立内核的配置文件<br>        [<br>            &#123;<br>                &quot;commandline&quot;: &quot;%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe&quot;,<br>                &quot;guid&quot;: &quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;,<br>                &quot;hidden&quot;: false,<br>                &quot;name&quot;: &quot;Windows PowerShell&quot;<br>            &#125;,<br>            &#123;<br>                &quot;commandline&quot;: &quot;%SystemRoot%\\System32\\cmd.exe&quot;,<br>                &quot;guid&quot;: &quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;,<br>                &quot;hidden&quot;: false,<br>                &quot;name&quot;: &quot;\u547d\u4ee4\u63d0\u793a\u7b26&quot;<br>            &#125;,<br>            &#123;<br>                &quot;guid&quot;: &quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;,<br>                &quot;hidden&quot;: false,<br>                &quot;name&quot;: &quot;Azure Cloud Shell&quot;,<br>                &quot;source&quot;: &quot;Windows.Terminal.Azure&quot;<br>            &#125;,<br>            &#123;<br>                &quot;elevate&quot;: true,<br>                &quot;guid&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;,<br>                &quot;hidden&quot;: false,<br>                &quot;name&quot;: &quot;PowerShell&quot;,<br>                &quot;source&quot;: &quot;Windows.Terminal.PowershellCore&quot;<br>            &#125;<br>        ]<br>    &#125;<br></code></pre></td></tr></table></figure><p>defaults为<strong>全局配置</strong>，list针对每个启动内核做单独的配置，当配置不同时，优先采用list中的独立配置项。</p><p>自定义配色方案在schemes中创建，自定义主题在themes中创建。scheme只影响单独运用的终端，themes会影响整个终端效果，下面是参考的配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;schemes&quot;: <br>    [<br>        &#123;<br>            &quot;background&quot;: &quot;#416187&quot;,<br>            &quot;black&quot;: &quot;#06141C&quot;,<br>            &quot;blue&quot;: &quot;#61AFEF&quot;,<br>            &quot;brightBlack&quot;: &quot;#686E80&quot;,<br>            &quot;brightBlue&quot;: &quot;#61AFEF&quot;,<br>            &quot;brightCyan&quot;: &quot;#56B6C2&quot;,<br>            &quot;brightGreen&quot;: &quot;#98C379&quot;,<br>            &quot;brightPurple&quot;: &quot;#C678DD&quot;,<br>            &quot;brightRed&quot;: &quot;#E06C75&quot;,<br>            &quot;brightWhite&quot;: &quot;#DCDFE4&quot;,<br>            &quot;brightYellow&quot;: &quot;#E5C07B&quot;,<br>            &quot;cursorColor&quot;: &quot;#FFFFFF&quot;,<br>            &quot;cyan&quot;: &quot;#56B6C2&quot;,<br>            &quot;foreground&quot;: &quot;#72A1AD&quot;,<br>            &quot;green&quot;: &quot;#98C379&quot;,<br>            &quot;name&quot;: &quot;One Half Dark (copy)&quot;,<br>            &quot;purple&quot;: &quot;#C678DD&quot;,<br>            &quot;red&quot;: &quot;#E06C75&quot;,<br>            &quot;selectionBackground&quot;: &quot;#FFFFFF&quot;,<br>            &quot;white&quot;: &quot;#DCDFE4&quot;,<br>            &quot;yellow&quot;: &quot;#E5C07B&quot;<br>        &#125;<br>    ],<br>    &quot;themes&quot;: [<br>        &#123;<br>            &quot;name&quot;: &quot;Custom Theme 1&quot;,<br>            &quot;tab&quot;: &#123;<br>                &quot;background&quot;: &quot;#1F1F1F&quot;,<br>                &quot;showCloseButton&quot;: &quot;always&quot;,<br>                &quot;unfocusedBackground&quot;: &quot;#2D2D2D&quot;<br>            &#125;,<br>            &quot;window&quot;: &#123;<br>                &quot;applicationTheme&quot;: &quot;dark&quot;,<br>                &quot;useMica&quot;: true<br>            &#125;<br>        &#125;<br>    ]<br></code></pre></td></tr></table></figure><p>主题可在<code>设置</code>-&gt;<code>外观</code>-&gt;<code>应用程序主题</code>中设置：</p><p><img src="https://codestar.top/note-image/202409112255840.png" alt="image-20240910181007069"></p><p>也可直接在配置文件中修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;theme&quot;: &quot;Custom Theme 1&quot;,<br>&quot;themes&quot;: <br>    [<br>        &#123;<br>            &quot;name&quot;: &quot;Custom Theme 1&quot;,<br>            &quot;tab&quot;: <br>            &#123;<br>                &quot;background&quot;: &quot;#1F1F1FFF&quot;,<br>                &quot;iconStyle&quot;: &quot;default&quot;,<br>                &quot;showCloseButton&quot;: &quot;always&quot;,<br>                &quot;unfocusedBackground&quot;: &quot;#2D2D2DFF&quot;<br>            &#125;,<br>            &quot;window&quot;: <br>            &#123;<br>                &quot;applicationTheme&quot;: &quot;dark&quot;,<br>                &quot;experimental.rainbowFrame&quot;: false,<br>                &quot;frame&quot;: null,<br>                &quot;unfocusedFrame&quot;: null,<br>                &quot;useMica&quot;: true<br>            &#125;<br>        &#125;<br>    ]<br></code></pre></td></tr></table></figure><p>此配置项与themes同级，不可嵌入到defaults或list中，为全局配置。</p><h2 id="3、主题优化"><a href="#3、主题优化" class="headerlink" title="3、主题优化"></a>3、主题优化</h2><h3 id="3-1、on-my-posh安装及配置"><a href="#3-1、on-my-posh安装及配置" class="headerlink" title="3.1、on-my-posh安装及配置"></a>3.1、on-my-posh安装及配置</h3><p><strong>注意：<strong>下列步骤均基于</strong>管理员模式</strong>操作。</p><p>on-my-posh是powershell中用于自定义和美化命令行提示符的跨平台工具。基于on-my-posh，可以自由的定制powershell命令行样式，大大增强了pwsh的美观度和实用性。下面是on-my-posh的安装过程：</p><h4 id="1）on-my-posh安装"><a href="#1）on-my-posh安装" class="headerlink" title="1）on-my-posh安装"></a>1）on-my-posh安装</h4><p>打开Windows terminal命令行，执行安装指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">winget install JanDeDobbeleer.OhMyPosh -s winget<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>winget install oh-my-posh<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202409112256137.png" alt="image-20240909180329019"></p><h4 id="2）安装oh-my-posh指令"><a href="#2）安装oh-my-posh指令" class="headerlink" title="2）安装oh-my-posh指令"></a>2）安装oh-my-posh指令</h4><p>安装完成后，进行oh-my-posh指令安装，执行下面指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">(Get-Command oh-my-posh).Source<br></code></pre></td></tr></table></figure><p>可能会执行失败，执行失败时进行手动安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString(&#x27;https://ohmyposh.dev/install.ps1&#x27;))<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202409112257794.png" alt="image-20240909180916109"></p><p>在命令行输入<code>oh-my-posh</code>以验证<code>oh-my-posh</code>指令，正常输出如下：</p><p><img src="https://codestar.top/note-image/202409112257627.png" alt="image-20240909181059300"></p><p>一般情况下默认安装最新版本，想要手动升级执行如下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">winget upgrade JanDeDobbeleer.OhMyPosh -s winget<br></code></pre></td></tr></table></figure><h4 id="3）配置oh-my-posh主题环境变量"><a href="#3）配置oh-my-posh主题环境变量" class="headerlink" title="3）配置oh-my-posh主题环境变量"></a>3）配置oh-my-posh主题环境变量</h4><ul><li>设置<code>POSH_THEMES_PATH</code>环境变量：这个变量的作用在快速定位到oh-my-posh主题路径</li></ul><p><kbd>win</kbd>+<kbd>r</kbd>打开运行栏，输入<code>sysdm.cpl</code>打开系统属性配置页，在‘高级’-&gt;‘环境变量’，新建<code>POSH_THEMES_PATH</code>系统变量，加入主题文件路径，默认如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">xxx替换为自己的账户名称</span><br>C:\Users\xxx\AppData\Local\Programs\oh-my-posh\themes\<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202409112258334.png" alt="image-20240909191025126"></p><p>此路径下，每一个配置文件都为一个独立主题。</p><h4 id="4）切换主题"><a href="#4）切换主题" class="headerlink" title="4）切换主题"></a>4）切换主题</h4><p>创建环境变量成功后，重新打开Windows terminal，进行主题切换，示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到jandedobbeleer.omp主题</span><br>oh-my-posh init pwsh --config $env:POSH_THEMES_PATH\jandedobbeleer.omp.json | Invoke-Expression<br></code></pre></td></tr></table></figure><p>切换成功后，命令面板的样式会变化：</p><p><img src="https://codestar.top/note-image/202409112259714.png" alt="image-20240909192526186"></p><p>或者在面板执行<code>Get-PoshThemes</code>获取主题列表，再进一步选择。</p><p>切换指定的主题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">M365Princess为主题名称</span><br>Set-PoshPrompt -Theme M365Princess<br></code></pre></td></tr></table></figure><p>每种主题的效果，可以查看官方预览：<a href="https://ohmyposh.dev/docs/themes">https://ohmyposh.dev/docs/themes</a></p><h3 id="3-2、Nerd字体安装"><a href="#3-2、Nerd字体安装" class="headerlink" title="3.2、Nerd字体安装"></a>3.2、Nerd字体安装</h3><p>在配置完oh-my-posh后，因为主题中会含有部分特殊字符，用默认的系统字体会乱码，需要使用兼容性更好的字体，这里使用nerd font下面来安装</p><h4 id="1）Nerd字体下载"><a href="#1）Nerd字体下载" class="headerlink" title="1）Nerd字体下载"></a>1）Nerd字体下载</h4><p>访问Nerd官方下载字体: <a href="https://www.nerdfonts.com/font-downloads">https://www.nerdfonts.com/font-downloads</a></p><p>选择任意一款字体下载即可，这里我选择下载<code>Agrave Nerd Font</code>字体：</p><p><img src="https://codestar.top/note-image/202409112259097.png" alt="image-20240909193138288"></p><p>下载完成后，解压zip包，将其中的字体进行安装：</p><p><img src="https://codestar.top/note-image/202409112300219.png" alt="image-20240909193414036"></p><p>上述文件，直接拖进<code>C:\Windows\Fonts\</code>路径进行安装：</p><p><img src="https://codestar.top/note-image/202409112300083.png" alt="image-20240909193521184"></p><p>到此即可正常在系统中安装Nerd字体，后续在oh-my-posh中进一步配置。</p><h4 id="2）oh-my-posh安装Nerd字体"><a href="#2）oh-my-posh安装Nerd字体" class="headerlink" title="2）oh-my-posh安装Nerd字体"></a>2）oh-my-posh安装Nerd字体</h4><p>进入Windows terminal，进行oh-my-posh字体安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">oh-my-posh font install<br></code></pre></td></tr></table></figure><p>执行后，可以看到我们之前装的Agrave字体，选中按回车即可：</p><p><img src="https://codestar.top/note-image/202409112300186.png" alt="image-20240909194004482"></p><p>安装成功之后结果如下：</p><p><img src="https://codestar.top/note-image/202409112302124.png" alt="image-20240909194112007"></p><p>切换powershell内核字体：</p><p>Windows terminal进入<code>设置</code>-&gt;<code>PowerShell</code>-&gt;<code>外观</code>-&gt;<code>字体</code>切换为Agrave Nerd Font，如下：</p><p><img src="https://codestar.top/note-image/202409112301939.png" alt="image-20240909194516190"></p><p><strong>PS：切换之后一定要记得点保存！！</strong></p><p>配置完上面的内容，主题即大功告成了。</p><p>**提示：**除了nerd还有其他可使用的字体还有：等距更纱黑体、powerline: <a href="https://github.com/powerline/fonts">https://github.com/powerline/fonts</a></p><h3 id="3-3、配置主题自启动"><a href="#3-3、配置主题自启动" class="headerlink" title="3.3、配置主题自启动"></a>3.3、配置主题自启动</h3><p>在默认powershell启动下，不会自动加载主题，下面通过自定义配置，使得PWSH启动时能够自动加载主题：</p><ul><li>创建Powershell配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查 <span class="hljs-variable">$PROFILE</span> 文件是否存在, 如果不存在则新建空文件</span><br>if (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202409112303890.png" alt="image-20240909200813533"></p><ul><li>修改配置文件</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">notepad</span> <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure><ul><li>加入配置内容</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置打开pwsh默认使用oh-my-posh并配置主题：jandedobbeleer.omp.json、1_shell.omp.json替换为自己定义的主题</span><br>oh-my-posh init pwsh --config $env:POSH_THEMES_PATH\jandedobbeleer.omp.json | Invoke-Expression<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>oh-my-posh init pwsh --config &quot;env:POSH_THEMES_PATH/1_shell.omp.json&quot; | Invoke-Expression<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202409112303749.png" alt="image-20240909200924536"></p><ul><li>生效配置文件</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">. </span>$PROFILE<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202409112303063.png" alt="image-20240909201003112"></p><p>生效配置后，重启Windows terminal即可自动加载oh-my-posh及主题了：</p><p><img src="https://codestar.top/note-image/202409112303420.png" alt="image-20240909201113245"></p><h2 id="4、（可选）安装Starship主题"><a href="#4、（可选）安装Starship主题" class="headerlink" title="4、（可选）安装Starship主题"></a>4、（可选）安装Starship主题</h2><h3 id="4-1、starship安装"><a href="#4-1、starship安装" class="headerlink" title="4.1、starship安装"></a>4.1、starship安装</h3><p>基于前几章，已经将Windows terminal各项配置及主题都搞定，这里个人喜欢Starship的样式，在配置完前面的内容后，选择安装单独的Starship主题样式：</p><p>官方开源库：<a href="https://github.com/starship/starship">https://github.com/starship/starship</a></p><p>样式预览：</p><p><img src="https://raw.githubusercontent.com/starship/starship/master/media/demo.gif" alt="demo.gif"></p><p>针对Windows安装，使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认走github源</span><br>winget install --id Starship.Starship<br></code></pre></td></tr></table></figure><p>键入Y同意：</p><p><img src="https://codestar.top/note-image/202409112305802.png" alt="image-20230517112525751"></p><p>上述源安装失败后，切换到widget源继续：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">winget install --id Starship.Starship --source winget<br></code></pre></td></tr></table></figure><p>安装成功如下：</p><p><img src="https://codestar.top/note-image/202409112305922.png" alt="image-20240909202527893"></p><p>安装完成后重启powershell。</p><h3 id="4-2、生效配置"><a href="#4-2、生效配置" class="headerlink" title="4.2、生效配置"></a>4.2、生效配置</h3><p>修改配置文件：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 打开配置文件</span><br><span class="hljs-attribute">notepad</span> <span class="hljs-variable">$PROFILE</span><br><span class="hljs-comment"># 填入下面内容</span><br>Invoke-Expression (&amp;starship init powershell)<br><span class="hljs-comment"># 生效配置</span><br>. <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure><p>切换效果：</p><p><img src="https://codestar.top/note-image/202409112306396.png" alt="image-20240909202928203"></p><p>非GIT路径显示如下：</p><p><img src="https://codestar.top/note-image/202409112306179.png" alt="image-20240909203350840"></p><p>GIT路径显示如下，会展示当前git分支及版本，仓库所用的编程语言：</p><p><img src="https://codestar.top/note-image/202409112306390.png" alt="image-20240909203552531"></p><p>给命令行再加入背景壁纸：</p><p><img src="https://codestar.top/note-image/202409112306074.png" alt="image-20240909204005684"></p><p>至此配置完毕。</p><h2 id="5、附录：Windows-terminal常用快捷键"><a href="#5、附录：Windows-terminal常用快捷键" class="headerlink" title="5、附录：Windows terminal常用快捷键"></a>5、附录：Windows terminal常用快捷键</h2><table><thead><tr><th align="left">类别</th><th align="left">操作</th><th align="left">快捷键</th></tr></thead><tbody><tr><td align="left">标签页操作</td><td align="left">新建标签页</td><td align="left">Ctrl + Shift + T</td></tr><tr><td align="left"></td><td align="left">切换到下一个标签页</td><td align="left">Ctrl + Tab</td></tr><tr><td align="left"></td><td align="left">切换到上一个标签页</td><td align="left">Ctrl + Shift + Tab</td></tr><tr><td align="left"></td><td align="left">切换到指定编号的标签页</td><td align="left">Ctrl + Num (1-9)</td></tr><tr><td align="left"></td><td align="left">关闭当前标签页</td><td align="left">Ctrl + W</td></tr><tr><td align="left">窗口分割</td><td align="left">垂直分割窗口</td><td align="left">Alt + Shift + +</td></tr><tr><td align="left"></td><td align="left">水平分割窗口</td><td align="left">Alt + Shift + -</td></tr><tr><td align="left"></td><td align="left">在分割的窗口间切换焦点</td><td align="left">Alt + 方向键</td></tr><tr><td align="left">复制粘贴</td><td align="left">复制选中文本</td><td align="left">Ctrl + C</td></tr><tr><td align="left"></td><td align="left">粘贴文本</td><td align="left">Ctrl + V</td></tr><tr><td align="left"></td><td align="left">粘贴（某些 shell 中）</td><td align="left">Shift + 鼠标右键</td></tr><tr><td align="left">文本操作</td><td align="left">删除光标前的一个单词</td><td align="left">Ctrl + Backspace</td></tr><tr><td align="left"></td><td align="left">删除光标后的一个单词</td><td align="left">Ctrl + Delete</td></tr><tr><td align="left">滚动和查找</td><td align="left">向上&#x2F;向下滚动</td><td align="left">Ctrl + Shift + Up&#x2F;Down</td></tr><tr><td align="left"></td><td align="left">在终端中查找文本</td><td align="left">Ctrl + Shift + F</td></tr><tr><td align="left">字体大小调整</td><td align="left">增大字体</td><td align="left">Ctrl + +</td></tr><tr><td align="left"></td><td align="left">减小字体</td><td align="left">Ctrl + -</td></tr><tr><td align="left"></td><td align="left">重置字体大小</td><td align="left">Ctrl + 0</td></tr><tr><td align="left">全屏模式</td><td align="left">切换全屏模式</td><td align="left">F11</td></tr><tr><td align="left">透明度调节</td><td align="left">调整窗口透明度</td><td align="left">Ctrl + Shift + 滚轮</td></tr><tr><td align="left">设置</td><td align="left">打开设置 JSON 文件</td><td align="left">Ctrl + ,</td></tr><tr><td align="left">命令面板</td><td align="left">打开命令面板</td><td align="left">Ctrl + Shift + P</td></tr><tr><td align="left">配置文件</td><td align="left">快速切换配置文件</td><td align="left">Ctrl + Shift + 空格</td></tr><tr><td align="left">多行选择</td><td align="left">选择多行文本</td><td align="left">Shift + 鼠标左键拖动</td></tr><tr><td align="left">窗口操作</td><td align="left">打开新的 Windows Terminal 窗口</td><td align="left">Shift + Ctrl + N</td></tr><tr><td align="left"></td><td align="left">关闭整个 Windows Terminal 窗口</td><td align="left">Alt + F4</td></tr><tr><td align="left">特定标签页</td><td align="left">打开新的 PowerShell 标签页</td><td align="left">Ctrl + Shift + 1</td></tr><tr><td align="left"></td><td align="left">打开新的 CMD 标签页</td><td align="left">Ctrl + Shift + 2</td></tr></tbody></table><p>参考：</p><p><a href="https://blog.csdn.net/Likianta/article/details/124950605">https://blog.csdn.net/Likianta/article/details/124950605</a></p><p><a href="https://blog.csdn.net/yihuajack/article/details/111405007">https://blog.csdn.net/yihuajack/article/details/111405007</a></p><p><a href="https://ohmyposh.dev/docs/installation/prompt">https://ohmyposh.dev/docs/installation/prompt</a></p><p><a href="https://zhuanlan.zhihu.com/p/456129712">https://zhuanlan.zhihu.com/p/456129712</a></p><p><a href="https://sspai.com/post/52907">https://sspai.com/post/52907</a></p><p><a href="https://blog.joaograssi.com/windows-subsystem-for-linux-with-oh-my-zsh-conemu/">https://blog.joaograssi.com/windows-subsystem-for-linux-with-oh-my-zsh-conemu/</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>Windows Terminal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows Terminal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android中如何手动制造logcat各等级日志（VERBOSE、DEBUG、INFO、WARNING、ERROR、FATAL）</title>
    <link href="/android/android-logcat.html"/>
    <url>/android/android-logcat.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、logcat与log工具"><a href="#1、logcat与log工具" class="headerlink" title="1、logcat与log工具"></a>1、logcat与log工具</h2><p>logcat：是Android操作系统中用于记录和查看系统日志的工具。它是Android开发和调试的重要工具之一，能够通过logcat定位诊断系统故障或应用程序的问题。</p><p>log：在android中默认集成的一个生成日志的工具，可以通过log指令来生成我们想要的各类logcat日志来方便测试。</p><h2 id="2、通过log生成logcat日志"><a href="#2、通过log生成logcat日志" class="headerlink" title="2、通过log生成logcat日志"></a>2、通过log生成logcat日志</h2><p>通过adb工具进入到android控制台：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emulator-5554为设备名</span><br>adb -s emulator-5554 shell<br></code></pre></td></tr></table></figure><h3 id="2-1、logcat日志等级"><a href="#2-1、logcat日志等级" class="headerlink" title="2.1、logcat日志等级"></a>2.1、logcat日志等级</h3><p>执行<code>logcat –help</code>查看指令说明，可以看到有日志等级，包括六种可以打印的类型（VERBOSE、DEBUG、INFO、WARNING、ERROR、FATAL）。另外一种S（Silent）表示静默，即上面所有类型的日志均不输出。</p><p><img src="https://codestar.top/note-image/202407292251335.png" alt="image-20240727164728108"></p><p>具体类型说明如下：从上往下等级逐渐升高</p><ul><li>VERBOSE：最低级别，用于详细的调试信息。</li><li>DEBUG：用于调试信息，通常在开发过程中使用。</li><li>INFO：用于普通信息，例如应用程序的运行状态。</li><li>WARNING：用于警告信息，表明潜在的问题。</li><li>ERROR：用于错误信息，表示应用程序或系统发生了错误。</li><li>FATAL：用于表示严重的错误，通常伴随应用程序崩溃。</li></ul><h3 id="2-2、log指令说明"><a href="#2-2、log指令说明" class="headerlink" title="2.2、log指令说明"></a>2.2、log指令说明</h3><p>执行<code>log --help</code>查看log说明内容：</p><p><img src="https://codestar.top/note-image/202407292252805.png" alt="image-20240727165325663"></p><ul><li><code>-p</code>：默认打印INFO级别的日志，可以使用<code>-p</code>参数来修改日志级别</li><li><code>-t</code>：使用给定标签代替默认的‘log’内容</li></ul><p>使用示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">log -p v -t &quot;syslog_test&quot; &quot;ivi----Log level of : VERBOSE&quot;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202407292252763.png" alt="image-20240727170501263"></p><p>执行完之后，执行logcat指令打印，即可得到我们指定的日志内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logcat | grep &quot;syslog_test&quot;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202407292252220.png" alt="image-20240727170647459"></p><p>脚本说明：</p><blockquote><p>定义日志等级为Verbose，指定日志TAG标签为“syslog_test”——系统日志测试，并输出具体的消息内容为“ivi—-Log level of : VERBOSE”</p></blockquote><p>log指令使用起来很简单也很方便。那么参照这个用法，可以生成不同等级不同TAG标签的内容。下面给出不同等级的适用实例。</p><h3 id="2-3、log生成日志指令"><a href="#2-3、log生成日志指令" class="headerlink" title="2.3、log生成日志指令"></a>2.3、log生成日志指令</h3><p>我们先设置一个时间变量TIME，格式化为“年-月-日 时:分:秒”方便检查时间，后续加入到日志的打印中去：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br></code></pre></td></tr></table></figure><ul><li>生成VERBOSE，标签TAG为“LOG-TEST-1”：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br></code></pre></td></tr></table></figure><ul><li>生成DEBUG等级，标签TAG为“LOG-TEST-2”：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br></code></pre></td></tr></table></figure><ul><li>生成INFO等级，标签TAG为“LOG-TEST-3”：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br></code></pre></td></tr></table></figure><ul><li>生成WARNING等级，标签TAG为“LOG-TEST-4”：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br></code></pre></td></tr></table></figure><ul><li>生成ERROR等级，标签TAG为“LOG-TEST-5”：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br></code></pre></td></tr></table></figure><ul><li>生成FATAL等级，标签TAG为“LOG-TEST-6”：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br></code></pre></td></tr></table></figure><p>Tips：上面的-p后接的参数，对应与<code>log --help</code>中的说明：</p><p><img src="https://codestar.top/note-image/202407292253457.png" alt="image-20240727172415329"></p><h2 id="3、制作日志生成shell脚本"><a href="#3、制作日志生成shell脚本" class="headerlink" title="3、制作日志生成shell脚本"></a>3、制作日志生成shell脚本</h2><p>在我们知道如何通过log生成单条不同等级和标签的用例后，那么我们接下来要通过这些指令，进行批量造日志了。在shell中使用循环语句来控制日志生成指令：</p><ul><li>一组日志生成语句，包含下面这些：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br></code></pre></td></tr></table></figure><ul><li>shell中的循环控制是这样：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">while [condition]<br>do<br>[sentence]<br>done<br></code></pre></td></tr></table></figure><p>加入日志生成，其中再加入时延控制，<code>usleep 200000</code>间隔200毫秒1组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>while true<br>do<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>    log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>    log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>    log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>    log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>    log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br>done<br></code></pre></td></tr></table></figure><p>在Android6.0之后，可以通过集成的toybox工具集来使用vi工具，接下来使用vi来创建shell脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">android控制面板执行</span><br>toybox vi /data/genlog.sh<br></code></pre></td></tr></table></figure><p>键入<code>i</code>后，输入上面的命令内容，粘贴内容之后输入<kbd>Esc</kbd>+<kbd>:</kbd>键，之后敲入<code>wq</code>保存并退出编辑。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查创建的脚本</span><br>cat /data/genlog.sh<br></code></pre></td></tr></table></figure><p>赋予执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x genlog.sh<br></code></pre></td></tr></table></figure><p>执行<code>/data/genlog.sh</code>开始生成日志，<code>logcat | grep &quot;LOG-TEST&quot;</code>可以看到能够正常批量生成日志：</p><p><img src="https://codestar.top/note-image/202407292258743.png" alt="image-20240729152708049"></p><p>也可以通过PC本地创建文本文件，再改为bash文件，使用adb push方式进行上传，使用这种方式需要注意下面两个编码问题：</p><ul><li>1、我们通过Windows文本编辑器创建的文本内容，其格式默认为CR LF格式，在android设备中使用的unix编码，需要将编码转换为LF格式，否则在执行while、if等语句时会报错：</li></ul><p><img src="https://codestar.top/note-image/202407292300518.png" alt="image-20240729152949367"></p><p>出现异常时，会报下面的<code>syntax error: unmatched</code>错误：</p><p><img src="https://codestar.top/note-image/202407292300706.png" alt="image-20240729153226333"></p><ul><li>2、制表符需要转换为空格，虽然不影响运行，但建议转换为空格执行：</li></ul><p><img src="https://codestar.top/note-image/202407292300394.png" alt="image-20240729153355925"></p><h2 id="4、增加日志生成控制"><a href="#4、增加日志生成控制" class="headerlink" title="4、增加日志生成控制"></a>4、增加日志生成控制</h2><p>当我们想在运行时自由选择生成日志的级别，我们可以通过命令行参数传递进行日志级别控制：</p><blockquote><p>脚本基本结构，通过while或if语句控制条件，之后通过传递的shell参数来判断执行哪一段语句。</p></blockquote><p>1、参数传递：使用<code>$n</code>表示第n个参数，其中<code>$0</code>为文件名，<code>$1</code>开始才是接的第一个参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">简单示例</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">test.sh文件内容</span><br>echo &quot;filename is : $0&quot;;<br>echo &quot;the arg1 is : $1&quot;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行</span><br>./test.sh key1<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202407292301538.png" alt="image-20240729160345253"></p><p>参考：<a href="https://www.runoob.com/linux/linux-shell-passing-arguments.html">https://www.runoob.com/linux/linux-shell-passing-arguments.html</a></p><p>2、补全while条件：</p><p>定义日志等级对应数值1-6，另外加所有日志的生成场景，分别对应如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">1 -- VERBOSE<br>2 -- DEBUG<br>3 -- INFO<br>4 -- WARNING<br>5 -- ERROR<br>6 -- FATAL<br>all -- 生成所有级别日志<br></code></pre></td></tr></table></figure><p>修改while条件语句：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs shell">TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>while [ &quot;$1&quot; == &#x27;1&#x27; ]<br>do<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br>done<br><br>while [ &quot;$1&quot; == &#x27;2&#x27; ]<br>do<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br>done<br><br>while [ &quot;$1&quot; == &#x27;3&#x27; ]<br>do<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br>done<br><br>while [ &quot;$1&quot; == &#x27;4&#x27; ]<br>do<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br>done<br><br>while [ &quot;$1&quot; == &#x27;5&#x27; ]<br>do<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br>done<br><br>while [ &quot;$1&quot; == &#x27;6&#x27; ]<br>do<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br>done<br><br>while [ &quot;$1&quot; == &#x27;all&#x27; ]<br>do<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>    log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>    log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>    log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>    log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>    log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br>done<br><br></code></pre></td></tr></table></figure><p>运行一下看看，能够成功的自由选择生成的级别了：</p><p><code>./genlog.sh 1</code>生成Verbose等级日志：</p><p><img src="https://codestar.top/note-image/202407292301022.png" alt="image-20240729162142939"></p><p><code>./genlog.sh all</code>生成所有级别日志：</p><p><img src="https://codestar.top/note-image/202407292301174.png" alt="image-20240729162309734"></p><p><code>./genlog.sh 3</code>生成Info级别日志：</p><p><img src="https://codestar.top/note-image/202407292302901.png" alt="image-20240729162425242"></p><p>至此已大工告成，上面的实现方法是将while语句与条件单独拆开进行判断，在shell中也可以使用if或case语句进行多条件判断，详见附录。</p><h2 id="5、附录"><a href="#5、附录" class="headerlink" title="5、附录"></a>5、附录</h2><ul><li>IF多条件结构：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [ condition1 ]; then<br>    # 当 condition1 为真时执行<br>elif [ condition2 ]; then<br>    # 当 condition2 为真时执行<br>else<br>    # 当所有条件都不为真时执行<br>fi<br></code></pre></td></tr></table></figure><p>将前面的脚本使用if结构进行修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell">TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br><br>if [ &quot;$1&quot; == &#x27;1&#x27; ]; then<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br><br>elif [ &quot;$1&quot; == &#x27;2&#x27; ]; then<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br><br>elif [ &quot;$1&quot; == &#x27;3&#x27; ]; then<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br><br>elif [ &quot;$1&quot; == &#x27;4&#x27; ]; then<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br><br>elif [ &quot;$1&quot; == &#x27;5&#x27; ]; then<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br><br>elif [ &quot;$1&quot; == &#x27;6&#x27; ]; then<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br><br>elif [ &quot;$1&quot; == &#x27;all&#x27; ]; then<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>    log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>    log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>    log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>    log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>    log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br>    <br>else<br>    TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>    log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>    log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>    log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>    log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>    log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>    log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br>    usleep 200000<br>fi<br></code></pre></td></tr></table></figure><p>修改完成，上面是只能打印1次，加入无条件while循环语句：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs shell">TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br><br>if [ &quot;$1&quot; == &#x27;1&#x27; ]; then<br>    while true<br>    do<br>        TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>        log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>        usleep 200000<br>    done<br><br>elif [ &quot;$1&quot; == &#x27;2&#x27; ]; then<br>    while true<br>        do<br>        TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>        log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>        usleep 200000<br>    done<br><br>elif [ &quot;$1&quot; == &#x27;3&#x27; ]; then<br>    while true<br>        do<br>        TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>        log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>        usleep 200000<br>    done<br><br>elif [ &quot;$1&quot; == &#x27;4&#x27; ]; then<br>    while true<br>        do<br>        TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>        log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>        usleep 200000<br>    done<br><br>elif [ &quot;$1&quot; == &#x27;5&#x27; ]; then<br>    while true<br>        do<br>        TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>        log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>        usleep 200000<br>    done<br><br>elif [ &quot;$1&quot; == &#x27;6&#x27; ]; then<br>    while true<br>        do<br>        TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>        log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br>        usleep 200000<br>    done<br><br>elif [ &quot;$1&quot; == &#x27;all&#x27; ]; then<br>    while true<br>        do<br>        TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>        log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>        log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>        log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>        log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>        log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>        log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br>        usleep 200000<br>    done<br>    <br>else<br>    while true<br>        do<br>        TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>        log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>        log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>        log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>        log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>        log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>        log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br>        usleep 200000<br>    done<br>fi<br><br></code></pre></td></tr></table></figure><p>控制正常：</p><p><img src="https://codestar.top/note-image/202407292302045.png" alt="image-20240729164529373"></p><p><img src="https://codestar.top/note-image/202407292302011.png" alt="image-20240729164820318"></p><ul><li>case多条件结构：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">case variable in<br>    pattern1)<br>        # 当 variable 匹配 pattern1 时执行<br>        ;;<br>    pattern2)<br>        # 当 variable 匹配 pattern2 时执行<br>        ;;<br>    *)<br>        # 默认情况，当所有模式都不匹配时执行<br>        ;;<br>esac<br></code></pre></td></tr></table></figure><p>按照case结构进行修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs shell">TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br><br>case &quot;$1&quot; in<br>    &#x27;1&#x27;)<br>        while true<br>        do<br>            TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>            log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>            usleep 200000<br>        done<br>        ;;<br>    &#x27;2&#x27;)<br>        while true<br>            do<br>            TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>            log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>            usleep 200000<br>        done<br>        ;;<br>    &#x27;3&#x27;)<br>        while true<br>            do<br>            TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>            log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>            usleep 200000<br>        done<br>        ;;<br>    &#x27;4&#x27;)<br>        while true<br>            do<br>            TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>            log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>            usleep 200000<br>        done<br>        ;;<br>    &#x27;5&#x27;)<br>        while true<br>            do<br>            TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>            log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>            usleep 200000<br>        done<br>        ;;<br>    &#x27;6&#x27;)<br>        while true<br>            do<br>            TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>            log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br>            usleep 200000<br>        done<br>        ;;<br>    &#x27;all&#x27;)<br>        while true<br>            do<br>            TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>            log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>            log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>            log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>            log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>            log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>            log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br>            usleep 200000<br>        done<br>        ;;<br>    *)<br>        while true<br>            do<br>            TIME=`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`<br>            log -p v -t &quot;LOG-TEST-1&quot; &quot;GEN LOG level is : VERBOSE------$&#123;TIME&#125;.&quot;<br>            log -p d -t &quot;LOG-TEST-2&quot; &quot;GEN LOG level is : DEBUG--------$&#123;TIME&#125;.&quot;<br>            log -p i -t &quot;LOG-TEST-3&quot; &quot;GEN LOG level is : INFO---------$&#123;TIME&#125;.&quot;<br>            log -p w -t &quot;LOG-TEST-4&quot; &quot;GEN LOG level is : WARNING------$&#123;TIME&#125;.&quot;<br>            log -p e -t &quot;LOG-TEST-5&quot; &quot;GEN LOG level is : ERROR--------$&#123;TIME&#125;.&quot;<br>            log -p f -t &quot;LOG-TEST-6&quot; &quot;GEN LOG level is : FATAL--------$&#123;TIME&#125;.&quot;<br>            usleep 200000<br>        done<br>        ;;<br>esac<br><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202407292303278.png" alt="image-20240729170708234"></p>]]></content>
    
    
    <categories>
      
      <category>Android技术</category>
      
      <category>logcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>logcat</tag>
      
      <tag>log</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI Prompt工程师认证学习记录</title>
    <link href="/ai-ml/ai-prompt-engineer-certification-learning-record.html"/>
    <url>/ai-ml/ai-prompt-engineer-certification-learning-record.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、参考教程"><a href="#1、参考教程" class="headerlink" title="1、参考教程"></a>1、参考教程</h2><p><a href="https://datawhaler.feishu.cn/wiki/BhVQw3FlFitUTAkS4oXcSyJanph">https://datawhaler.feishu.cn/wiki/BhVQw3FlFitUTAkS4oXcSyJanph</a></p><h2 id="2、学习路线"><a href="#2、学习路线" class="headerlink" title="2、学习路线"></a>2、学习路线</h2><ul><li>课程大纲</li></ul><p><img src="https://codestar.top/note-image/202407142357518.png" alt="image-20240708232918805"></p><p>1、学习课程</p><p>2、动手实践：创建自己的AI 助手</p><p>3、测试认证</p><h2 id="3、第一阶段：prompt基础学习"><a href="#3、第一阶段：prompt基础学习" class="headerlink" title="3、第一阶段：prompt基础学习"></a>3、第一阶段：prompt基础学习</h2><h3 id="3-1、prompt基础"><a href="#3-1、prompt基础" class="headerlink" title="3.1、prompt基础"></a>3.1、prompt基础</h3><p>prompt即大模型的提示词，其最初目的是测试大模型的能力所使用的一系列提示语，在以往的prompt中，会按照固定的格式进行询问。LLM发展至今，对prompt的要求已不再限制格式，仅需一个问题即可。就如同正常的对话所引出的问题。</p><p>如下面这个prompt提示词：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Q:The sky is<br>A:<br></code></pre></td></tr></table></figure><p>讯飞星火对话：<a href="https://xinghuo.xfyun.cn/desk">https://xinghuo.xfyun.cn/desk</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">什么是prompt?<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202407142356819.png" alt="image-20240708234037763"></p><p>在讯飞星火中，除了文本，也支持图像对话，如让其生成一幅图：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">霜叶红于二月花，请根据诗词意境生成一幅图。<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202407142356473.png" alt="image-20240708234231531"></p><p>这里的能力，就是LLM的文生图能力。</p><h3 id="3-2、prompt使用场景"><a href="#3-2、prompt使用场景" class="headerlink" title="3.2、prompt使用场景"></a>3.2、prompt使用场景</h3><p>在上面的介绍中，我们能够通过prompt提示词来进行对话，和生成图像。但在实际的运用中还会存在一些局限性：</p><ul><li>1、时效性</li></ul><p>由于大模型的训练是基于已有的数据进行训练而成，当训练完成之后，在这之后所产生的一些数据或发生的一些事件，大模型是无从而知的。只有当赋予其web查询能力，才能尽可能的增强所回答内容的时效性。</p><ul><li>2、上下文记忆</li></ul><p>在各种大模型中，都有一个上下文范围，当我们单次对话，或累计的对话字符数达到了限制的长度后，此时大模型的上下文内容会中断。那么此时无法从前面的回答中进行连贯询问，此时会出现知识断层。那么如何来解决这个问题，有以下几个考量点：</p><blockquote><p>1、将长文本进行分割：使用较短的段落或句子进行询问，减少对长文本的记忆负担。</p><p>2、将prompt细化：当我们要询问某一项内容时，或下发某个指令，可以按照一定的步骤或格式来提问，同时在句中将表达内容尽可能明确。避免出现隐晦的表述。</p><p>3、逐步引导推理：大模型有很强的推理能力，我们可以充分利用这个特点，将任务拆分，进行逐步引导，使大模型的处理或回答更贴近于我们的所想。</p><p>4、减少信息冗余：尽可能的直接表达任务要求，减少不必要的，不相关的描述。</p></blockquote><ul><li>3、AI幻觉</li></ul><p>每个大模型都存在一定程度的幻觉，幻觉即是，当模型根据我们的prompt所作出的回答，其可能存在一定的虚假信息，由于大模型的知识库中，无法保证所有的都是正向数据，因此，这一点也无从避免。但可以通过多次对话，逐步反推，或根据我们的常识来加强对可能的出现幻觉进行识别。</p><ul><li>4、精确字数</li></ul><p>当大模型按照一定的要求来生成内容时，在框架保持要求的同时，可能无法达到精准的字数限制。如生成一篇旅游事记，限制在100字。按照这个要求，在实际的生成过程中，当事情按照正常逻辑表述完，可能已经超出100字，这一点上需要了解。</p><ul><li>5、内容合规性</li></ul><p>大模型背后的语料，由于是互联网上的数据，存在真实的，虚假的，正向的，反向的，因此无法保证所生成的内容一定是合规的。当我们在prompt中作出引诱性提问或要求时时，如果没有监管，那么生成的内容会非常的劣质和混乱，因此大模型厂商会对内容进行监管，在生成内容后进行检查，只有合规时才会展示给用户。</p><h3 id="3-3、prompt结构化框架"><a href="#3-3、prompt结构化框架" class="headerlink" title="3.3、prompt结构化框架"></a>3.3、prompt结构化框架</h3><p>了解完prompt的作用后，那么可想到，prompt可以有固定的格式来提升大模型生成内容的效果：如，参照【角色–任务–格式】的范式来进行编写prompt。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">角色：你是莎士比亚<br>任务：你需要根据自己所写的《哈姆雷特》，进行思想提炼，总结其中的故事内含。<br>格式：字数不超过200字，请以中文进行表述。<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202407142356603.png" alt="image-20240709234544117"></p><p>根据openai的prompt cookbook：<a href="https://cookbook.openai.com/%EF%BC%8C%E6%80%BB%E7%BB%93%E7%9A%84%E9%83%A8%E5%88%86%E6%B3%95%E5%88%99%E5%A6%82%E4%B8%8B%EF%BC%9A">https://cookbook.openai.com/，总结的部分法则如下：</a></p><p><img src="https://codestar.top/note-image/202407142356242.png" alt="image-20240709234637477"></p><h3 id="3-4、进阶prompt框架"><a href="#3-4、进阶prompt框架" class="headerlink" title="3.4、进阶prompt框架"></a>3.4、进阶prompt框架</h3><p>下面为9种常用prompt提示词框架，可以结合自己的问题灵活选用：</p><ul><li>1、APE类型</li></ul><blockquote><p>​     行动、目的、期望</p><p>（Action、Purpose、Expect）</p></blockquote><ul><li>2、CARE</li></ul><blockquote><p>上下文语境 、 行动 、 结果 、 示例</p></blockquote><ul><li>3、RACE</li></ul><blockquote><p>角色 、 行动、上下文背景、 期望</p></blockquote><ul><li>4、COAST</li></ul><blockquote><p>背景、客观、行动、场景、任务</p></blockquote><ul><li>5、CRISPE</li></ul><blockquote><p>能力、角色、洞察、陈述、个性、实验</p></blockquote><ul><li>6、RISE</li></ul><blockquote><p>角色、输入、步骤、期望</p></blockquote><ul><li>7、TRACE</li></ul><blockquote><p>任务、请求、操作、上下文、示例</p></blockquote><ul><li>8、ROSES</li></ul><blockquote><p>角色、客观、场景</p></blockquote><ul><li>9、LangGPT</li></ul><blockquote><p>高级框架：markdown语法</p><p>角色、限制、能力、工作流 …</p></blockquote><p>进阶教程：</p><p><a href="https://www.promptingguide.ai/zh">https://www.promptingguide.ai/zh</a></p><h2 id="4、第二阶段：构建自己的AI助手"><a href="#4、第二阶段：构建自己的AI助手" class="headerlink" title="4、第二阶段：构建自己的AI助手"></a>4、第二阶段：构建自己的AI助手</h2><h3 id="4-1、AI助手初识"><a href="#4-1、AI助手初识" class="headerlink" title="4.1、AI助手初识"></a>4.1、AI助手初识</h3><p>什么是AI助手？这个问题通过上一节的方法，让LLM（大模型）来回答我们：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">什么是AI助手？<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202407142355239.png" alt="image-20240708234803680"></p><p>AI助手，即是我们通过人工智能技术，来对我们生活中的各种活动和任务进行自动化处理，提高我们的办事效率。下面我们就来创建自己的智能体，学习到后面会发现，AI助手即是AI智能体，而其便是未来的发展趋势AI Agent。</p><h3 id="4-2、构建智能体-AI-助手"><a href="#4-2、构建智能体-AI-助手" class="headerlink" title="4.2、构建智能体(AI 助手)"></a>4.2、构建智能体(AI 助手)</h3><p>进入<a href="https://xinghuo.xfyun.cn/desk">星火助手中心</a>，有智能体市场，其中有各种各样的AI 智能体工具：</p><p><img src="https://codestar.top/note-image/202407142358091.png" alt="image-20240714235824232"></p><p>页面左上角<code>创建智能体</code>：</p><p><img src="https://codestar.top/note-image/202407142343271.png" alt="image-20240708235136622"></p><p>填写关于自己的智能体的信息：简单填写智能体描述，这里我将其视为精通前端知识的计算机大师。之后快速创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">你是一位出色的计算机大师，你精通前端知识，如css,html.javascript基础语言，以及精通各种前端架构，如angular、vue等。在这些方面你能够融汇计算机原理基础知识，能够将其用通俗的语言进行表述，并给出只管或简单移动的示例来描述。<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202407142342497.png" alt="image-20240709000217783"></p><p>之后进入到到只能体创建页面：</p><p><img src="https://codestar.top/note-image/202407142341126.png" alt="image-20240709000403750"></p><p>生成详细配置如下：</p><p>下面的这些配置，会自动生成，可以无需更改。下面的智能体调用及智能体特性全勾选，增加助手的能力：</p><p><img src="https://codestar.top/note-image/202407142341561.png" alt="image-20240709000921217"></p><p>这里，我制作的是一个知识助手。</p><p>完成之后，点击<code>创建并申请上架</code>：</p><p><img src="https://codestar.top/note-image/202407142340706.png" alt="image-20240709001148247"></p><p>结果对比：</p><p>优化后的结果，会考虑到描述的直白性，更容易理解：</p><p><img src="https://codestar.top/note-image/202407142340691.png" alt="image-20240709001254207"></p><p>未优化结果：</p><p>从框架全局来表述，并从框架的发展和历史以及学习方面来描述：</p><p><img src="https://codestar.top/note-image/202407142340362.png" alt="image-20240709001323982"></p><p>创建完之后，等待审核：</p><p><img src="https://codestar.top/note-image/202407142339143.png" alt="image-20240709001622324"></p><p>审核速度很快，完成后再已上架区域查看自己的智能体：</p><p><img src="https://codestar.top/note-image/202407142339496.png" alt="image-20240709001717921"></p><p>上架后，可以通过以下页面进入到对应的智能体控制台：</p><p><img src="https://codestar.top/note-image/202407142339080.png" alt="image-20240709225713188"></p><p>可以作为独立应用分享出去：</p><p><img src="https://codestar.top/note-image/202407142339262.png" alt="image-20240709230049887"></p><h2 id="5、AI-prompt工程师认证测试"><a href="#5、AI-prompt工程师认证测试" class="headerlink" title="5、AI prompt工程师认证测试"></a>5、AI prompt工程师认证测试</h2><p>认证测试地址：<a href="https://m.linklearner.com/prompt/quiz/intro">https://m.linklearner.com/prompt/quiz/intro</a></p><p>完成：nice</p><p><img src="https://codestar.top/note-image/202407142336800.png" alt="image-20240709233005414"></p><p>结果查看：<a href="https://m.linklearner.com/prompt/quiz/result">https://m.linklearner.com/prompt/quiz/result</a></p><p>查看自己的证书，嘿嘿，很棒：</p><p><img src="https://codestar.top/note-image/202407150018038.png" alt="image-20240715001805282"></p>]]></content>
    
    
    <categories>
      
      <category>AI&amp;ML</category>
      
      <category>LLM</category>
      
      <category>Certification</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datawhale</tag>
      
      <tag>LLM</tag>
      
      <tag>AI&amp;ML</tag>
      
      <tag>Certification</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pytest-allure安装之后，无法使用allure指令问题解决</title>
    <link href="/testskill/pytest-allure-install-fix.html"/>
    <url>/testskill/pytest-allure-install-fix.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、问题现象"><a href="#1、问题现象" class="headerlink" title="1、问题现象"></a>1、问题现象</h2><p>在执行<code>pip install pytest-allure</code>安装完成allure后，出现无法识别<code>allure</code>指令的情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">allure: The term &#x27;allure&#x27; is not recognized as a name of a cmdlet, function, script file, or executable program.<br>Check the spelling of the name, or if a path was included, verify that the path is correct and try again.<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405282344556.png" alt="image-20240522191407423"></p><h2 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h2><p>安装allure命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g allure-commandline --save-dev<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405282345006.png" alt="image-20240522191345993"></p><p>验证修复情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">allure --version<br></code></pre></td></tr></table></figure><p>正常看到allure版本号则恢复正常：</p><p><img src="https://codestar.top/note-image/202405282346051.png" alt="image-20240522191809181"></p><p>后面则可以通过pytest生成allure测试报告了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pytest [测试用例] -s -q --alluredir=./result<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将测试结果生成静态页面</span><br>allure serve ./result/<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405282346748.png" alt="image-20240522191326092"></p><p>参考：</p><p><a href="https://stackoverflow.com/questions/70885555/allure-report-generation-fails-with-message-allure-is-not-recognized-as-the-n">https://stackoverflow.com/questions/70885555/allure-report-generation-fails-with-message-allure-is-not-recognized-as-the-n</a></p><p><a href="https://www.npmjs.com/package/allure-commandline">https://www.npmjs.com/package/allure-commandline</a></p>]]></content>
    
    
    <categories>
      
      <category>测试技术</category>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>自动化测试</tag>
      
      <tag>pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos 7.9如何使用源码编译安装curl最新版本</title>
    <link href="/linux/compile-curl.html"/>
    <url>/linux/compile-curl.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>centos 7.9，由于系统为2017年发行，且以稳定性为主，部分工具版本较低，无法支持一些新的功能。如curl就相对较旧，默认为7.29版本，且无法从其他额外的镜像源获取到更新的版本，这就导致新的功能如<code>–-connect-to</code>参数（在7.49版本后开始支持）无法正常使用，此参数可以用来指定请求的地址。</p><p><img src="https://codestar.top/note-image/202405100039949.png" alt="image-20240509201553309"></p><p><img src="https://codestar.top/note-image/202405100038068.png" alt="image-20240509201520485"></p><h2 id="2、curl源代码下载"><a href="#2、curl源代码下载" class="headerlink" title="2、curl源代码下载"></a>2、curl源代码下载</h2><p>打开官方下载页面：<a href="https://curl.se/download.html">https://curl.se/download.html</a></p><p>找到最新的版本：</p><p><img src="https://codestar.top/note-image/202405100038041.png" alt="image-20240509201845834"></p><p>也可以下拉到package栏选择其他版本：</p><p><img src="https://codestar.top/note-image/202405100038840.png" alt="image-20240509201945187"></p><p>鼠标右键复制链接地址：</p><p><img src="https://codestar.top/note-image/202405100038423.png" alt="image-20240509202129804"></p><p>传输到Linux设备本地：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget /usr/local/src/curl https://curl.se/download/curl-8.7.1.tar.gz<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405100037821.png" alt="image-20240509202349215"></p><p><img src="https://codestar.top/note-image/202405100037305.png" alt="image-20240509203108149"></p><p>下载完成之后，对其进行解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf curl-8.7.1.tar.gz<br></code></pre></td></tr></table></figure><p>解压之后移动到对应路径：</p><p><img src="https://codestar.top/note-image/202405100037476.png" alt="image-20240509203158256"></p><h2 id="3、openssl安装"><a href="#3、openssl安装" class="headerlink" title="3、openssl安装"></a>3、openssl安装</h2><p>为了使curl能支持ssl功能，<strong>需要提前安装openssl</strong>，执行下列指令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y openssl<br></code></pre></td></tr></table></figure><h2 id="4、编译curl"><a href="#4、编译curl" class="headerlink" title="4、编译curl"></a>4、编译curl</h2><h3 id="4-1、配置编译环境"><a href="#4-1、配置编译环境" class="headerlink" title="4.1、配置编译环境"></a>4.1、配置编译环境</h3><p>在安装完成openssl之后，进入到对应curl源码目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/src/curl/curl-8.7.1<br></code></pre></td></tr></table></figure><p>执行下列指令配置编译环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置编译参数：/usr/local为指定的安装路径，--with-ssl表示需要支持ssl</span><br>./configure --prefix=/usr/local --with-ssl<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405100036249.png" alt="image-20240509204059753"></p><p>编译配置完毕执行如下：</p><p><img src="https://codestar.top/note-image/202405100018552.png" alt="image-20240510001825113"></p><p>**注：**一定要提前安装openssl，否则在配置的过程中会出现无法找到openssl的错误。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">configure: error: --with-openssl was given but OpenSSL could not be detected<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405100022371.png" alt="image-20240510002204338"></p><h3 id="4-2、编译输出二进制curl程序"><a href="#4-2、编译输出二进制curl程序" class="headerlink" title="4.2、编译输出二进制curl程序"></a>4.2、编译输出二进制curl程序</h3><p>执行下列指令编译输出执行程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br></code></pre></td></tr></table></figure><p>在完成编译环境配置后，编译执行完成后结果如下：</p><p><img src="https://codestar.top/note-image/202405100023293.png" alt="image-20240510002331180"></p><p>在这一步已经有可执行的文件或库文件，但是还未安装到系统环境中，并且不是所有的文件都需要，因此需要额外的进行安装。</p><h3 id="4-3、安装编译后的curl"><a href="#4-3、安装编译后的curl" class="headerlink" title="4.3、安装编译后的curl"></a>4.3、安装编译后的curl</h3><p>执行下列指令，将编译生成的程序和文件安装到指定的位置，这里指定的位置即为<code>./configure --prefix=/usr/local --with-ssl</code>中的<code>--prefix</code>参数指定的位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo make install<br></code></pre></td></tr></table></figure><p>安装完成如下：</p><p><img src="https://codestar.top/note-image/202405100030985.png" alt="image-20240510003031269"></p><h3 id="4-4、编译完成检查"><a href="#4-4、编译完成检查" class="headerlink" title="4.4、编译完成检查"></a>4.4、编译完成检查</h3><p>检查编译完成的路径内容&#x2F;usr&#x2F;local，是否存在更新：有三项更新</p><ul><li>库文件在对应的lib路径，头文件在include路径，执行文件在bin路径</li></ul><p><img src="https://codestar.top/note-image/202405100032926.png" alt="image-20240510003206371"></p><p>进入到bin路径下查看：含更新后的可执行程序</p><p><img src="https://codestar.top/note-image/202405100032152.png" alt="image-20240510003253786"></p><h3 id="4-5、验证安装"><a href="#4-5、验证安装" class="headerlink" title="4.5、验证安装"></a>4.5、验证安装</h3><p>最后，在系统的任意位置，执行<code>curl --version</code>检查当前的版本是否为我们编译安装的最新版：</p><p><img src="https://codestar.top/note-image/202405100035881.png" alt="image-20240510003520445"></p><p>看到这里，明显成功安装了，可以正常使用最新版本的curl工具了，nice。</p>]]></content>
    
    
    <categories>
      
      <category>Centos</category>
      
      <category>编译基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Centos</tag>
      
      <tag>编译基础</tag>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记本安装Centos 7.9完整安装流程及踩坑记录</title>
    <link href="/linux/install-centos-7.9.html"/>
    <url>/linux/install-centos-7.9.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、Centos-7-9镜像下载"><a href="#1、Centos-7-9镜像下载" class="headerlink" title="1、Centos 7.9镜像下载"></a>1、Centos 7.9镜像下载</h2><p>阿里云镜像源可以下载对应ISO镜像文件：<a href="https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/">https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/</a></p><p><img src="https://codestar.top/note-image/202404131105693.png" alt="image-20240413110555617"></p><p>下载版本推荐 centos 7.9，centos8.x在2022年后不再维护。</p><h2 id="2、制作centos-7-9-U盘启动盘"><a href="#2、制作centos-7-9-U盘启动盘" class="headerlink" title="2、制作centos 7.9 U盘启动盘"></a>2、制作centos 7.9 U盘启动盘</h2><h3 id="2-1、下载BalenaEtcher"><a href="#2-1、下载BalenaEtcher" class="headerlink" title="2.1、下载BalenaEtcher"></a>2.1、下载BalenaEtcher</h3><p>进入官网下载启动盘制作工具BalenaEtcher，选择便携版下载：<a href="https://etcher.balena.io/#download-etcher">https://etcher.balena.io/#download-etcher</a></p><p><img src="https://codestar.top/note-image/202405041622642.png" alt="image-20240504162213231"></p><p>下载完成之后，点击<code>balenaEtcher-Portable-1.7.9.exe</code>进入应用。</p><h3 id="2-2、制作U盘启动盘"><a href="#2-2、制作U盘启动盘" class="headerlink" title="2.2、制作U盘启动盘"></a>2.2、制作U盘启动盘</h3><p>进入BalenaEtcher应用，选择Centos镜像，选择刷入的U盘位置。点击<code>Flash</code>开始制作U盘启动盘：</p><p><img src="https://codestar.top/note-image/202404142114755.png" alt="image-20240414211428703"></p><p>刷入完成时如下：</p><p><img src="https://codestar.top/note-image/202404142112029.png" alt="image-20240414211244920"></p><h2 id="3、安装系统"><a href="#3、安装系统" class="headerlink" title="3、安装系统"></a>3、安装系统</h2><h3 id="3-1、PC设置U盘启动"><a href="#3-1、PC设置U盘启动" class="headerlink" title="3.1、PC设置U盘启动"></a>3.1、PC设置U盘启动</h3><p>这里以戴尔笔记本为例，PC启动按<strong>F12</strong>进入启动盘选择，在UEFI选项中选择USB设备，选中后enter回车，启动安装：</p><p><img src="https://codestar.top/note-image/202405041637063.png" alt="image-20240504163748612"></p><p>启动后，选择<code>Install CentOS 7</code>：</p><p><img src="https://codestar.top/note-image/202405041642340.png" alt="image-20240504164239214"></p><p>正常情况下会进入安装界面，加载正常：</p><p><img src="https://codestar.top/note-image/202405041647191.png" alt="image-20240504164743762"></p><p>**注：**此处概率性会遇到<code>nouveau 0000:02:00.0: DRM: Pointer to TMDs table inualid</code>问题，此问题大概率是安装的镜像文件在加载过程中损坏了，我尝试解决的方法时重新制作U盘启动盘，参考本文第二节。基于此原因，后续的配置尽可能不出错，否则很麻烦，如果有其他更好的方法欢迎大家留言。异常加载情况如下：</p><p><img src="https://codestar.top/note-image/202405041746286.png" alt="image-20240504174624358"></p><h3 id="3-2、安装过程及配置"><a href="#3-2、安装过程及配置" class="headerlink" title="3.2、安装过程及配置"></a>3.2、安装过程及配置</h3><p>下一步进入安装配置页面：</p><ul><li>选择语言</li></ul><p><img src="https://codestar.top/note-image/202405041700616.png" alt="image-20240504170046825"></p><ul><li>选择安装的软件环境</li></ul><p>在安装信息摘要页面，点击<code>软件选择</code>，选择最小安装：</p><p><img src="https://codestar.top/note-image/202405041702661.png" alt="image-20240504170214120"></p><p><strong>注：</strong> 这里不要选择GNOME桌面，选择最小安装，避免后续出现启动过程一直卡在许可证授权界面，猜测为GNOME适配的问题。</p><ul><li>安装位置选择</li></ul><p>在安装信息摘要页面，点击<code>安装位置</code>，选择系统安装盘：</p><p><img src="https://codestar.top/note-image/202405041707900.png" alt="image-20240504170719517"></p><p>这里会出现格式化磁盘的提醒，按照引导回收磁盘空间：</p><p><img src="https://codestar.top/note-image/202405041709067.png" alt="image-20240504170944784"></p><ul><li>配置网络连接</li></ul><p>在安装信息摘要页面，点击<code>网络和主机名</code>，进入配置页面：连接WIFI或有线网，主机名称看自己爱好修改。配置完成后点击左上角<code>完成</code></p><p><img src="https://codestar.top/note-image/202405041727485.png" alt="image-20240504172718863"></p><ul><li>进入安装流程</li></ul><p>在配置完上述内容之后，可以开始安装过程了，直接点击右下角<code>开始安装</code>：</p><p><img src="https://codestar.top/note-image/202405041720584.png" alt="image-20240504172024510"></p><ul><li>配置账户及密码</li></ul><p>进入安装页面，配置root账户密码，以及创建新的登录账户：</p><p><img src="https://codestar.top/note-image/202405041722133.png" alt="image-20240504172203918"></p><p>设置root用户密码：</p><p><img src="https://codestar.top/note-image/202405041734598.png" alt="image-20240504173412571"></p><p>创建新的账户，名称自定义，将其设置为管理员并开启密码校验：</p><p><img src="https://codestar.top/note-image/202405041732006.png" alt="image-20240504173246264"></p><p>配置完成后，接下来就是等待设备安装完成了：</p><p><img src="https://codestar.top/note-image/202405041736011.png" alt="image-20240504173644391"></p><h3 id="3-3、安装完启动"><a href="#3-3、安装完启动" class="headerlink" title="3.3、安装完启动"></a>3.3、安装完启动</h3><ul><li>安装完成后启动PC</li></ul><p>重新启动，自动加载Centos：</p><p><img src="https://codestar.top/note-image/202405041734159.png" alt="image-20240504173428768"></p><p>进入命令行界面，登录后即可正常使用了：</p><p><img src="https://codestar.top/note-image/202405041721083.png" alt="image-20240504172105796"></p><h2 id="4、安装图形界面"><a href="#4、安装图形界面" class="headerlink" title="4、安装图形界面"></a>4、安装图形界面</h2><p>执行下列指令进行安装GNOME图形界面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update -y<br>yum grouplist<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装GNOME图形界面</span><br>yum groupinstall -y &quot;GNOME Desktop&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装完成后，修改默认启动方式为图形化界面</span><br>systemctl set-default graphical.target <br><span class="hljs-meta prompt_"># </span><span class="language-bash">恢复为命令模式</span><br>systemctl set-default multi-user.target<br></code></pre></td></tr></table></figure><p>安装完成后，<code>reboot</code>重启系统生效图形界面，登录账户，配置GNOME初始项，即可正常开始使用了：</p><p><img src="https://codestar.top/note-image/202405041741836.png" alt="image-20240504174144660"></p><h2 id="5、开启SSH服务"><a href="#5、开启SSH服务" class="headerlink" title="5、开启SSH服务"></a>5、开启SSH服务</h2><p>安装完成GNOME桌面后，SSH服务会自动开启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查SSH状态</span><br>systemctl status sshd<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405041744198.png" alt="image-20240504174415468"></p><p>如果未开启，手动执行下列指令开启SSH：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start sshd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Centos</category>
      
      <category>系统安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos 7.9安装node.js完整过程及踩坑记录</title>
    <link href="/linux/install-centos-7.9-nodejs.html"/>
    <url>/linux/install-centos-7.9-nodejs.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、node-js下载"><a href="#1、node-js下载" class="headerlink" title="1、node.js下载"></a>1、node.js下载</h2><p>进入node.js仓库地址：<a href="https://nodejs.org/download/release/v16.14.2/node-v16.14.2-linux-x64.tar.gz">https://nodejs.org/download/release/v16.14.2/node-v16.14.2-linux-x64.tar.gz</a></p><p>选择Linux X64版本安装包地址，复制对应链接地址：</p><p><img src="https://codestar.top/note-image/202405041518265.png" alt="image-20240408155657324"></p><p>获取到对应的安装包，在centos中执行下列指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">wget https://nodejs.org/download/release/v16.14.2/node-v16.14.2-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405041518630.png" alt="image-20240408150531305"></p><h2 id="2、安装包解压"><a href="#2、安装包解压" class="headerlink" title="2、安装包解压"></a>2、安装包解压</h2><p>新建一个路径<code>/usr/local/softwares/node.js</code>，将TAR.GZ格式安装包进行解压，具体路径自定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf node-v16.14.2-linux-x64.tar.gz -C /usr/local/softwares/node.js<br></code></pre></td></tr></table></figure><h2 id="3、修改环境变量"><a href="#3、修改环境变量" class="headerlink" title="3、修改环境变量"></a>3、修改环境变量</h2><p>需要将node.js的bin文件路径添加到系统环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br></code></pre></td></tr></table></figure><p>加入对应路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export NODE_HOME=/usr/local/softwares/node.js/node-v16.14.2-linux-x64<br>export PATH=$NODE_HOME/bin:$PATH<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405041519925.png" alt="image-20240408155514649"></p><p>生效环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><p>执行<code>node -v</code>检查安装：20.12.1版本安装会报下面的错误，版本太新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZwz989evjoe57f1d0klxcZ bin]# node -v<br>node: /lib64/libm.so.6: version `GLIBC_2.27&#x27; not found (required by node)<br>node: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20&#x27; not found (required by node)<br>node: /lib64/libstdc++.so.6: version `CXXABI_1.3.9&#x27; not found (required by node)<br>node: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21&#x27; not found (required by node)<br>node: /lib64/libc.so.6: version `GLIBC_2.28&#x27; not found (required by node)<br>node: /lib64/libc.so.6: version `GLIBC_2.25&#x27; not found (required by node)<br></code></pre></td></tr></table></figure><p>**报错的原因：**GCC版本可能相对较低，与node.js新的版本不兼容</p><blockquote><p>由于CentOS 7.9 默认仓库提供的GCC版本可能相对较低，因为这个版本的系统主要是为了稳定性考虑，通常不会包含最新的开发工具链。CentOS 7.9 默认安装的GCC版本是4.8.x系列,make是3.x，这也就导致node.js新的版本不兼容。考虑到系统稳定性，还是选择降低node.js版本，或者更换未docker版本，而不是升级gcc及make。</p></blockquote><p>这里选择<strong>更换16.14.2版本验证，能够正常执行</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405041519986.png" alt="image-20240408155859247"></p><p>参考：</p><p><a href="https://juejin.cn/post/7163899309425950751">https://juejin.cn/post/7163899309425950751</a></p><p><a href="https://segmentfault.com/q/1010000044525195">https://segmentfault.com/q/1010000044525195</a></p>]]></content>
    
    
    <categories>
      
      <category>Centos</category>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Centos</tag>
      
      <tag>node.js</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos 7.9 配置VNCServer实现远程vnc连接</title>
    <link href="/linux/install-centos-7.9-vnc.html"/>
    <url>/linux/install-centos-7.9-vnc.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、Centos安装图形界面"><a href="#1、Centos安装图形界面" class="headerlink" title="1、Centos安装图形界面"></a>1、Centos安装图形界面</h2><p>Centos图形界面的安装有下面两种方法，按需选择：</p><h3 id="1-1、安装X-Windows-System图形界面"><a href="#1-1、安装X-Windows-System图形界面" class="headerlink" title="1.1、安装X Windows System图形界面"></a>1.1、安装X Windows System图形界面</h3><p>X Window System为底层图形子系统，适配大多数的Linux及unix系统，兼容性更广。其主要是管理硬件设备与图形环境之间的交互，如显示、用户输入。其他窗口布局、装饰或用户交互元素都不包括在其中，为基础的一个图形系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update -y<br>yum grouplist<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装图形化界面</span><br>yum groups install &quot;X Window System&quot;<br>yum groups install &quot;MATE Desktop&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装完成后，修改默认启动方式为图形化界面</span><br>systemctl set-default graphical.target<br><span class="hljs-meta prompt_"># </span><span class="language-bash">恢复为命令模式</span><br>systemctl set-default multi-user.target<br></code></pre></td></tr></table></figure><p>安装完成后执行<code>reboot</code>重启设备生效图形界面。</p><h3 id="1-2、安装GNOME图形界面"><a href="#1-2、安装GNOME图形界面" class="headerlink" title="1.2、安装GNOME图形界面"></a>1.2、安装GNOME图形界面</h3><p>GNOME为一个完整的桌面系统，基于X Window System构建，包含一套完整的界面元素，窗口、图标、工具栏、文件管理器等，同时继承了各种应用程序和工具，对用户的交互和使用更为的友好：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update -y<br>yum grouplist<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装GNOME图形界面</span><br>yum groupinstall -y &quot;GNOME Desktop&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装完成后，修改默认启动方式为图形化界面</span><br>systemctl set-default graphical.target <br><span class="hljs-meta prompt_"># </span><span class="language-bash">恢复为命令模式</span><br>systemctl set-default multi-user.target<br></code></pre></td></tr></table></figure><p>安装完成后执行<code>reboot</code>重启设备生效图形界面。</p><h2 id="2、VNC-SERVER配置"><a href="#2、VNC-SERVER配置" class="headerlink" title="2、VNC SERVER配置"></a>2、VNC SERVER配置</h2><h3 id="2-1、VNC-SERVER安装"><a href="#2-1、VNC-SERVER安装" class="headerlink" title="2.1、VNC SERVER安装"></a>2.1、VNC SERVER安装</h3><p>安装vnc server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install tigervnc-server -y<br></code></pre></td></tr></table></figure><p>安装完成如下：</p><p><img src="https://codestar.top/note-image/202405041504615.png" alt="image-20240410143230601"></p><h3 id="2-2、VNC-SERVER配置"><a href="#2-2、VNC-SERVER配置" class="headerlink" title="2.2、VNC SERVER配置"></a>2.2、VNC SERVER配置</h3><h4 id="1）创建vnc配置文件"><a href="#1）创建vnc配置文件" class="headerlink" title="1）创建vnc配置文件"></a>1）创建vnc配置文件</h4><p>拷贝一个服务设置的模板：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> 一个用户对应1个配置文件，当需要3用户时，上述指令需要执行3次，vncserver@:1.service文件序号迭代至vncserver@:3.service。这里的序号也对应后续连接的端口序号。</p><h4 id="2）修改配置文件内容"><a href="#2）修改配置文件内容" class="headerlink" title="2）修改配置文件内容"></a>2）修改配置文件内容</h4><p>使用文本编辑器修改配置文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/systemd/system/vncserver@:1.service<br></code></pre></td></tr></table></figure><p>默认配置内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Remote desktop service (VNC)<br>After=syslog.target network.target<br><br>[Service]<br>Type=simple<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Clean any existing files <span class="hljs-keyword">in</span> /tmp/.X11-unix environment</span><br>ExecStartPre=/bin/sh -c &#x27;/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :&#x27;<br>ExecStart=/usr/bin/vncserver_wrapper &lt;USER&gt; %i<br>ExecStop=/bin/sh -c &#x27;/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :&#x27;<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p><strong>这里需要修改三处：</strong></p><ul><li>1、[Service]类型</li></ul><p>修改为forking，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Service]<br>Type=forking<br></code></pre></td></tr></table></figure><ul><li>2、ExecStart值</li></ul><p>将其中的<USER>替换为自己当前的用户名，如下这里以root用户为例，其他用户改为对应用户名即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ExecStart=/sbin/runuser -l root -c &quot;/usr/bin/vncserver %i&quot;<br></code></pre></td></tr></table></figure><ul><li>3、添加PIDFile</li></ul><p>这里区分root用户和非root用户。</p><p>root用户配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PIDFile=/root/.vnc/%H%i.pid<br></code></pre></td></tr></table></figure><p>非root用户配置如下，以用户testvnc示例，配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PIDFile=/home/testvnc/.vnc/%H%i.pid<br></code></pre></td></tr></table></figure><h4 id="3）完整配置文件参考"><a href="#3）完整配置文件参考" class="headerlink" title="3）完整配置文件参考"></a>3）完整配置文件参考</h4><p>完整修改后的root用户配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Remote desktop service (VNC)<br>After=syslog.target network.target<br><br>[Service]<br>Type=forking<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Clean any existing files <span class="hljs-keyword">in</span> /tmp/.X11-unix environment</span><br>ExecStartPre=/bin/sh -c &#x27;/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :&#x27;<br>ExecStart=/sbin/runuser -l root -c &quot;/usr/bin/vncserver %i&quot;<br>PIDFile=/root/.vnc/%H%i.pid<br>ExecStop=/bin/sh -c &#x27;/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :&#x27;<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>非root用户完整配置文件，以用户testvnc示例，配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Remote desktop service (VNC)<br>After=syslog.target network.target<br><br>[Service]<br>Type=forking<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Clean any existing files <span class="hljs-keyword">in</span> /tmp/.X11-unix environment</span><br>ExecStartPre=/bin/sh -c &#x27;/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :&#x27;<br>ExecStart=/sbin/runuser -l testvnc -c &quot;/usr/bin/vncserver %i&quot;<br>PIDFile=/home/testvnc/.vnc/%H%i.pid<br>ExecStop=/bin/sh -c &#x27;/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :&#x27;<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>配置完成后，重启systemd：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload<br></code></pre></td></tr></table></figure><h3 id="2-3、设置vnc密码"><a href="#2-3、设置vnc密码" class="headerlink" title="2.3、设置vnc密码"></a>2.3、设置vnc密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">切换至对应用户，配置VNC密码。不同用户的密码不同，均需要单独配置。</span><br>su &lt;USER&gt;<br>vncpasswd<br></code></pre></td></tr></table></figure><p>设置完密码后配置只读密码选择n，不进行配置：</p><p><img src="https://codestar.top/note-image/202405041416937.png" alt="image-20240504141608621"></p><h3 id="2-4、配置防火墙"><a href="#2-4、配置防火墙" class="headerlink" title="2.4、配置防火墙"></a>2.4、配置防火墙</h3><p>配置防火墙来让 VNC 服务正常工作，将vnc服务进程添加到白名单中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo firewall-cmd --permanent --add-service vnc-server<br>sudo systemctl restart firewalld.service<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405041417768.png" alt="image-20240504141751401"></p><h3 id="2-5、启动vnc服务"><a href="#2-5、启动vnc服务" class="headerlink" title="2.5、启动vnc服务"></a>2.5、启动vnc服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置开机启动</span><br>systemctl enable vncserver@:1.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动vnc server</span><br>systemctl start vncserver@:1.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看vnc server状态</span><br>systemctl status vncserver@:1.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查vnc进程</span><br>ps -ef | grep vnc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看服务监听的端口</span><br>netstat -lnpt|grep Xvnc<br></code></pre></td></tr></table></figure><p>可以查看到 root 用户的连接序号为 1，对应的实际端口是 5901。可以使用 IP 地址和序号进行连接，例如 <code>192.168.1.1:1</code>，这里的序号1并非指服务器的实际端口号，而是表示 VNC 连接的顺序，从 1 开始编号。实际上，VNC 服务本身默认使用 5900 端口，所以第一个连接的端口是 5901（5900+1）</p><p><img src="https://codestar.top/note-image/202405041429906.png" alt="image-20240504142920978"></p><p><img src="https://codestar.top/note-image/202405041431609.png" alt="image-20240504143154448"></p><h2 id="3、vnc-viewer连接"><a href="#3、vnc-viewer连接" class="headerlink" title="3、vnc viewer连接"></a>3、vnc viewer连接</h2><h3 id="3-1、vnc-viewer下载"><a href="#3-1、vnc-viewer下载" class="headerlink" title="3.1、vnc viewer下载"></a>3.1、vnc viewer下载</h3><p>官方下载地址：<a href="https://downloads.realvnc.com/download/file/viewer.files/VNC-Viewer-7.10.0-Windows-64bit.exe">https://downloads.realvnc.com/download/file/viewer.files/VNC-Viewer-7.10.0-Windows-64bit.exe</a></p><p>推荐使用便携版：</p><p><img src="https://codestar.top/note-image/202405041505522.png" alt="image-20240410142214503"></p><p>下载完成后，文件名称类似如下<code>VNC-Viewer-7.10.0-Windows-64bit.exe</code>，双击exe文件可直接使用。</p><h3 id="3-2、连接vnc-server"><a href="#3-2、连接vnc-server" class="headerlink" title="3.2、连接vnc server"></a>3.2、连接vnc server</h3><p>进入RealVNC Viewer后，左上角<code>File</code>–&gt;<code>New connection</code>添加新的连接：</p><p><img src="https://codestar.top/note-image/202405041404619.png" alt="image-20240504140433869"></p><p>VNC Server地址，配置为设备IP:1，1对应的为连接序号。实际使用端口5901（IP:5901）同样能够正常连接：</p><p><img src="https://codestar.top/note-image/202405041428910.png" alt="image-20240504142816828"></p><p>未加密连接提示，点击continue即可：</p><p><img src="https://codestar.top/note-image/202405041426104.png" alt="image-20240504142556800"></p><p>填入之前使用<code>vncpasswd</code>配置的密码：</p><p><img src="https://codestar.top/note-image/202405041426405.png" alt="image-20240504142630984"></p><p>连接成功，输入账户登录密码，即可正常访问桌面环境了：</p><p><img src="https://codestar.top/note-image/202405041427170.png" alt="image-20240504142721496"></p><p>参考：<a href="https://linux.cn/article-5335-1.html">https://linux.cn/article-5335-1.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Centos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Centos</tag>
      
      <tag>VNC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux变量的认识及环境变量配置详解</title>
    <link href="/linux/env-variables-and-config.html"/>
    <url>/linux/env-variables-and-config.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、变量的划分"><a href="#1、变量的划分" class="headerlink" title="1、变量的划分"></a>1、变量的划分</h2><p>在Linux中，变量的划分有很多种，其中根据变量的<strong>作用范围（作用域）进行划分</strong>的有四类，分别是局部变量、全局变量、环境变量、内置变量。下面来具体讨论，本文以环境变量的讨论为主，其他变量简要说明。</p><h2 id="2、局部变量"><a href="#2、局部变量" class="headerlink" title="2、局部变量"></a>2、局部变量</h2><p>局部变量，使用local关键字定义的变量，通常在定义它的脚本或命令中可见，但仅在定义的函数中可使用，脚本或命令中的其他函数不可使用，除非被明确传递，在其子脚本或子进程中也不可用。通常在函数中使用关键字<code>local</code>来定义，示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">function myFunction() &#123;<br>    local localVar=&quot;a local var&quot;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、全局变量"><a href="#3、全局变量" class="headerlink" title="3、全局变量"></a>3、全局变量</h2><p>全局变量，未使用 <code>local</code> 关键字的变量都是全局变量，在定义的脚本及命令中可见，一般在函数外定义，在整个脚本及命令中全局可使用。但在不使用<code>export</code>导出的情况下，无法在子脚本中可见，即切换进程后无法使用：</p><ul><li>定义全局变量，示例：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">GlobalVar1=&quot;A global VAR1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换用户查看</span><br>su other_user<br>echo $GlobalVar1<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405032227077.png" alt="image-20240503222755932"></p><p>切换进程后，无法查看到对应的全局变量，因为没通过<code>export</code>将其导出，无法正常的访问。</p><ul><li>定义全局变量，并将其<code>export</code>导出，示例：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">export GlobalVar2=&quot;A global VAR2&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换用户查看</span><br>su other_user<br>echo $GlobalVar2<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202405032227500.png" alt="image-20240503222740097"></p><p>切换进程后，能够正常的访问到相应的全局变量，其通过<code>export</code>导出，使其在子脚本或命令中可见，因此能够正常访问到。</p><p><strong>注意：</strong> 全局变量一般定义为小写字母，当定义为大写字母时，默认其为全局配置，即环境变量，这是一个通用的约定，避免变量的调用冲突。</p><h2 id="4、环境变量"><a href="#4、环境变量" class="headerlink" title="4、环境变量"></a>4、环境变量</h2><h3 id="4-1、概述"><a href="#4-1、概述" class="headerlink" title="4.1、概述"></a>4.1、概述</h3><p>环境变量是在Linux操作系统中用来指定操作系统运行环境的一些参数的一种机制。它们是动态命名的值，通常名称用大写字母进行定义，由操作系统或用户设置。通常情况下会存放重要的配置信息，如配置文件路径、用户信息、网络设置参数等。常见的环境变量有 <code>PATH</code>, <code>HOME</code>, <code>USER</code> 等，下面来详细讨论环境变量的不同配置方法及其作用域。</p><h3 id="4-2、配置临时环境变量"><a href="#4-2、配置临时环境变量" class="headerlink" title="4.2、配置临时环境变量"></a>4.2、配置临时环境变量</h3><p>使用 <code>export</code> 命令来设置临时环境变量，示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export TEST=&quot;$TEST:/usr/local/bin&quot;<br></code></pre></td></tr></table></figure><p>执行完后通过<code>echo $PATH</code>查看，仅在当前窗口生效，关闭窗口或新建其他窗口，无法查看到之前设置的临时环境变量：</p><p><img src="https://codestar.top/note-image/202405032259194.png" alt="image-20240503225912798"></p><p>**作用范围：**仅当前用户，当前窗口。</p><p>**注意：**与全局变量中使用<code>export</code>导出变量效果类似，差别在于大小写。</p><h3 id="4-3、配置永久环境变量"><a href="#4-3、配置永久环境变量" class="headerlink" title="4.3、配置永久环境变量"></a>4.3、配置永久环境变量</h3><h4 id="4-3-1、用户级配置文件"><a href="#4-3-1、用户级配置文件" class="headerlink" title="4.3.1、用户级配置文件"></a>4.3.1、用户级配置文件</h4><p>用户级配置文件，作用范围仅为单个用户的账户，只有当该用户登录shell或启用新的shell面板时，配置内容才会生效。提供给不同用户可以灵活配置各自的工作环境，下面是具体的用户配置方法：</p><h5 id="1）配置方法一：-bashrc文件"><a href="#1）配置方法一：-bashrc文件" class="headerlink" title="1）配置方法一：~&#x2F;.bashrc文件"></a>1）配置方法一：~&#x2F;.bashrc文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.bashrc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">内容末行添加环境变量内容：完成后wq保存并关闭文件</span><br>export TEST=&quot;$TEST:/usr/local/bin&quot;<br></code></pre></td></tr></table></figure><p>适用于当前登录用户，用于非登录 shell，即在用户登录后启动的shell中生效或新的终端窗口或新的shell脚本。</p><p>**生效方法：**使用<code>source ~/.bashrc</code>生效配置，并重新打开新的终端，即刻生效。</p><p>**用户范围：**当前用户，新建窗口&amp;刷新变量后的窗口。</p><h5 id="2）配置方法二：-profile文件"><a href="#2）配置方法二：-profile文件" class="headerlink" title="2）配置方法二：~&#x2F;.profile文件"></a>2）配置方法二：~&#x2F;.profile文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">内容末行添加环境变量内容：完成后wq保存并关闭文件</span><br>export TEST=&quot;$TEST:/usr/local/bin&quot;<br></code></pre></td></tr></table></figure><p>适用于当前登录用户，登录型shell，即登录过程中进行配置生效。</p><p>**生效方法：**使用<code>source ~/.profile</code>生效配置，并重新打开新的终端，即刻生效。</p><p>**用户范围：**当前用户，新建窗口&amp;刷新变量后的窗口。</p><h5 id="3）配置方法三：-bash-profile文件"><a href="#3）配置方法三：-bash-profile文件" class="headerlink" title="3）配置方法三：~&#x2F;.bash_profile文件"></a>3）配置方法三：~&#x2F;.bash_profile文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.bash_profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">内容末行添加环境变量内容：完成后wq保存并关闭文件</span><br>export TEST=&quot;$TEST:/usr/local/bin&quot;<br></code></pre></td></tr></table></figure><p>适用于当前登录用户，登录型shell，即登录过程中进行配置生效。与<code>~/.profile</code>作用范围相同，但生效的优先级高于<code>~/.profile</code>文件</p><p>**生效方法：**使用<code>source ~/.profile</code>生效配置，并重新打开新的终端，即刻生效。</p><p>**用户范围：**当前用户，新建窗口&amp;刷新变量后的窗口。</p><h4 id="4-3-2、系统级配置文件"><a href="#4-3-2、系统级配置文件" class="headerlink" title="4.3.2、系统级配置文件"></a>4.3.2、系统级配置文件</h4><p>系统级配置文件，影响范围为整个系统，所有的用户账户，无论是哪一位用户登录均可使用当前配置的系统环境变量内容，作用在提供一套标准的用户环境，保持系统环境一致性。同时系统级配置存在权限控制，仅有管理员可以进行配置，加强了环境管理。下面是不同的系统级配置的方法：</p><h5 id="1）配置方法一：-etc-environment文件"><a href="#1）配置方法一：-etc-environment文件" class="headerlink" title="1）配置方法一：&#x2F;etc&#x2F;environment文件"></a>1）配置方法一：&#x2F;etc&#x2F;environment文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/environment<br><span class="hljs-meta prompt_"># </span><span class="language-bash">内容末行添加环境变量内容：完成后wq保存并关闭文件</span><br>TEST=&quot;$TEST:/usr/local/bin&quot;<br></code></pre></td></tr></table></figure><p>这是一个简单的键值对文件，用于设置系统级环境变量。这里设置的变量对所有用户有效。这里由于使用键值对存储，无需使用export关键字。</p><p>**生效方法：**系统重启，或用户注销重新登录</p><p>**用户范围：**系统所有用户</p><h5 id="2）配置方法二：-etc-profile文件"><a href="#2）配置方法二：-etc-profile文件" class="headerlink" title="2）配置方法二：&#x2F;etc&#x2F;profile文件"></a>2）配置方法二：&#x2F;etc&#x2F;profile文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">内容末行添加环境变量内容：完成后wq保存并关闭文件</span><br>export TEST=&quot;$TEST:/usr/local/bin&quot;<br></code></pre></td></tr></table></figure><p>这是全系统的登录脚本，当任何用户登录时运行，登录过程中进行配置生效。</p><p>**生效方法：**系统重启，或用户注销重新登录</p><p>**用户范围：**系统所有用户</p><h5 id="3）配置方法三：-etc-bashrc文件"><a href="#3）配置方法三：-etc-bashrc文件" class="headerlink" title="3）配置方法三：&#x2F;etc&#x2F;bashrc文件"></a>3）配置方法三：&#x2F;etc&#x2F;bashrc文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/bashrc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">内容末行添加环境变量内容：完成后wq保存并关闭文件</span><br>export TEST=&quot;$TEST:/usr/local/bin&quot;<br></code></pre></td></tr></table></figure><p>适用于所有用户的 Bash 配置，用于非登录 shell，即在用户登录后启动的shell中生效或新的终端窗口或新的shell脚本。</p><p>**生效方法：**系统重启，或用户注销重新登录。针对当前窗口可以使用<code>source /etc/bashrc</code>来生效配置。</p><p>**用户范围：**系统所有用户</p><h4 id="4-3-3、-etc-profile-d-配置路径"><a href="#4-3-3、-etc-profile-d-配置路径" class="headerlink" title="4.3.3、&#x2F;etc&#x2F;profile.d&#x2F;配置路径"></a>4.3.3、&#x2F;etc&#x2F;profile.d&#x2F;配置路径</h4><p>在Centos 7.9中，有<code>/etc/profile.d/</code>路径用来存放自定义脚本，这些脚本会在登录时自动运行，可以通过该机制，创建shell脚本来配置环境变量，如<code>setenv.sh</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>export TEST=&quot;$TEST:/usr/local/bin&quot;<br></code></pre></td></tr></table></figure><p>之后，赋予该脚本执行权限，即可在每次登录时，使用特定的环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x /etc/profile.d/setenv.sh<br></code></pre></td></tr></table></figure><p>由于是在系统级路径下进行配置，其实整个过程，也相当于是系统级的一个环境变量配置。这个路径下的脚本，所有用户登录都会执行。</p><p>**生效方法：**系统重启，或用户注销重新登录</p><p>**用户范围：**系统所有用户</p><h3 id="4-3、查看环境变量"><a href="#4-3、查看环境变量" class="headerlink" title="4.3、查看环境变量"></a>4.3、查看环境变量</h3><ul><li>1、<code>printenv</code> 命令</li></ul><p>可以打印部分或全部环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">打印全部环境变量</span><br>printenv<br><span class="hljs-meta prompt_"># </span><span class="language-bash">打印PATH环境变量</span><br>printenv PATH<br></code></pre></td></tr></table></figure><ul><li>2、<code>env</code>命令</li></ul><p><code>env</code> 命令类似于 <code>printenv</code>，但通常用于在修改后的环境中运行程序，不带参数时与<code>printenv</code>等价。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">打印全部环境变量</span><br>env<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在新环境变量中运行程序</span><br>env test.sh<br></code></pre></td></tr></table></figure><ul><li>3、<code>echo</code>命令</li></ul><p>使用 <code>echo</code> 命令可以显示一个特定环境变量的值，可用于快速检查一个变量的修改是否生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $PATH<br></code></pre></td></tr></table></figure><ul><li>4、<code>set</code>命令</li></ul><p><code>set</code> 命令可以显示局部和环境变量以及 shell 函数，其打印的信息比<code>printenv</code>更多，但不推荐使用，因为其包含的内容不只是环境变量，结果会更杂乱。</p><h2 id="5、内置变量"><a href="#5、内置变量" class="headerlink" title="5、内置变量"></a>5、内置变量</h2><p>由 shell （比如 Bash Shell）本身预定义的变量称之为内置变量，非用户自定义。这些内置变量提供了关于系统环境和 shell 自身运行状态的重要信息，用户无法创建新的内置变量。一般情况下不允许用户修改内置变量，仅可读取，常见的内置变量有下面这些：</p><table><thead><tr><th align="center">内置变量</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>HOME</code></td><td align="center">当前用户的主目录路径。</td></tr><tr><td align="center"><code>PWD</code></td><td align="center">当前工作目录的路径。</td></tr><tr><td align="center"><code>USER</code></td><td align="center">当前登录的用户名。</td></tr><tr><td align="center"><code>BASH_VERSION</code></td><td align="center">当前运行的 Bash 版本信息。</td></tr><tr><td align="center"><code>PATH</code></td><td align="center">系统查找命令的目录列表。</td></tr><tr><td align="center"><code>RANDOM</code></td><td align="center">每次引用时生成的随机整数。</td></tr><tr><td align="center"><code>UID</code></td><td align="center">当前用户的用户ID。</td></tr></tbody></table><p>使用内置变量示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;Your home directory is $HOME&quot;<br>echo &quot;You are logged in as $USER&quot;<br></code></pre></td></tr></table></figure><h2 id="6、参考"><a href="#6、参考" class="headerlink" title="6、参考"></a>6、参考</h2><p><a href="https://juejin.cn/post/6844904173775880199">https://juejin.cn/post/6844904173775880199</a></p><p><a href="https://zhuanlan.zhihu.com/p/566600783">https://zhuanlan.zhihu.com/p/566600783</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>bash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>bash</tag>
      
      <tag>环境变量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO：站点sitemap.xml提交后打开异常问题解决</title>
    <link href="/website/hexo-set-sitemap-xml.html"/>
    <url>/website/hexo-set-sitemap-xml.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、sitemap-xml打开异常"><a href="#1、sitemap-xml打开异常" class="headerlink" title="1、sitemap.xml打开异常"></a>1、sitemap.xml打开异常</h2><p>打开sitemap.xml站点地图，出现下列错误：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">This page contains the following errors:<br>error on line 14 at column 50: EntityRef: expecting &#x27;;&#x27;<br>Below is a rendering of the page up to the first error.<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231120010159237.png" alt="image-20231120010159237"></p><p><code>sitemap.xml</code>无法打开，导致无法通过站点地图提交内容到搜索引擎。</p><h2 id="2、问题原因"><a href="#2、问题原因" class="headerlink" title="2、问题原因"></a>2、问题原因</h2><p>根据提示的错误位置<code>line 14 at column 50</code>找到了下面的代码位置，找到对应的字符为<code>&amp;</code>符号，报错的原因就在这：</p><p><img src="https://codestar.top/note-image/image-20231120005048137.png" alt="image-20231120005048137"></p><p>对应的文件存放路径为：</p><p><img src="https://codestar.top/note-image/image-20231120005157166.png" alt="image-20231120005157166"></p><p>由于在HTML中这个符号是特殊符号，不能直接使用，直接使用会出现编码错误。</p><h2 id="3、解决方法"><a href="#3、解决方法" class="headerlink" title="3、解决方法"></a>3、解决方法</h2><p>直接将文章标题或路径中的<code>&amp;</code>符号删除，或者使用其他的替换符号即可。</p><p>之后重新生成网页并提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo s<br>hexo d<br></code></pre></td></tr></table></figure><p>这里我将<code>&amp;</code>符号替换成了<code>_</code>符号，在重新提交之后<code>sitemap.xml</code>能够正常打开了。</p><p><img src="https://codestar.top/note-image/image-20231120010344964.png" alt="image-20231120010344964"></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客优化</tag>
      
      <tag>建站指南</tag>
      
      <tag>HEXO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO：使用hexo-admin搭建可视化后台管理系统</title>
    <link href="/website/hexo-set-admin-manager.html"/>
    <url>/website/hexo-set-admin-manager.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、插件安装"><a href="#1、插件安装" class="headerlink" title="1、插件安装"></a>1、插件安装</h2><p>插件仓库地址：<a href="https://github.com/jaredly/hexo-admin">https://github.com/jaredly/hexo-admin</a></p><p>使用npm进行安装，打开cmd运行窗口，使用管理员运行，不然指令可能会报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-admin<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231029164622364.png" alt="image-20231029164622364"></p><p>如果想更换其他的npm源下载来加快速度，使用下面的指令，通过淘宝镜像源来下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm --registry https://registry.npm.taobao.org install --save hexo-admin <br></code></pre></td></tr></table></figure><h2 id="2、启用admin服务"><a href="#2、启用admin服务" class="headerlink" title="2、启用admin服务"></a>2、启用admin服务</h2><p>开启hexo服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s<br></code></pre></td></tr></table></figure><p>打来管理员页面：<a href="http://localhost:4000/admin">http://localhost:4000/admin</a></p><p><img src="https://codestar.top/note-image/image-20231029170010135.png" alt="image-20231029170010135"></p><p><img src="https://codestar.top/note-image/image-20231029170454246.png" alt="image-20231029170454246"></p><p>文章修改支持实时预览：</p><p><img src="https://codestar.top/note-image/image-20231029170551149.png" alt="image-20231029170551149"></p><p>页面右上角可以修改分类和标签：</p><p><img src="https://codestar.top/note-image/image-20231029170647149.png" alt="image-20231029170647149"></p><h2 id="3、配置管理员账户"><a href="#3、配置管理员账户" class="headerlink" title="3、配置管理员账户"></a>3、配置管理员账户</h2><p>此页面默认无管理员，任何人都能访问，需要配置管理员来保护我们的网站内容：</p><p>在<code>Settings &gt; Setup authentification</code>中配置管理员账户：</p><p><img src="https://codestar.top/note-image/image-20231029171208764.png" alt="image-20231029171208764"></p><p>填写自定义账户名和密码，以及加密信息：</p><p><img src="https://codestar.top/note-image/image-20231029171757458.png" alt="image-20231029171757458"></p><p>将配置元数据拷贝到hexo站点配置文件<code>_config.yml</code>中（非主题配置文件_config.yml）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">hexo-admin authentification</span><br>admin:<br>  username: username<br>  password_hash: $2a$10$x6dA96/vjdsmqEpeTgMI7OLgjDFtljE5oySMjpFj1WhKnnniIk5wC<br>  secret: my super secret phrase<br></code></pre></td></tr></table></figure><p>之后，重新启用hexo服务并部署，进入<a href="http://localhost:4000/admin"> http://localhost:4000/admin</a>就会要求登录了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s<br>hexo d<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231029172649630.png" alt="image-20231029172649630"></p><h2 id="4、插件卸载"><a href="#4、插件卸载" class="headerlink" title="4、插件卸载"></a>4、插件卸载</h2><p>由于hexo-admin长时间（7年）未维护了，在文档中适配的最高hexo版本还是3.x版本，因此存在一部分影响较大的问题，比如在admin登录页面会莫名报错，https证书会出现异常（猜测为插件导致），插件安装之前未出现过类似问题，故将其卸载掉，避免影响博客站点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm uninstall hexo-admin<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231030230740326.png" alt="image-20231030230740326"></p><p>检查卸载的情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm list<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231030230800156.png" alt="image-20231030230800156"></p><p>将站点配置<code>_config.yml</code>文件中的相关内容移除掉：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-admin authentification</span><br><span class="hljs-attr">admin:</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">username</span><br>  <span class="hljs-attr">password_hash:</span> <span class="hljs-string">$2a$10$x6dA96/vjdsmqEpeTgMI7OLgjDFtljE5oySMjpFj1WhKnnniIk5wC</span><br>  <span class="hljs-attr">secret:</span> <span class="hljs-string">my</span> <span class="hljs-string">super</span> <span class="hljs-string">secret</span> <span class="hljs-string">phrase</span><br></code></pre></td></tr></table></figure><p>之后再重新生成页面并部署即可卸载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo s<br>hexo d<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231030231038022.png" alt="image-20231030231038022"></p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>在hexo博客插件历经迭代了这么多年，hexo插件生态也迭代了很多轮，有还在维护的插件，也有停止更新的插件，hexo-admin便是其中的一款。到现在2024年，hexo版本已经迭代至7.2，hexo-admin已经没办法完全适配了，并且在安装之后存在的一部分问题导致使用之后的体验和便捷性并不比安装前好。**至此，总结下来hexo-admin插件可以使用，但不推荐，增加了博客的维护成本。**想安装的朋友，可以考虑考虑。</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站指南</tag>
      
      <tag>HEXO</tag>
      
      <tag>[object Object]</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO：博客启用sitemap站点地图功能</title>
    <link href="/blogsite/hexo-set-sitemap.html"/>
    <url>/blogsite/hexo-set-sitemap.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、站点地图介绍"><a href="#1、站点地图介绍" class="headerlink" title="1、站点地图介绍"></a>1、站点地图介绍</h2><p>站点地图是一个xml 格式的文件，存放位置与 <code>index.html，index.php，index.asp</code>等在同一个文件夹位置内，主要的作用是告知搜索引擎，整个网站的网页结构，包含哪些可以扫描的内容。与robots.txt相辅相成，都是用来指导搜索引擎抓取的一个工具类文件。关于sitemap一些疑惑解答可以参考：<a href="https://www.sitemaps.org/zh_CN/faq.html">https://www.sitemaps.org/zh_CN/faq.html</a></p><p>下面操作如何在hexo中利用插件，在我们每次内容存在变更时自动生成站点地图。</p><h2 id="2、站点地图插件安装"><a href="#2、站点地图插件安装" class="headerlink" title="2、站点地图插件安装"></a>2、站点地图插件安装</h2><p>在hexo博客根目录执行下面指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">谷歌站点地图插件</span><br>npm install hexo-generator-sitemap --save<br></code></pre></td></tr></table></figure><p>安装成功：</p><p><img src="https://codestar.top/note-image/image-20231022233034166.png" alt="image-20231022233034166"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">百度站点地图插件</span><br>npm install hexo-generator-baidu-sitemap --save<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231022233430093.png" alt="image-20231022233430093"></p><p>检查安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm list<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231022233524375.png" alt="image-20231022233524375"></p><p>之后每一次静态页面索引存在变更，都会自动生成sitemap：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br></code></pre></td></tr></table></figure><p>执行后会在博客根目录（发布路径）下生成下面两个文件：</p><p><img src="https://codestar.top/note-image/image-20231022233629118.png" alt="image-20231022233629118"></p><h2 id="3、修改站点配置"><a href="#3、修改站点配置" class="headerlink" title="3、修改站点配置"></a>3、修改站点配置</h2><p>进入站点根目录下，修改其中的<code>_config.yml</code>配置文件，添加站点地图配置部分，使站点地图文件提交后生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sitemap站点地图</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">谷歌站点</span><br>sitemap:<br>  path: sitemap.xml<br><span class="hljs-meta prompt_"># </span><span class="language-bash">百度站点</span><br>baidusitemap: <br>  path: baidusitemap.xml<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231023005457594.png" alt="image-20231023005457594"></p><h2 id="4、部署到Github"><a href="#4、部署到Github" class="headerlink" title="4、部署到Github"></a>4、部署到Github</h2><p>重新生成sitemap并部署到Github：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>部署完成之后，就可以通过域名直接访问到对应的<code>sitemap.xml</code>和<code>baidusitemap.xml</code>文件了</p><p><img src="https://codestar.top/note-image/image-20231023010814245.png" alt="image-20231023010814245"></p><p>部署完成后站点地图文件可以用来提交到搜索引擎了，<code>sitemap.xml</code>适用于Google，<code>baidusitemap.xml</code>适用于百度。</p><p>参考：<a href="https://eericzeng.github.io/2019/07/14/hexo%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9sitemap%E7%9A%84%E4%BD%BF%E7%94%A8/">https://eericzeng.github.io/2019/07/14/hexo%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9sitemap%E7%9A%84%E4%BD%BF%E7%94%A8/</a></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客优化</tag>
      
      <tag>建站指南</tag>
      
      <tag>HEXO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO：fluid主题下开启及配置友链页面</title>
    <link href="/website/hexo-fluid-theme-links.html"/>
    <url>/website/hexo-fluid-theme-links.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、开启友链"><a href="#1、开启友链" class="headerlink" title="1、开启友链"></a>1、开启友链</h2><p>在hexo站点配置文件<code>_config.yml</code>中，定位到<code>menu</code>导航栏配置项，开启<code>link</code>页面（友链页面）。若采用覆盖配置，则修改对应覆盖配置的yml文件，否则不生效。</p><p>在<code>menu</code>中对下面内容取消注释即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404220058912.png" alt="image-20240422005850853"></p><p>修改后：</p><p><img src="https://codestar.top/note-image/202405021538688.png" alt="image-20240502153827045"></p><p>开启<code>hexo</code>，进入<a href="http://localhost:4000/%E6%9F%A5%E7%9C%8B%E5%90%AF%E7%94%A8%E7%9A%84%E6%95%88%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost:4000/查看启用的效果如下：</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404220120099.png" alt="image-20240422012031687"></p><h2 id="2、配置友链项"><a href="#2、配置友链项" class="headerlink" title="2、配置友链项"></a>2、配置友链项</h2><h3 id="2-1、友链成员配置"><a href="#2-1、友链成员配置" class="headerlink" title="2.1、友链成员配置"></a>2.1、友链成员配置</h3><p>通过上述开启友链页面后，需要来配置友链有哪些内容，同样在站点配置文件中，定位到<code>links</code>配置项，如下图：</p><p><img src="https://codestar.top/note-image/202405021543128.png" alt="image-20240502154342208"></p><p>其中主要修改的是<code>items</code>内容，这里默认配置中对应的三项正如第一节中的三个友链页。</p><p>其中需要配置的字段有：</p><ul><li><code>title</code>：友链站点名</li><li><code>intro</code>：友链介绍</li><li><code>link</code>：友链URL地址</li><li><code>avatar</code>：友链使用头像</li></ul><p>在配置完<code>items</code>的内容后，公告页可保持默认，其他评论功能看个人选择是否开启。</p><h3 id="2-2、友链副标题"><a href="#2-2、友链副标题" class="headerlink" title="2.2、友链副标题"></a>2.2、友链副标题</h3><p>在友链页面，还会有一个副标题可以自定义，在<code>zh-CN.yml</code>中，这个文件的作用是配置语言标签用的，将友链改为其他自己想要的内容：</p><p><img src="https://codestar.top/note-image/202405022344975.png" alt="image-20240502234414531"></p><p>配置完上述内容后，再次重新部署<code>hexo</code>就可以在自己的站点中查看到修改的友链成员和副标题啦：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo s<br>hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客优化</tag>
      
      <tag>建站指南</tag>
      
      <tag>HEXO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO：fluid主题使用覆盖配置</title>
    <link href="/website/hexo-set-fluid-config.html"/>
    <url>/website/hexo-set-fluid-config.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、覆盖配置"><a href="#1、覆盖配置" class="headerlink" title="1、覆盖配置"></a>1、覆盖配置</h2><p>使用覆盖配置可以独立于主题更新，避免主题配置在更新时被冲掉。使用NPM安装主题可忽略此问题。</p><p>基于hexo6.3.0（5.0.0版本以上操作相同）：将主题的<code>_config.yml</code>配置文件复制，并修改名称为<code>_config.fluid.yml</code>：</p><p><img src="https://codestar.top/note-image/image-20231023224648446.png" alt="image-20231023224648446"></p><p>将复制的文件放入hexo博客根路径：</p><p><img src="https://codestar.top/note-image/image-20231023224739611.png" alt="image-20231023224739611"></p><p>后续如果修改任何主题配置，通过<code>_config.fluid.yml</code>配置文件来修改。</p><ul><li>配置文件优先级：<code>_config.fluid.yml</code> &gt; <code>_config.yml</code>，在存在主题配置文件时直接修改原 <code>_config.yml</code> 是无效的</li></ul><p><strong>注：</strong> 每次主题更新之后，注意更新说明，可能需要手动修改<code>_config.fluid.yml</code>同步配置。</p><h2 id="2、验证覆盖配置"><a href="#2、验证覆盖配置" class="headerlink" title="2、验证覆盖配置"></a>2、验证覆盖配置</h2><p>修改<code>_config.fluid.yml</code>文件中的一个配置来检查是否生效，将博客标题修改为新值，原配置文件<code>_config.yml</code>还是保留着之前的值：</p><p><img src="https://codestar.top/note-image/image-20231023225247765.png" alt="image-20231023225247765"></p><p>重新生成页面查看效果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>检查博客名称是否被覆盖。覆盖了原来的配置，验证OK：</p><p><img src="https://codestar.top/note-image/image-20231023225421221.png" alt="image-20231023225421221"></p><p>也可通过命令行输出来检查配置是否生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g --debug<br></code></pre></td></tr></table></figure><h2 id="3、将覆盖配置为空"><a href="#3、将覆盖配置为空" class="headerlink" title="3、将覆盖配置为空"></a>3、将覆盖配置为空</h2><p>如果想将某些配置覆盖为空，直接将键值给注释掉，其主键无需注释，否则无法覆盖的，比如要要将<code>about</code>页面中的图标置空，使用下面的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">icons:</span>  <span class="hljs-comment"># 不要把 icon 注释掉，否则无法覆盖配置</span><br>    <span class="hljs-comment"># - &#123; class: &#x27;iconfont icon-github-fill&#x27;, link: &#x27;https://github.com&#x27; &#125;</span><br>    <span class="hljs-comment"># - &#123; class: &#x27;iconfont icon-wechat-fill&#x27;, qrcode: &#x27;/img/favicon.png&#x27; &#125;</span><br></code></pre></td></tr></table></figure><p><code>icons</code>为键名将其保留，注释掉其中的键值，使其将原配置置空。</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客优化</tag>
      
      <tag>建站指南</tag>
      
      <tag>HEXO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github修改默认main分支为master</title>
    <link href="/git/github-change-main-branch-to-master.html"/>
    <url>/git/github-change-main-branch-to-master.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、缘由"><a href="#1、缘由" class="headerlink" title="1、缘由"></a>1、缘由</h2><p>在github新版本中，默认将主分支改为了main，其中的原因和美国历史中存在奴隶制有关，master（奴隶主）&#x2F;slave（奴隶）。对于习惯了分支拉取使用master名称来说，会有些不习惯，github提供了方法支持将其修改回去。</p><h2 id="2、修改新建库默认分支名称"><a href="#2、修改新建库默认分支名称" class="headerlink" title="2、修改新建库默认分支名称"></a>2、修改新建库默认分支名称</h2><p>Github个人账户，进入到 Settings—-&gt;Repositories 页面，将<code>main</code>改成<code>master</code>点击Update更新：</p><p><img src="https://codestar.top/note-image/image-20231010221922464.png" alt="image-20231010221922464"></p><p>在此之后所有新建库主分支切换为master。</p><h2 id="3、修改已有仓库默认分支名称"><a href="#3、修改已有仓库默认分支名称" class="headerlink" title="3、修改已有仓库默认分支名称"></a>3、修改已有仓库默认分支名称</h2><p>进入到个人仓库下，Settings页面—-&gt;General—-&gt;Default branch，将其中的<code>main</code>改成<code>master</code>，保存生效：</p><p><img src="https://codestar.top/note-image/image-20231010223212648.png" alt="image-20231010223212648"></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Confluence配置MySQL数据库驱动及连接</title>
    <link href="/confluence/mysql-configuration.html"/>
    <url>/confluence/mysql-configuration.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、MySQL安装"><a href="#1、MySQL安装" class="headerlink" title="1、MySQL安装"></a>1、MySQL安装</h2><p>推荐Mysql5.7版本，安装过程及基础配置参考：<a href="https://blog.csdn.net/qq_44281591/article/details/117935147">https://blog.csdn.net/qq_44281591/article/details/117935147</a></p><p>数据库状态检查：正常运行为active状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl status mysqld<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211639421.png" alt="image-20240415110618597"></p><p>查看临时密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep &#x27;temporary password&#x27; /var/log/mysqld.log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">返回如下：localhost后所接的是临时密码</span><br>2024-04-14T15:50:51.690115Z 1 [Note] A temporary password is generated for root@localhost: lK%kU!jLM3kP<br></code></pre></td></tr></table></figure><p>修改数据库密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">一路y，中间会替换user及root用户的密码，一共修改四个密码，建议统一</span><br>mysql_secure_installation<br></code></pre></td></tr></table></figure><p>用新密码登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -u root -p<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211704922.png" alt="image-20240415114348083"></p><h2 id="2、配置数据库"><a href="#2、配置数据库" class="headerlink" title="2、配置数据库"></a>2、配置数据库</h2><h3 id="2-1、创建confluence数据库"><a href="#2-1、创建confluence数据库" class="headerlink" title="2.1、创建confluence数据库"></a>2.1、创建confluence数据库</h3><p>Confluence创建对应的数据库，并配置UTF8字符集：</p><p>**注意：**很多教程会将字符集配置为utf8_bin，但实际confluence是不支持的，按照<a href="https://doc.devpod.cn/conf/confluence-mysql-utf8mb4-collationutf8mb4_bin-17104923.html">官方的要求</a>，要求字符集为utf8mb4，否则会出现下列问题：</p><p><img src="https://codestar.top/note-image/202404211727939.png" alt="image-20240415150404666"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database confluence <span class="hljs-keyword">default</span> <span class="hljs-keyword">character set</span> utf8mb4 <span class="hljs-keyword">collate</span> utf8mb4_bin;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211708502.png" alt="image-20240415121339102"></p><p>授权confluence用户权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> Linux用户名.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;mysql用户名&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;填入数据库访问密码&#x27;</span>; <br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> confluence.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;confluence&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;填入数据库访问密码&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211708319.png" alt="image-20240415121446029"></p><p>刷新权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">flush privileges;<br></code></pre></td></tr></table></figure><p>检查是否添加成功：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">use mysql<br><span class="hljs-keyword">select</span> host,<span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><p>添加成功能够正常查询到confluence用户：</p><p><img src="https://codestar.top/note-image/202404211708302.png" alt="image-20240415121720099"></p><p>完整一键指令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p <span class="hljs-operator">-</span>e &quot;create database confluence default character set utf8mb4 collate utf8mb4_bin;grant all on confluence.* to &#x27;confluence&#x27;@&#x27;%&#x27; identified by &#x27;填入数据库访问密码&#x27;;flush privileges;&quot;<br></code></pre></td></tr></table></figure><h3 id="2-2、MySQL隔离等级配置"><a href="#2-2、MySQL隔离等级配置" class="headerlink" title="2.2、MySQL隔离等级配置"></a>2.2、MySQL隔离等级配置</h3><p>这里如果数据库设置不符合要求在后面的confluence安装中可能会提示”Confluence设置MySQL数据库报错：必须使用’READ-COMMITTED’作为默认隔离级别。”修复方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">登录数据路</span><br>mysql -u root -p<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改MySQL隔离级别</span> <br>SET GLOBAL tx_isolation=&#x27;READ-COMMITTED&#x27;;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211736502.png" alt="image-20240415144941424"></p><h3 id="2-3、MySQL配置文件修改"><a href="#2-3、MySQL配置文件修改" class="headerlink" title="2.3、MySQL配置文件修改"></a>2.3、MySQL配置文件修改</h3><p>修改mysql配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/my.cnf<br>vim /etc/my.cnf<br></code></pre></td></tr></table></figure><p>数据库配置文件修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs none">[mysqld]<br>character-set-server=utf8mb4<br>collation-server=utf8mb4_bin<br>default-storage-engine=INNODB<br>max_allowed_packet=256M<br>innodb_log_file_size=2GB<br>transaction-isolation=READ-COMMITTED<br>binlog_format=row<br>log-bin-trust-function-creators=1<br>optimizer_switch=derived_merge=off<br></code></pre></td></tr></table></figure><p>如果有下面这一行，删掉：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">// remove this if it exists<br>sql_mode = NO_AUTO_VALUE_ON_ZERO<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211736144.png" alt="image-20240415145548063"></p><p>配置完成后重启mysql服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart mysqld<br></code></pre></td></tr></table></figure><p>此步骤参考官方文档：</p><ul><li><p><a href="https://confluence.atlassian.com/doc/database-setup-for-mysql-128747.html">https://confluence.atlassian.com/doc/database-setup-for-mysql-128747.html</a></p></li><li><p><a href="https://doc.devpod.cn/conf/confluence-mysql-17104919.html">https://doc.devpod.cn/conf/confluence-mysql-17104919.html</a></p></li></ul><h2 id="3、confluence配置MySQL驱动"><a href="#3、confluence配置MySQL驱动" class="headerlink" title="3、confluence配置MySQL驱动"></a>3、confluence配置MySQL驱动</h2><h3 id="3-1、下载JDBC驱动"><a href="#3-1、下载JDBC驱动" class="headerlink" title="3.1、下载JDBC驱动"></a>3.1、下载JDBC驱动</h3><p>maven开源仓库下载对应JDBC驱动，这里我选择5.19版本：<a href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.49/">https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.49/</a></p><p><img src="https://codestar.top/note-image/202404211712276.png" alt="image-20240415092737045"></p><p>使用wget指令在Linux设备上下载至本地：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.49/mysql-connector-java-5.1.49.jar<br></code></pre></td></tr></table></figure><h3 id="3-2、confluence配置MySQL驱动"><a href="#3-2、confluence配置MySQL驱动" class="headerlink" title="3.2、confluence配置MySQL驱动"></a>3.2、confluence配置MySQL驱动</h3><p>在未装JDBC前，confluence数据库配置页面如下：无法正常驱动MySQL</p><p><img src="https://codestar.top/note-image/202404211713117.png" alt="image-20240415092430026"></p><p>移动JDBC jar文件至confluence配置路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv mysql-connector-java-5.1.49.jar /usr/local/software/confluence/confluence/WEB-INF/lib<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查是否移动成功</span><br>ll /usr/local/software/confluence/confluence/WEB-INF/lib | grep mysql-<br></code></pre></td></tr></table></figure><h2 id="4、confluence配置MySQL"><a href="#4、confluence配置MySQL" class="headerlink" title="4、confluence配置MySQL"></a>4、confluence配置MySQL</h2><p>在完成前几节的配置之后，重启 Confluence 并继续安装过程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭confluence</span><br>/usr/local/software/confluence/bin/stop-confluence.sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启confluence</span><br>/usr/local/software/confluence/bin/start-confluence.sh<br></code></pre></td></tr></table></figure><p>Linux浏览器打开confluence页面：<a href="https://localhost:5050/">https://localhost:5050</a></p><p>之后，配置完JDBC进入数据库配置页面会显示如下：</p><p><img src="https://codestar.top/note-image/202404211714798.png" alt="image-20240415140932621"></p><p>通过连接字符串连接：</p><p>**注意：**上面配置字符集为utf8mb4，此处配置要求为utf8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jdbc:mysql://localhost:3306/confluence?sessionVariables=tx_isolation=&#x27;READ-COMMITTED&#x27;&amp;useUnicode=true&amp;characterEncoding=utf8<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211735019.png" alt="image-20240415141737589"></p><p>在经过上述的配置重启数据后，刷新页面重新连接，测试通过后进入下一步安装：</p><p><img src="https://codestar.top/note-image/202404211735661.png" alt="image-20240415150109994"></p><p>配置中：</p><p><img src="https://codestar.top/note-image/202404211734650.png" alt="image-20240415150207957"></p><p>配置完成后会自动进入confluence初始化配置界面，不在此处说明。</p><h2 id="5、拓展：utf8字符集错误解决步骤细节"><a href="#5、拓展：utf8字符集错误解决步骤细节" class="headerlink" title="5、拓展：utf8字符集错误解决步骤细节"></a>5、拓展：utf8字符集错误解决步骤细节</h2><p>解决方法：</p><ul><li>1、停掉confluence服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/software/confluence/bin/stop-confluence.sh<br></code></pre></td></tr></table></figure><ul><li>2、数据库服务器参数修改：</li></ul><p>由于前面已经修改<code>/etc/my.cnf</code>配置文件，其中确保有下面两处配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">character-set-server=utf8mb4<br>collation-server=utf8mb4_bin<br></code></pre></td></tr></table></figure><p>修改完成后重启mysql服务。</p><ul><li>3、修改数据库、表、字段的字符集和collation</li></ul><p>登录mysql：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -u root -p<br></code></pre></td></tr></table></figure><p>修改confluence数据库字符集：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">To</span> Change database <span class="hljs-keyword">collation</span>：数据库修改<br><span class="hljs-keyword">ALTER</span> DATABASE confluence <span class="hljs-keyword">CHARACTER SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_bin;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211734720.png" alt="image-20240415153143342"></p><p>最后执行下面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SET FOREIGN_KEY_CHECKS=1;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211734214.png" alt="image-20240415153444371"></p><ul><li>4、启动confluence</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/software/confluence/bin/start-confluence.sh<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211733692.png" alt="image-20240415153557009"></p><p><strong>Tips</strong> 一般情况下，建议按照<strong>2.1、创建confluence数据库</strong>小节在新建数据库时指定正确的字符编码，避免后续数据库中部分表或文本出现字符错误，出现隐藏的问题。</p><p>全文参考：</p><p><a href="https://developer.aliyun.com/article/1071437">https://developer.aliyun.com/article/1071437</a></p><p><a href="https://www.cnblogs.com/wjoyxt/p/10689883.html">https://www.cnblogs.com/wjoyxt/p/10689883.html</a></p><p><a href="https://developer.aliyun.com/article/439166">https://developer.aliyun.com/article/439166</a></p><p><a href="https://www.cnblogs.com/LOVEYU/p/13684158.html">https://www.cnblogs.com/LOVEYU/p/13684158.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Confluence</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux系统</tag>
      
      <tag>Confluence</tag>
      
      <tag>MySQL</tag>
      
      <tag>WIKI System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos 7.9 yum安装java8</title>
    <link href="/linux/install-centos-7.9-yum-install-java8.html"/>
    <url>/linux/install-centos-7.9-yum-install-java8.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、卸载旧版本SDK"><a href="#1、卸载旧版本SDK" class="headerlink" title="1、卸载旧版本SDK"></a>1、卸载旧版本SDK</h2><p>rpm删除原来的java包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查询Java旧安装包</span><br>rpm -qa | grep java<br><span class="hljs-meta prompt_"># </span><span class="language-bash">逐一卸载</span><br>rpm -e --nodeps java-1.8.0-openjdk-1.8.0.322.b06-1.el7_9.x86_64<br>rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.261-2.6.22.2.el7_8.x86_64<br>rpm -e --nodeps java-1.7.0-openjdk-1.7.0.261-2.6.22.2.el7_8.x86_64<br>rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.322.b06-1.el7_9.x86_64<br></code></pre></td></tr></table></figure><h2 id="2、yum安装Java-jdk"><a href="#2、yum安装Java-jdk" class="headerlink" title="2、yum安装Java jdk"></a>2、yum安装Java jdk</h2><h3 id="2-1、查找可选包"><a href="#2-1、查找可选包" class="headerlink" title="2.1、查找可选包"></a>2.1、查找可选包</h3><p>查找可选的安装包：列出所有jdk的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum search java | grep jdk<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211700028.png" alt="image-20240410092252965"></p><p>或使用下面指令直接列出所有的java 8的版本包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum list java-1.8*<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211700069.png" alt="image-20240410101302251"></p><h3 id="2-2、yum安装"><a href="#2-2、yum安装" class="headerlink" title="2.2、yum安装"></a>2.2、yum安装</h3><p>yum安装Java 8：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y java-1.8.0-openjdk<br></code></pre></td></tr></table></figure><p>出现下面这一段为安装完成：</p><p><img src="https://codestar.top/note-image/202404211700600.png" alt="image-20240410092427531"></p><p>使用yum安装的java的默认安装路径在 <code>/usr/lib/jvm</code>，我们可以看一个目录是<code>java-1.8.0-openjdk-1.8.0.402.b06-1.el7_9.x86_64</code>：</p><p><img src="https://codestar.top/note-image/202404211701345.png" alt="image-20240410100132567"></p><p>查看这个目录，进入到其下的bin目录，可找到java执行程序：</p><p><img src="https://codestar.top/note-image/202404211658680.png" alt="image-20240421165854541"></p><p>**注：**通过yum的方式安装的java 8，无需配置环境变量即可生效。</p><h2 id="3、验证安装"><a href="#3、验证安装" class="headerlink" title="3、验证安装"></a>3、验证安装</h2><p>验证java安装是否成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211701686.png" alt="image-20240410092712342"></p><p>参考：</p><p><a href="https://blog.csdn.net/axing2015/article/details/83614800">https://blog.csdn.net/axing2015/article/details/83614800</a></p><p><a href="https://timberkito.com/?p=12">https://timberkito.com/?p=12</a></p>]]></content>
    
    
    <categories>
      
      <category>Centos</category>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Centos</tag>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github推送仓库出现的错误问题解决记录</title>
    <link href="/git/github-push-error-solution.html"/>
    <url>/git/github-push-error-solution.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、fatal-the-remote-end-hung-up-unexpectedly"><a href="#1、fatal-the-remote-end-hung-up-unexpectedly" class="headerlink" title="1、fatal: the remote end hung up unexpectedly"></a>1、fatal: the remote end hung up unexpectedly</h2><p>具体现象如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">Total 47 (delta 9), reused 0 (delta 0), pack-reused 0<br>error: RPC failed; curl 55 Recv failure: Connection was reset<br>send-pack: unexpected disconnect while reading sideband packet<br>fatal: the remote end hung up unexpectedly<br>Everything up-to-date<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br>Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (E:\CodeLab\GitRepoLab\00-OwnCode\hexo_blog\node_modules\hexo-util\lib\spawn.js:51:21)<br>    at ChildProcess.emit (node:events:517:28)<br>    at cp.emit (E:\CodeLab\GitRepoLab\00-OwnCode\hexo_blog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at ChildProcess._handle.onexit (node:internal/child_process:292:12)<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211635401.png" alt="image-20231012005507571"></p><p>问题原因：推送的文件太大，超出了buffer。</p><p>解决办法：</p><ul><li>修改当前仓库buffer：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --local http.postBuffer 524288000<br></code></pre></td></tr></table></figure><ul><li>或者修改<code>.git/config</code>下的postBuffer属性：</li></ul><p><img src="https://codestar.top/note-image/202404211636345.png" alt="image-20231012235603859"></p><p>参考：<a href="https://blog.csdn.net/u013250071/article/details/81203900">https://blog.csdn.net/u013250071/article/details/81203900</a></p><h2 id="2、Failed-to-connect-to-github-com-port-443-after-21065-ms-Couldn’t-connect-to-server"><a href="#2、Failed-to-connect-to-github-com-port-443-after-21065-ms-Couldn’t-connect-to-server" class="headerlink" title="2、Failed to connect to github.com port 443 after 21065 ms: Couldn’t connect to server"></a>2、Failed to connect to github.com port 443 after 21065 ms: Couldn’t connect to server</h2><p>问题现象：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">fatal: unable to access &#x27;https://github.com/minixiaoxin/codestar.github.io.git/&#x27;: Failed to connect to github.com port 443 after 21065 ms: Couldn&#x27;t connect to server<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br>Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (E:\CodeLab\GitRepoLab\00-OwnCode\hexo_blog\node_modules\hexo-util\lib\spawn.js:51:21)<br>    at ChildProcess.emit (node:events:517:28)<br>    at cp.emit (E:\CodeLab\GitRepoLab\00-OwnCode\hexo_blog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at ChildProcess._handle.onexit (node:internal/child_process:292:12)<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211636005.png" alt="image-20231012005450572"></p><p>问题原因：配置了VPN代理的原因</p><ul><li>有VPN代理，则使用下面的代理进行连接：</li></ul><p>http代理(Ghelper使用此类型代理)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global http.proxy 127.0.0.1:7890<br>git config --global https.proxy 127.0.0.1:7890<br>git config --global http.proxy 127.0.0.1:7890;git config --global https.proxy 127.0.0.1:7890<br></code></pre></td></tr></table></figure><p>socket5代理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global http.proxy socks5 127.0.0.1:7890<br>git config --global https.proxy socks5 127.0.0.1:7890<br>git config --global http.proxy socks5 127.0.0.1:7890;git config --global https.proxy socks5 127.0.0.1:7890<br></code></pre></td></tr></table></figure><ul><li>无代理：</li></ul><p>查看代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global --get http.proxy<br>git config --global --get https.proxy<br>git config --global --get http.proxy;git config --global --get https.proxy<br></code></pre></td></tr></table></figure><p>取消代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global --unset http.proxy<br>git config --global --unset https.proxy<br>git config --global --unset http.proxy;git config --global --unset https.proxy<br></code></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/zpf1813763637/article/details/128340109">https://blog.csdn.net/zpf1813763637/article/details/128340109</a></p><h2 id="3、Recv-failure-Connection-was-reset"><a href="#3、Recv-failure-Connection-was-reset" class="headerlink" title="3、Recv failure: Connection was reset"></a>3、Recv failure: Connection was reset</h2><p>问题现象：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">fatal: unable to access &#x27;https://github.com/minixiaoxin/codestar.github.io.git/&#x27;: Recv failure: Connection was reset<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br>Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (E:\CodeLab\GitRepoLab\00-OwnCode\hexo_blog\node_modules\hexo-util\lib\spawn.js:51:21)<br>    at ChildProcess.emit (node:events:517:28)<br>    at cp.emit (E:\CodeLab\GitRepoLab\00-OwnCode\hexo_blog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at ChildProcess._handle.onexit (node:internal/child_process:292:12)<br><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211636347.png" alt="image-20231012005437909"></p><p>问题原因：路由问题。</p><p>解决方法：</p><ul><li>重置Git代理：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global --unset http.proxy<br>git config --global --unset https.proxy<br></code></pre></td></tr></table></figure><ul><li>清除DNS缓存，在cmd面板执行：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ipconfig/flushdns<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404211636214.png" alt="image-20231012005358026"></p><p>之后，重新提交即可：</p><p><img src="https://codestar.top/note-image/202404211624633.png" alt="image-20231012005550378"></p><h2 id="4、unexpected-disconnect-while-reading-sideband-packet"><a href="#4、unexpected-disconnect-while-reading-sideband-packet" class="headerlink" title="4、unexpected disconnect while reading sideband packet"></a>4、unexpected disconnect while reading sideband packet</h2><p>扩大git缓存即可，使用以下指令进行扩大：单位是Byte， 1048576000B&#x3D;1G</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global http.postBuffer 1048576000<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/20250614155042993.png" alt="image-20241013155623448"></p><p>参考：</p><p><a href="https://blog.csdn.net/st75033562/article/details/132452763">https://blog.csdn.net/st75033562/article/details/132452763</a></p><p><a href="https://blog.csdn.net/m0_69087087/article/details/128838186">https://blog.csdn.net/m0_69087087/article/details/128838186</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos 7.9 搭建及配置java 17 sdk环境</title>
    <link href="/linux/install-centos-7.9-java17.html"/>
    <url>/linux/install-centos-7.9-java17.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>在现在软件行业迭代飞快，java版本已经发展至java 17，以java8为基础的软件也逐渐慢慢向高版本过渡或直接不支持java 8，像jenkins支持的java版本是从11开始，atlassian confluence也是从java 11开始，因此考虑到需要用到不少有此类变化的应用，尝试直接从高版本java17（LTS版本）开始使用。下面的是java 17的安装过程，部分安装过程与java 8存在差异。</p><h2 id="2、安装包下载"><a href="#2、安装包下载" class="headerlink" title="2、安装包下载"></a>2、安装包下载</h2><p><a href="https://www.techspot.com/downloads/7440-java-se-17.html">https://www.techspot.com/downloads/7440-java-se-17.html</a></p><p><img src="https://codestar.top/note-image/202404061549155.png" alt="image-20240406154953068"></p><p>利用XFTP传输到Linux 设备：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建java路径：名称及位置自定义，方便自己记住</span><br>mkdir -p /usr/local/softwares/java17<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404061607424.png" alt="image-20240406160718387"></p><h2 id="3、解压sdk包"><a href="#3、解压sdk包" class="headerlink" title="3、解压sdk包"></a>3、解压sdk包</h2><p>将java 17 SDK包解压到上节的新建目录中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf jdk-17.0.8_linux-x64_bin.tar.gz -C /usr/local/softwares/java17<br></code></pre></td></tr></table></figure><p>能正常看到下列文件即可：</p><p><img src="https://codestar.top/note-image/202404061611483.png" alt="image-20240406161118439"></p><h2 id="4、配置环境变量"><a href="#4、配置环境变量" class="headerlink" title="4、配置环境变量"></a>4、配置环境变量</h2><h3 id="4-1、配置环境变量"><a href="#4-1、配置环境变量" class="headerlink" title="4.1、配置环境变量"></a>4.1、配置环境变量</h3><p>这里需要修改系统的全局环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br></code></pre></td></tr></table></figure><p>键入i，输入下面的环境变量配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_HOME=/usr/local/softwares/java17/jdk-17.0.8<br>export JRE_HOME=$&#123;JAVA_HOME&#125;/jre<br>export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib<br>export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404061635872.png" alt="image-20240406163523829"></p><p><strong>注意：</strong> 这里的<strong>路径需要和上节解压后的路径保持一致</strong>，否则不生效，使用上述一种配置格式即可。</p><p>修改完成后，输入<kbd>:</kbd>，再输入wq保存退出vim编辑器。</p><h3 id="4-2、生效环境变量"><a href="#4-2、生效环境变量" class="headerlink" title="4.2、生效环境变量"></a>4.2、生效环境变量</h3><p>在配置完环境变量之后，需要使其生效刷新环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><h3 id="4-3、生成jre"><a href="#4-3、生成jre" class="headerlink" title="4.3、生成jre"></a>4.3、生成jre</h3><p>需要注意的是，<strong>在java11之后，解压的安装包不会出现jre路径</strong>，需要手动生成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入到java bin路径下：</span><br>cd /usr/local/softwares/java17/jdk-17.0.8/bin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">利用jlink生成jre</span><br>./jlink --module-path jmods --add-modules java.desktop --output jre<br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成的jre会在bin路径下，将其移动到主目录</span><br>mv jre /usr/local/softwares/java17/jdk-17.0.8/<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404061628614.png" alt="image-20240406162835542"></p><p>参考：<a href="https://developer.aliyun.com/article/1074720">https://developer.aliyun.com/article/1074720</a></p><h2 id="5、检查java"><a href="#5、检查java" class="headerlink" title="5、检查java"></a>5、检查java</h2><p>之后，就可以正常的执行java：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java --version<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404061639998.png" alt="image-20240406163942954"></p><h2 id="6、添加java软链接"><a href="#6、添加java软链接" class="headerlink" title="6、添加java软链接"></a>6、添加java软链接</h2><p>在原来的java路径下添加一个软链接，效果类似于Windows的快捷方式，方便后续调用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /usr/local/softwares/java17/jdk-17.0.8/bin/java /usr/bin/java<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404061641532.png" alt="image-20240406164147496"></p><p>执行的效果是一致的：</p><p><img src="https://codestar.top/note-image/202404061643654.png" alt="image-20240406164316610"></p><p>至此，java17的安装与配置完成。</p>]]></content>
    
    
    <categories>
      
      <category>Centos</category>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Centos</tag>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO：PicGo+Tynipng实现图片上传即压缩</title>
    <link href="/website/hexo-set-picgo-tinypng.html"/>
    <url>/website/hexo-set-picgo-tinypng.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、PicGo插件下载"><a href="#1、PicGo插件下载" class="headerlink" title="1、PicGo插件下载"></a>1、PicGo插件下载</h2><p>进入cmd面板，手动cd到PicGo配置目录，一般为<code>C:\Users\XXX\AppData\Roaming\picgo</code>，安装对应插件(需要提前安装node.js，本文不做赘述)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install picgo-plugin-tinypng --save<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202404210038663.png" alt="image-20240421003808482"></p><p>安装完成之后还不会有效果，需要重启一下PicGo，重启之后插件就正常安装了，效果如下：</p><p><img src="https://codestar.top/note-image/202404210037289.png" alt="image-20240421003701184"></p><p>其他支持的插件如下：<a href="https://github.com/PicGo/Awesome-PicGo">Picgo插件清单</a></p><p>参考：<a href="https://blog.csdn.net/lunhui601/article/details/107722580">https://blog.csdn.net/lunhui601/article/details/107722580</a></p><h2 id="2、Tinypng-API配置"><a href="#2、Tinypng-API配置" class="headerlink" title="2、Tinypng API配置"></a>2、Tinypng API配置</h2><h3 id="2-1、Tinypng-API申请"><a href="#2-1、Tinypng-API申请" class="headerlink" title="2.1、Tinypng API申请"></a>2.1、Tinypng API申请</h3><p>进入到tinypng官网：</p><ul><li><p>国外用这个地址：</p><p><a href="https://tinypng.com/developers">https://tinypng.com/developers</a></p></li><li><p>国内用这个地址：</p><p><a href="https://tinify.cn/developers">https://tinify.cn/developers</a></p></li></ul><p>两个网站为同一家。</p><p>打开API主页，填写邮箱及昵称进行注册：会收到一封注册邮件，直接点击跳转完成注册。</p><p><img src="https://codestar.top/note-image/202404211541523.png" alt="image-20240421154121105"></p><p>会跳转进入到这个页面：此时API还未开放</p><p><img src="https://codestar.top/note-image/202404211444128.png" alt="image-20240421144421521"></p><p>重新进入到<a href="https://tinypng.com/developers%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%86%8D%E9%87%8D%E6%96%B0%E7%99%BB%E5%BD%951%E6%AC%A1%E4%B9%8B%E5%90%8E%EF%BC%8C%E4%BC%9A%E7%94%9F%E6%88%90API">https://tinypng.com/developers页面，再重新登录1次之后，会生成API</a> KEY:</p><p><img src="https://codestar.top/note-image/202404211444509.png" alt="image-20240421144404747"></p><p>进入API页面：</p><p><img src="https://codestar.top/note-image/202404211443899.png" alt="image-20240421144354146"></p><p>API KEY的初始状态是disable，还无法使用，需要手动启用（enable）：</p><p><img src="https://codestar.top/note-image/202404211443049.png" alt="image-20240421144324331"></p><h3 id="2-2、PicGo配置API"><a href="#2-2、PicGo配置API" class="headerlink" title="2.2、PicGo配置API"></a>2.2、PicGo配置API</h3><p>在获取到了Tinypng的API Key之后，复制key内容，进入到PicGo Tinypng插件中：</p><p><img src="https://codestar.top/note-image/202404211443723.png" alt="image-20240421144258145"></p><p>进入到插件配置页，填入自己的key内容：</p><p><img src="https://codestar.top/note-image/202404210052284.png" alt="image-20240421005255208"></p><p>配置完之后，需手动启用传输压缩：下面的状态是已经正常开启了。</p><p><img src="https://codestar.top/note-image/202404211441886.png" alt="image-20240421144136179"></p><p>在完成这些操作之后，每上传1次图片都会进行压缩操作。Tinypng API每月有免费的500张压缩额度，对于写博文来说够用了。</p><p><img src="https://codestar.top/note-image/202404211432403.png" alt="image-20240421143248580"></p><h3 id="2-3、测试压缩效果"><a href="#2-3、测试压缩效果" class="headerlink" title="2.3、测试压缩效果"></a>2.3、测试压缩效果</h3><p>同一张图片上传：</p><ul><li>未压缩图片大小：</li></ul><p><img src="https://codestar.top/note-image/202404210059982.png" alt="image-20240421005922917"></p><ul><li>压缩后图片大小：</li></ul><p><img src="https://codestar.top/note-image/202404210105646.png" alt="image-20240421010544452"></p><p>**注意：**图片越大，压缩的效果越大。由于增加了压缩的过程，上传图片的时间会在原来的基础上增加2-3s。</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站指南</tag>
      
      <tag>HEXO</tag>
      
      <tag>PicGo技巧</tag>
      
      <tag>WEB图片压缩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux：文件权限详解及修改方法</title>
    <link href="/linux/file-permission.html"/>
    <url>/linux/file-permission.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、Linux文件权限"><a href="#1、Linux文件权限" class="headerlink" title="1、Linux文件权限"></a>1、Linux文件权限</h2><h3 id="1-1、如何查看到文件权限"><a href="#1-1、如何查看到文件权限" class="headerlink" title="1.1、如何查看到文件权限"></a>1.1、如何查看到文件权限</h3><p>使用<code>ls -l</code>或者<code>ll</code>指令可以直接查看到如下的标记，这些标记代表的相关文件或文件夹的权限类型及所属：</p><p><img src="https://codestar.top/note-image/202403021718549.png" alt="image-20240222100605216"></p><p>其中分四段：</p><ul><li>第一段，为文件&#x2F;文件夹权限，其中首个bit位字符为文件类型，一共有如下的七种：<strong>前三种为常见类型</strong></li></ul><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>-</code></td><td>普通文件。</td></tr><tr><td><code>d</code></td><td>目录，字母<code>d</code>是<code>dirtectory</code>（目录）的缩写。</td></tr><tr><td><code>l</code></td><td>符号链接。请注意，一个目录或者说一个文件夹是一个特殊文件，这个特殊文件存放的是其他文件和文件夹的相关信息。</td></tr><tr><td><code>b</code></td><td>块设备文件。</td></tr><tr><td><code>c</code></td><td>字符设备文件。</td></tr><tr><td><code>p</code></td><td>管道文件</td></tr><tr><td><code>s</code></td><td>套接口文件</td></tr></tbody></table><p>像类型为文件，如下面这种：</p><p><img src="https://codestar.top/note-image/202403021719611.png" alt="image-20240223160559384"></p><p>之后跟随的会有9个bit位，分别代表不同的权限类型，后续再进一步讨论。</p><ul><li>第二段，为文件&#x2F;子目录的链接数量</li></ul><p>像上述的文件结果中，<code>1</code>表示有一个硬链接指向文件<code>python.gram</code>，一般来说文件类型均为1。如果为文件夹类型则表示的是链接的子目录个数。</p><ul><li>第三段，为权限<strong>所属用户</strong></li></ul><p>表示拥有当前文件或目录的用户。</p><ul><li>第四段，为权限<strong>所属群组</strong></li></ul><p>表示所属的群组（group）。群组下的每一个使用者都具有该文件\路径的控制权限，一个用户可以拥有一个以上的组，大部分都只属于1个群组。</p><h3 id="1-2、ll命令介绍"><a href="#1-2、ll命令介绍" class="headerlink" title="1.2、ll命令介绍"></a>1.2、ll命令介绍</h3><p>在Ubuntu中默认不含ll命令，其实质为<code>ls -l</code>的别名，我们可以通过修改环境变量自行添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">切换管理员模式</span><br>su<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改系统环境变量</span><br>vim ~/.bashrc<br></code></pre></td></tr></table></figure><p>添加或将下面这一段去掉注释：</p><p><img src="https://codestar.top/note-image/202403021722920.png" alt="image-20240222095730569"></p><p>修改完成之后，使环境变量生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.bashrc<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202403021722579.png" alt="image-20240222100228829"></p><p>**注：**root环境变量和普通用户环境变量不共通，使用<code>ll</code>指令，不同用户下需单独修改。</p><h2 id="2、权限分类"><a href="#2、权限分类" class="headerlink" title="2、权限分类"></a>2、权限分类</h2><h3 id="2-1、文件权限"><a href="#2-1、文件权限" class="headerlink" title="2.1、文件权限"></a>2.1、文件权限</h3><p>在文件类型字节位后，紧接着的3*3个字符分3组，各<strong>表示不同角色对此文件的读(r)、写(w)、执行权限(x)</strong>：</p><ul><li>第一段：3bit，对应**文件所有者(owner)**的权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">- rwx --- ---    对应文件所有者(owner)拥有读写及执行权限，设定值为700，其值等于下面三项值相加<br>- r-- --- ---    对应文件所有者(owner)拥有读权限，设定值为400<br>- -w- --- ---    对应文件所有者(owner)拥有写权限，设定值为200<br>- --x --- ---    对应文件所有者(owner)拥有执行权限，设定值为100<br></code></pre></td></tr></table></figure><ul><li>第二段：3bit，对应**文件所属用户群组(group)**的权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">- --- rwx ---    对应文件所属群组(owner)拥有读写及执行权限，设定值为070，其值等于下面三项值相加<br>- --- r-- ---    对应文件所属群组(owner)拥有读权限，设定值为040<br>- --- -w- ---    对应文件所属群组(owner)拥有写权限，设定值为020<br>- --- --x ---    对应文件所属群组(owner)拥有执行权限，设定值为010<br></code></pre></td></tr></table></figure><ul><li>第三段：3bit，对应**其他用户(others)**的权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">- --- --- rwx    对应其他用户(others)对文件拥有读写及执行权限，设定值为007，其值等于下面三项值相加<br>- --- --- r--    对应其他用户(others)对文件拥有读写及执行权限，设定值为004<br>- --- --- -w-    对应其他用户(others)对文件拥有读写及执行权限，设定值为002<br>- --- --- --x    对应其他用户(others)对文件拥有读写及执行权限，设定值为001<br></code></pre></td></tr></table></figure><p>上述权限对应下来则为八进制码表，二进制码的计算顺序为从右往左：</p><table><thead><tr><th align="center">八进制位</th><th align="center">权限</th><th align="center">权限符号</th><th align="center">二进制位</th></tr></thead><tbody><tr><td align="center">7</td><td align="center">读\写\执行</td><td align="center">rwx</td><td align="center">111</td></tr><tr><td align="center">6</td><td align="center">读\写</td><td align="center">rw-</td><td align="center">110</td></tr><tr><td align="center">5</td><td align="center">读\执行</td><td align="center">r-x</td><td align="center">101</td></tr><tr><td align="center">4</td><td align="center">读</td><td align="center">r–</td><td align="center">100</td></tr><tr><td align="center">3</td><td align="center">写\执行</td><td align="center">-wx</td><td align="center">011</td></tr><tr><td align="center">2</td><td align="center">写</td><td align="center">-w-</td><td align="center">010</td></tr><tr><td align="center">1</td><td align="center">执行</td><td align="center">–x</td><td align="center">001</td></tr><tr><td align="center">0</td><td align="center">无权限</td><td align="center">—</td><td align="center">000</td></tr></tbody></table><p><strong>举例：</strong></p><p>权限符号为<code>rw-</code>，其二进制位为110，则二进制转为八进制为，计算顺序为从右往左：$2^0$+$2^1$+$2^1$&#x3D;6，即r为2号位值为1，w为1号为值为1，-为0号位值为0。</p><h3 id="2-2、文件夹权限"><a href="#2-2、文件夹权限" class="headerlink" title="2.2、文件夹权限"></a>2.2、文件夹权限</h3><p>文件夹的权限标识与文件相同，但所具有的含义不一样，对应如下：</p><ul><li><code>r</code>：能够浏览目录信息，包括目录名称及所含文件等信息。无权限时无法查看对应内容</li></ul><p><img src="https://codestar.top/note-image/202403021724448.png" alt="image-20240223171228842"></p><ul><li><code>w</code>：能够删除新增或修改目录中的文件或目录。无权限时限制删除新增等操作</li></ul><p><img src="https://codestar.top/note-image/202403021725734.png" alt="image-20240223171711277"></p><ul><li><code>x</code>：当具有<code>x</code>权限时，能够进入该目录。无权限时被限制进入</li></ul><p><img src="https://codestar.top/note-image/202403021725361.png" alt="image-20240223171127644"></p><h2 id="3、权限修改"><a href="#3、权限修改" class="headerlink" title="3、权限修改"></a>3、权限修改</h2><h3 id="3-1、修改文件-文件夹权限"><a href="#3-1、修改文件-文件夹权限" class="headerlink" title="3.1、修改文件&#x2F;文件夹权限"></a>3.1、修改文件&#x2F;文件夹权限</h3><h4 id="1）chmod指令"><a href="#1）chmod指令" class="headerlink" title="1）chmod指令"></a>1）chmod指令</h4><p><code>chmod</code>修改文件权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod [选项] 权限 文件名/文件夹名<br></code></pre></td></tr></table></figure><p>[选项]为可选，支持以下常用参数：</p><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">改变权限成功后再输出成功信息</td></tr><tr><td align="left">-R</td><td align="left">递归处理所有子文件</td></tr><tr><td align="left">-f</td><td align="left">改变权限失败后不显示错误信息</td></tr><tr><td align="left">-v</td><td align="left">显示执行过程详细信息</td></tr></tbody></table><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置文件夹权限为770：文件所有者和用户群组有读\写\执行权限，其他用户无权限</span><br>chmod 770 testDir<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置文件权限为707：文件所有者和其他用户有读\写\执行权限，用户群组无权限</span><br>chmod 707 testfile<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202403021727664.png" alt="image-20240223170729874"></p><p>**注：<strong>只有</strong>文件所有者(owner)或管理员(root)**才允许修改文件权限。</p><h4 id="2）chmod指令符号"><a href="#2）chmod指令符号" class="headerlink" title="2）chmod指令符号"></a>2）chmod指令符号</h4><p>在chmod指令中，可以使用用户表示符和权限控制符号来简化指令，更为的清晰，其对应的不同符号如下：</p><ul><li><strong>用户表示符</strong></li></ul><table><thead><tr><th>用户表示符</th><th>说明</th></tr></thead><tbody><tr><td>u</td><td>所有者</td></tr><tr><td>g</td><td>拥有者同组用户</td></tr><tr><td>o</td><td>其它用户</td></tr><tr><td>a</td><td>所有用户</td></tr></tbody></table><ul><li><strong>权限操作符</strong></li></ul><table><thead><tr><th>权限操作符</th><th>含义</th></tr></thead><tbody><tr><td>+</td><td>表示添加权限</td></tr><tr><td>-</td><td>表示移除权限</td></tr><tr><td>&#x3D;</td><td>表示设置权限为特定的值</td></tr></tbody></table><ul><li>权限符号</li></ul><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>r</td><td>读取权限</td></tr><tr><td>w</td><td>写入权限</td></tr><tr><td>x</td><td>执行权限</td></tr></tbody></table><p>组合使用举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">给文件file.txt的所有者（u）增加读取（+r）权限</span><br>chmod u+r file.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">从文件file.txt的拥有者同组用户（g）中移除写入（-w）权限</span><br>chmod g-w file.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">给目录directory的其他用户（o）增加执行（+x）权限</span><br>chmod o+x directory<br><span class="hljs-meta prompt_"># </span><span class="language-bash">给文件file.txt的所有用户（a）设置读取和写入权限</span><br>chmod a=rw file.txt<br></code></pre></td></tr></table></figure><h3 id="3-2、修改文件-文件夹所属用户"><a href="#3-2、修改文件-文件夹所属用户" class="headerlink" title="3.2、修改文件&#x2F;文件夹所属用户"></a>3.2、修改文件&#x2F;文件夹所属用户</h3><p><code>chown</code>修改文件&#x2F;文件夹所属的用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown [选项] 新所属用户名 文件名/文件夹名<br></code></pre></td></tr></table></figure><p><code>chown</code>常用的[选项]参数：</p><table><thead><tr><th>常用参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-R, --recursive</code></td><td>递归地更改指定目录及其子目录中所有文件和目录的所有者。</td></tr><tr><td><code>--reference=RFILE</code></td><td>把指定文件的拥有者和用户组应用到其他文件， RFILE为参考文件。</td></tr><tr><td><code>--from=CURRENT_OWNER[:CURRENT_GROUP]</code></td><td>仅在文件的当前所有者或用户组匹配指定的值时才更改文件的所有者和&#x2F;或用户组。</td></tr><tr><td><code>--preserve-root</code></td><td>不允许在 “&#x2F;“ 上递归操作</td></tr><tr><td><code>-v, --verbose</code></td><td>显示详细的操作信息。</td></tr></tbody></table><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将file.txt文件所属用户修改为用户miniboy</span><br>chown miniboy file.txt<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202403021754997.png" alt="image-20240302175436935"></p><p>**注：**所修改的新用户，为存在的用户，否则会执行失败，提示无效用户。</p><p><code>--from=CURRENT_OWNER[:CURRENT_GROUP]</code>参数使用举例：当匹配到对应的所有者&#x2F;用户组时才进行修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">当file.txt的当前所有者是olduser，用户组是oldgroup时，才将其所有者更改为newuser，用户组更改为newgroup</span><br>chown --from=olduser:oldgroup newuser:newgroup file.txt<br></code></pre></td></tr></table></figure><h3 id="3-3、修改文件-文件夹所属群组"><a href="#3-3、修改文件-文件夹所属群组" class="headerlink" title="3.3、修改文件&#x2F;文件夹所属群组"></a>3.3、修改文件&#x2F;文件夹所属群组</h3><p><code>chgrp</code>更改文件或文件夹所属用户组（group）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chgrp [选项] 用户组名 文件名/文件夹名<br></code></pre></td></tr></table></figure><p>在[选项]参数方面与<code>chown</code>类似，常用参数如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-R, --recursive</code></td><td>递归地更改指定目录及其子目录中<strong>所有文件和目录</strong>的所属用户组。</td></tr><tr><td><code>--reference=RFILE</code></td><td>把指定文件的用户组应用到其他文件。</td></tr><tr><td><code>--preserve-root</code></td><td>不要跨越文件系统的边界，这对于递归操作非常重要。</td></tr><tr><td><code>-v, --verbose</code></td><td>显示详细的操作信息。</td></tr><tr><td><code>--dereference</code></td><td>在符号链接指向文件本身时，处理符号链接指向的文件而不是符号链接文件本身。</td></tr></tbody></table><p>使用示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将file.txt文件的所属群组修改为newgroup</span><br>chgrp newgroup file.txt<br></code></pre></td></tr></table></figure><p><code>chgrp</code>部分修改也能够通过<code>chown</code>来实现，如<strong>修改拥有者和所属组：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown :root file30.txt （修改所属组为root）<br>chown root:root file30.txt （修改拥有者和所属组为root)<br></code></pre></td></tr></table></figure><p>**注：**只有超级用户（root）或者文件的当前所有者才能使用<code>chgrp</code>命令。</p><h2 id="4、参考"><a href="#4、参考" class="headerlink" title="4、参考"></a>4、参考</h2><p><a href="https://blog.csdn.net/m0_56311933/article/details/123006978">https://blog.csdn.net/m0_56311933/article/details/123006978</a></p><p><a href="https://www.cnblogs.com/kongzhongqijing/p/3488884.html">https://www.cnblogs.com/kongzhongqijing/p/3488884.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>文件管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>文件管理</tag>
      
      <tag>权限</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux：实现将参数传递到下一个指令中部进行执行</title>
    <link href="/linux/transfer-parameter-to-next-command.html"/>
    <url>/linux/transfer-parameter-to-next-command.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、方法一"><a href="#1、方法一" class="headerlink" title="1、方法一"></a>1、方法一</h2><p>使用<code>awk</code>和<code>xargs</code>来实现参数传递：这种方法需要<code>xargs</code>支持<code>-I</code>参数，不支持的情况下执行结果不会替换掉<code>&#123;&#125;</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> <span class="hljs-symbol">&lt;your_process_name&gt;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I &#123;&#125; <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Process ID: &#123;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>这里，<code>-I &#123;&#125;</code> 选项告诉 <code>xargs</code> 在每次执行 <code>echo</code> 命令时用找到的进程ID替换 <code>&#123;&#125;</code></p><p>通过<code>xargs --help</code>来判断是否支持-I参数，我这里不支持<code>-I</code>参数，考虑其他方法：</p><p><img src="https://codestar.top/note-image/202402192344195.png" alt="image-20240219094019874"></p><h2 id="2、方法二"><a href="#2、方法二" class="headerlink" title="2、方法二"></a>2、方法二</h2><p>使用管道和循环来替代<code>xargs</code>以达到相同的执行效果，示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps aux | grep &lt;your_process_name&gt; | awk &#x27;&#123;print $2&#125;&#x27; | while read pid; do echo &quot;Process ID: $pid&quot;; done<br></code></pre></td></tr></table></figure><p>这个命令会逐行读取 <code>awk</code> 命令输出的进程ID，并把它传递给 <code>echo</code> 命令以生成所需的输出。</p><p>执行结果示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ps -ef | grep com.ghtc.ghtlog | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> pid; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Process ID: <span class="hljs-variable">$pid</span>&quot;</span>; <span class="hljs-keyword">done</span></span><br>Process ID: 3588<br>Process ID: 30941<br></code></pre></td></tr></table></figure><h2 id="3、用法拓展"><a href="#3、用法拓展" class="headerlink" title="3、用法拓展"></a>3、用法拓展</h2><p>通过上述的方法，可以有很多种使用技巧，如将前一个指令执行的结果进行换算处理。</p><ul><li>这里查询出的结果为：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /sys/kernel/debug/clk/measure_only_mccc_clk/clk_measure<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 1555209953</span><br></code></pre></td></tr></table></figure><ul><li>换算的过程处理指令为：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">输出结果为Byte，按单位换算为MB：</span><br>echo &quot;scale=2; 1555209953 / 1024 / 1024&quot; | bc<br></code></pre></td></tr></table></figure><ul><li>将查询和数据换算过程正和岛一条指令：</li></ul><p>通过<code>awk</code>和循环控制语句来实现。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /sys/kernel/debug/clk/measure_only_mccc_clk/clk_measure | awk &#x27;&#123;print $1&#125;&#x27; | while read result; do echo &quot;scale=2; $result / 1024 / 1024&quot; | bc;done<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 1483.16</span><br></code></pre></td></tr></table></figure><ul><li>上面的结果不会有单位输出，追加单位输出如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /sys/kernel/debug/clk/measure_only_mccc_clk/clk_measure | awk &#x27;&#123;print $1&#125;&#x27; | while read result; do echo &quot;$(echo &quot;scale=2; $result / 1024 / 1024&quot; | bc) MB&quot;; done<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 1483.16 MB</span><br></code></pre></td></tr></table></figure><p>Byte转换成GB：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /sys/kernel/debug/clk/measure_only_mccc_clk/clk_measure | awk &#x27;&#123;print $1&#125;&#x27; | while read result; do echo &quot;$(echo &quot;scale=2; $result / 1024 / 1024 /1024&quot; | bc) GB&quot;; done<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 1.44 GB</span><br></code></pre></td></tr></table></figure><p>其他的使用技巧，简化执行的步骤，尽情的发挥想象吧。</p><h2 id="4、命令拓展——bc：数字计算器"><a href="#4、命令拓展——bc：数字计算器" class="headerlink" title="4、命令拓展——bc：数字计算器"></a>4、命令拓展——bc：数字计算器</h2><p><code>bc</code>指令，全称为binary calculator，译为二进制计算器，主要用来进行浮点数的计算。在bash中，仅支持整数的运算，不支持浮点数的运算，通过bc指令来实现对浮点数的运算。</p><h3 id="4-1、bc参数介绍"><a href="#4-1、bc参数介绍" class="headerlink" title="4.1、bc参数介绍"></a>4.1、bc参数介绍</h3><p><code>bc --help</code>可以查看支持哪些参数：</p><p><img src="https://codestar.top/note-image/202402192344085.png" alt="image-20240219174935590"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">-i --interactive 强制进入交互模式<br>-l --mathlib 使用预定义的数学函数：<br>                 s(expr)  =  表示 expr 弧度的正弦值<br>                 c(expr)  =  表示 expr 弧度的余弦值<br>                 a(expr)  =  表示 expr 的反正切值（返回弧度）<br>                 l(expr)  =  表示 expr 的自然对数<br>                 e(expr)  =  对 expr 进行 e 的幂运算<br>                 j(n, x)  =  x 的整数阶贝塞尔函数 n<br>-q --quiet 不打印版本和版权信息<br>-s --standard 如果使用了任何非 POSIX 扩展，则报错<br>-w --warn 如果使用了任何非 POSIX 扩展，则警告<br></code></pre></td></tr></table></figure><h3 id="4-2、交互模式运算"><a href="#4-2、交互模式运算" class="headerlink" title="4.2、交互模式运算"></a>4.2、交互模式运算</h3><p>正常执行<code>bc</code>指令或<code>bc -i</code>会进入一个交互模式，相当于进入了计算器的输入界面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">bc<br>bc -i<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202402192344402.png" alt="image-20240219173104259"></p><p>在交互模式下可以执行各类运算操作（加减乘除等）：</p><p><img src="https://codestar.top/note-image/202402192345783.png" alt="image-20240219173523985"></p><p>输入<code>quit</code>退出交互模式。</p><h3 id="4-3、作为计算工具，处理数据"><a href="#4-3、作为计算工具，处理数据" class="headerlink" title="4.3、作为计算工具，处理数据"></a>4.3、作为计算工具，处理数据</h3><p>通过<code>echo</code>和<code>bc</code>组合使用，将输出的结果作为计算参数来使用，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">除运算</span><br>echo 100 / 5 | bc<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 20</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">求算术平方根</span><br>echo 9 | bc -lq | awk &#x27;&#123;print sqrt($1)&#125;&#x27;<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 3</span><br></code></pre></td></tr></table></figure><h3 id="4-4、设置小数点规模"><a href="#4-4、设置小数点规模" class="headerlink" title="4.4、设置小数点规模"></a>4.4、设置小数点规模</h3><ul><li>交互模式中设置小数点规模</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">bc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置2位小数点</span><br>scale=2<br>9/3<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 3.00</span><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202402192345623.png" alt="image-20240219175814072"></p><ul><li>在指令执行中设置小数点</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置3位小数点</span><br>echo &quot;scale=3; 9 / 3&quot; | bc<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 3.000</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>bash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>bash</tag>
      
      <tag>参数传递</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python：编码出现“Non-UTF-8 code starting with &#39;&#92;xd9&#39;”错误解决方法</title>
    <link href="/python/non-utf8-code-error-solution.html"/>
    <url>/python/non-utf8-code-error-solution.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、问题现象"><a href="#1、问题现象" class="headerlink" title="1、问题现象"></a>1、问题现象</h2><p>在执行程序是，出现<code>Non-UTF-8 code starting with &#39;\xd9&#39;</code>异常：</p><p><img src="https://codestar.top/note-image/202402192329706.png" alt="image-20240117102517113"></p><p>报错信息：</p><p><img src="https://codestar.top/note-image/202402192338742.png" alt="image-20240117102635117"></p><p>通过异常信息，发现在首行出现了编码错误，非UTF-8编码，因而导致执行错误。通过错误信息，查询官方文档，查看右侧的链接：<a href="http://python.org/dev/peps/pep-0263/">http://python.org/dev/peps/pep-0263/</a>。</p><h2 id="2、问题原因"><a href="#2、问题原因" class="headerlink" title="2、问题原因"></a>2、问题原因</h2><p>通过查看官方文档发现，在没有给出其他编码提示，Python 将<strong>默认使用 ASCII 作为标准编码</strong>，当编码存在冲突时出现上述错误：</p><p><img src="https://codestar.top/note-image/202402192338704.png" alt="image-20240117102857483"></p><p><img src="https://codestar.top/note-image/202402192338787.png" alt="image-20240117103006624"></p><h2 id="3、解决方法"><a href="#3、解决方法" class="headerlink" title="3、解决方法"></a>3、解决方法</h2><p>解决此类编码问题，可通过在首行引入固定的头来指定编码方式，在第一行加入编码注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># &lt;--格式一--&gt;</span><br><span class="hljs-comment"># coding=&lt;encoding name&gt;</span><br><br><span class="hljs-comment"># &lt;--格式二--&gt;</span><br><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: &lt;encoding name&gt; -*-</span><br><br><br><span class="hljs-comment"># &lt;--格式三--&gt;</span><br><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># vim: set fileencoding=&lt;encoding name&gt; :</span><br></code></pre></td></tr></table></figure><p><code>&lt;encoding name&gt;</code>说明脚本运行的编码格式。</p><p>示例：按照格式二指定为<code>utf-8</code>编码方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/python</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-*- coding: &lt;utf-8&gt; -*-</span><br></code></pre></td></tr></table></figure><p>补充头注释说明编码方式为<code>utf-8</code>后，便能正常执行：</p><p><img src="https://codestar.top/note-image/202402192337738.png" alt="image-20240117103429509"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github更换token后cloudflare图床链接失效问题处理</title>
    <link href="/website/github-token-update-issue-handle.html"/>
    <url>/website/github-token-update-issue-handle.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、问题现象"><a href="#1、问题现象" class="headerlink" title="1、问题现象"></a>1、问题现象</h2><p>在更新classic token后，通过github搭建的图床链接尽数失效了，产生了裂图，现象如下，图像加载失败：</p><p><img src="https://codestar.top/note-image/202401250016470.png" alt="image-20231110155119781"></p><p>为了恢复博客图片的加载，需要尽快解决。</p><h2 id="2、问题原因"><a href="#2、问题原因" class="headerlink" title="2、问题原因"></a>2、问题原因</h2><p>由于我是使用github和cloudflare一起搭建的图床，在更新github token更新之后cloudflare 配置的github token还是旧的，导致worker作业流异常：</p><p><img src="https://codestar.top/note-image/202401250017434.png" alt="image-20231110160557408"></p><p>因为这个原因，导致我的图片访问出现异常。</p><h2 id="3、解决方法"><a href="#3、解决方法" class="headerlink" title="3、解决方法"></a>3、解决方法</h2><p>要解决这个问题，只需要在更新github token的同时，同步更新cloudflare中workflow的相关token即可：</p><h3 id="3-1、生成github-token"><a href="#3-1、生成github-token" class="headerlink" title="3.1、生成github token"></a>3.1、生成github token</h3><p>在github的<code>Settings &gt;&gt; Personal access tokens &gt;&gt; Tokens(classic)</code>更新token过期时间为no expiration：</p><p><img src="https://codestar.top/note-image/202401250018066.png" alt="image-20231110161120652"></p><p><img src="https://codestar.top/note-image/202401250019485.png" alt="image-20231110161230648"></p><p>token只会展示1次，要保存好。要想安全系数更高一些可以选择固定时间，或自定义过期时间。生成之后，下拉到页面底部，<code>update token</code></p><h3 id="3-2、更新cloudflare-worker"><a href="#3-2、更新cloudflare-worker" class="headerlink" title="3.2、更新cloudflare worker"></a>3.2、更新cloudflare worker</h3><p>Workers &amp; Pages –&gt; Overview  进入到cloudflare工作流：</p><p><img src="https://codestar.top/note-image/202401250019458.png" alt="image-20231110162035573"></p><p>编辑工作流：</p><p><img src="https://codestar.top/note-image/202401250019072.png" alt="image-20231110162437465"></p><p>将token更新之后，执行<code>Save and deploy</code>，在这个页面测试链接会报400的错误，我个人设置的为私有库导致这种现象，无需理会，不影响作业流更新：</p><p><img src="https://codestar.top/note-image/202401250019738.png" alt="image-20231110163726076"></p><p>更新之后，下面的图片链接就可以正常的访问了：</p><p><img src="https://codestar.top/note-image/202401250020831.png" alt="image-20231110163627806"></p><p><strong>注意：</strong> 当更新上述内容之后，会依然部分图片链接异常，<strong>需要重新配置worker</strong>，详情参考指导<a href="https://blog.codestar.top/website/windows-piggo-picture-cdn.html">Windows中配置PigGo图床及CDN加速</a>中第4.4节。</p>]]></content>
    
    
    <categories>
      
      <category>CDN</category>
      
      <category>博客搭建</category>
      
      <category>图床</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图床</tag>
      
      <tag>博客优化</tag>
      
      <tag>CDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows：屏保设置被置灰问题处理</title>
    <link href="/windows/windows-screensaver-settings-grayed-out.html"/>
    <url>/windows/windows-screensaver-settings-grayed-out.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、问题现象"><a href="#1、问题现象" class="headerlink" title="1、问题现象"></a>1、问题现象</h2><p>在部分场景下，屏保会出现无法置灰无法设置的情况，像下面这种：</p><p><img src="https://codestar.top/note-image/202401250003442.png" alt="image-20240122173726259"></p><p>正常Windows家庭版还是专业版等版本，都不会限制这一块的编辑权限，在特定情况下会被管理员给修改了，导致无法设置。</p><h2 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h2><p>通过修改注册表来释放编辑权限：</p><ul><li>1、<kbd>Win</kbd>+<kbd>R</kbd>打开运行窗口：输入<code>regedit</code></li></ul><p><img src="https://codestar.top/note-image/202401250003803.png" alt="image-20240122174026050"></p><ul><li>2、进入以下路径：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Control Panel\Desktop<br></code></pre></td></tr></table></figure><ul><li>3、删除配置项下所有配置文件（非默认）：</li></ul><p><code>scrnsave.exe</code>（屏保程序）和<code>ScreenSaveTimeOut</code>（屏保等待时间），如果存在<code>ScreenSaverIsSecure</code>，一并删除：</p><p><img src="https://codestar.top/note-image/202401250003252.png" alt="image-20240122181136558"></p><ul><li>4、验证修改</li></ul><p>重新打开屏保设置，删除注册表项之后，就能够正常配置屏保程序和时间了：</p><p><img src="https://codestar.top/note-image/202401250004389.png" alt="image-20240122181314029"></p><h2 id="3、问题原因"><a href="#3、问题原因" class="headerlink" title="3、问题原因"></a>3、问题原因</h2><p>这里涉及到注册表之间的逻辑关系，下面两类注册表：</p><ul><li>1、用户侧控制面板配置</li></ul><p>这里为用户自行定义的一些配置，如前文中的<code>scrnsave.exe</code>（屏保程序）和<code>ScreenSaveTimeOut</code>（屏保等待时间），<code>ScreenSaverIsSecure</code>等配置项也可以在这边设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HKEY_CURRENT_USER\Control Panel\Desktop<br></code></pre></td></tr></table></figure><ul><li>2、系统控制面板的策略配置：</li></ul><p>当策略配置中存在配置项时，会覆盖掉<code>HKEY_CURRENT_USER\Control Panel\Desktop</code>，即<strong>用户侧配置不生效，其对应的控制面板设置会置灰</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Control Panel\Desktop<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>屏保设置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux：如何查询进程下的线程</title>
    <link href="/linux/query-process-thread.html"/>
    <url>/linux/query-process-thread.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>进程和线程，是程序运行绕不开的话题，当我们想查询一个进程下存在哪些进程时，可以有哪些方法查询到，这是要思考的问题。</p><h2 id="2、思路"><a href="#2、思路" class="headerlink" title="2、思路"></a>2、思路</h2><h3 id="2-1、是否有方法可查？"><a href="#2-1、是否有方法可查？" class="headerlink" title="2.1、是否有方法可查？"></a>2.1、是否有方法可查？</h3><p>可想在linux中肯定有方法可以查询到进程下的线程，那么如何来查询？查询<code>ps</code>手册，发现可以通过参数<code>-T</code>查询到对应的进程下的线程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看对应手册</span><br>man ps<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202401232220348.png" alt="image-20240123222038191"></p><p>当我们知道含线程的进程时哪一个进程的时候，可以使用-T参数通过PID来获取进程下的线程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep /usr/libexec/gvfsd<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202401232233282.png" alt="image-20240123223305183"></p><p>或者直接使用pgrep通过进程名匹配进程pid：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pgrep gvfsd<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202401232240082.png" alt="image-20240123224010041"></p><p>再通过进程pid即可查询到对应的线程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -T -p 1300<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202401232241552.png" alt="image-20240123224139498"></p><h3 id="2-2、合并命令行"><a href="#2-2、合并命令行" class="headerlink" title="2.2、合并命令行"></a>2.2、合并命令行</h3><p>通过前面的两个指令，成功查询到了进程下含有哪些线程后，那么我们能否将指令合并成1条来简化指令执行呢？这里就可以使用到awk和xargs来对指令执行的参数进行传递了，合并后的指令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep gvfsd | awk &#x27;&#123;print $2&#125;&#x27; | xargs ps -T -p<br></code></pre></td></tr></table></figure><p>在这段指令中，无需知道进程pid，直接将其作为参数传递给<code>ps -T -p</code>这一段指令，中间通过awk和xargs以及管道符|来传递参数。</p><p>分为下面三段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">step 1:查询进程gvfsd详情，第二列为pid</span><br>ps -ef | grep gvfsd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">step 2:获取前一段指令执行结果第2列值</span><br>| awk &#x27;&#123;print $2&#125;&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">step 3:将awk获取到的值，作为参数传递给下一步的指令</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">正常执行ps -T -p 1300，这一段中的pid 1300，通过ps -ef | grep gvfsd | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | 执行的指令获取。</span><br>| xargs ps -T -p<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202401232252363.png" alt="image-20240123225254283"></p><p>**注：**当要查询的进程名存在多项时，会将所有的线程结果查询出来。</p><p><img src="https://codestar.top/note-image/202401232255216.png" alt="image-20240123225525979"></p><h3 id="2-3、如何知道进程是否有线程？"><a href="#2-3、如何知道进程是否有线程？" class="headerlink" title="2.3、如何知道进程是否有线程？"></a>2.3、如何知道进程是否有线程？</h3><p>通过上述的方法，能够成功的查询到指定进程下所含的线程，那么我们不知道对应进程全名，只是想知道哪些进程有线程时，如何来查询呢？linux中也提供了相应的指令来查询：</p><p>正常我们使用<code>ps -ef</code>查询指令会展示所有进程的全格式列表下的内容，但扩展<code>-L</code>参数一起使用时会增加NLWP（线程数）和LWP（线程ID）列：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -eLf<br></code></pre></td></tr></table></figure><p>通过这个指令可以查询所有的进程详情，并将线程详情打印：</p><p><img src="https://codestar.top/note-image/202401232258424.png" alt="image-20240123225839123"></p><p>当然，看到了这里，其实，还有第二种方法来查询指定进程名下的线程，没错，那就是将上面的指令结果通过grep来筛选：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -eLf | grep gvfsd<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202401232300164.png" alt="image-20240123230041790"></p><p>到了这里，可以发现，<code>ps -eLf | grep gvfsd</code>执行的结果和<code>ps -ef | grep gvfsd | awk &#39;&#123;print $2&#125;&#39; | xargs ps -T -p</code>两种情况执行的结果差不多，无外乎，展示数据的多少，但是我们想查的数据都能够正确的获取到，具体使用哪种，全凭喜好。</p><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>查询进程下的线程有两种方法：</p><h3 id="3-1、方法一"><a href="#3-1、方法一" class="headerlink" title="3.1、方法一"></a>3.1、方法一</h3><p><code>awk</code>和<code>xargs</code>方法传递参数查询：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep process_name | awk &#x27;&#123;print $2&#125;&#x27; | xargs ps -T -p<br></code></pre></td></tr></table></figure><h3 id="3-2、方法二"><a href="#3-2、方法二" class="headerlink" title="3.2、方法二"></a>3.2、方法二</h3><p><code>ps</code>中<code>-L</code>和<code>-f</code>参数连用，增加打印线程信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -eLf | grep process_name<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>进程管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>进程</tag>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO：子域名的配置及如何绑定到个人网站</title>
    <link href="/website/hexo-set-subdomain.html"/>
    <url>/website/hexo-set-subdomain.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>当我们购买了顶级域名时，期望其不只是在www前缀使用，可以扩展到多个不同的子域名。子域名可以用来关联到不同的站点，同时根据子域名的名称，也能够明显的区分不同站点的类型和作用，那么配置子域名的方法可以参考下面的过程来执行。按照域名的结构来说[www].[domain].[com]，[www]为一级域名即子域名我们下面配置的修改点就在这，[domain]为二级域名也称为根域名，[com]为顶级域名。结构从左往右<strong>路由范围逐级递增</strong>，域名”&#x2F;“后接对应站点的资源。</p><h2 id="2、配置子域名"><a href="#2、配置子域名" class="headerlink" title="2、配置子域名"></a>2、配置子域名</h2><h3 id="2-1、域名由namesoli托管"><a href="#2-1、域名由namesoli托管" class="headerlink" title="2.1、域名由namesoli托管"></a>2.1、域名由namesoli托管</h3><p>因为我的域名服务商为namesoli，在这以此为例进行说明：</p><ul><li>进入<a href="https://www.namesilo.com/account_domains.php">个人域名管理(Domain manage)</a>，点击蓝球球：</li></ul><p><img src="https://codestar.top/note-image/202401211042149.png" alt="image-20240121104203077"></p><ul><li>进入”Manage DNS”，添加路由，类型为CNAME，添加或删除一级子域名：如添加为[info.domain.com]、[blog.domain.com]，后面配置的”TARGET HOSTNAME”为目标源地址</li></ul><p><img src="https://codestar.top/note-image/202401211354124.png" alt="image-20240121135411052"></p><h3 id="2-2、域名由CloudFlare托管"><a href="#2-2、域名由CloudFlare托管" class="headerlink" title="2.2、域名由CloudFlare托管"></a>2.2、域名由CloudFlare托管</h3><p>在使用CloudFlare对域名进行代理托管时，按照类似的步骤操作如下：</p><ul><li>进入域名管理：</li></ul><p><img src="https://codestar.top/note-image/202401211025649.png" alt="image-20240121102539592"></p><ul><li>配置路由规则（子域名），类型配置为CNAME，Content为源目标地址，同namesoli中的”TARGET HOSTNAME”：每添加一条，即可增加一个子域名，最大数量上限为50条。</li></ul><p><img src="https://codestar.top/note-image/202401210927072.png" alt="image-20240121092700008"></p><p>**注：**这里的配置的”Name”不可重复，否则会添加失败。</p><p>其他域名服务提供上，均可按上述类似操作进行配置，均为配置DNS路由即可。</p><h2 id="3、子域名绑定"><a href="#3、子域名绑定" class="headerlink" title="3、子域名绑定"></a>3、子域名绑定</h2><p>这里以网站部署到github上为例：</p><ul><li>进入github “Setting”–“Pages”页面，在“Custome domain”处填写子域名再”Save”进行解析：</li></ul><p><img src="https://codestar.top/note-image/202401211029950.png" alt="image-20240121102909890"></p><p>待github部署完成之后就能够正常通过子域名访问网站了：</p><p><img src="https://codestar.top/note-image/202401211028326.png" alt="image-20240121102806285"></p><h2 id="4、配置子域名转发重定向"><a href="#4、配置子域名转发重定向" class="headerlink" title="4、配置子域名转发重定向"></a>4、配置子域名转发重定向</h2><ul><li><p>进入域名管理页面，点击单个顶级域名：</p></li><li><p>进入“Sub-Domain Forwarding”，管理子域名重定向：</p></li></ul><p><img src="https://codestar.top/note-image/202401210005890.png" alt="image-20240121000556854"></p><ul><li>添加重定向子域名：</li></ul><p><img src="https://codestar.top/note-image/202401210008867.png" alt="image-20240121000813813"></p><ul><li>配置子域名前缀：</li></ul><p><img src="https://codestar.top/note-image/202401210009623.png" alt="image-20240121000927567"></p><p>配置完成后，即可对指定的域名进行重定向。</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站指南</tag>
      
      <tag>HEXO</tag>
      
      <tag>子域</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python实现shell指令执行</title>
    <link href="/python/python-shell-command-execution.html"/>
    <url>/python/python-shell-command-execution.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>实现在shell中执行指令，在Python中可以有两种方法实现，一种是通过Python内置的os库，另一种是通过subprocess库。在os库中，有popen()方法可以执行指令，而subprocess中有Popen()方法，两者名称一样，需要注意大小写。下面是具体的使用示例。</p><h2 id="2、os-popen方法"><a href="#2、os-popen方法" class="headerlink" title="2、os.popen方法"></a>2、os.popen方法</h2><h3 id="2-1、非阻塞命令执行"><a href="#2-1、非阻塞命令执行" class="headerlink" title="2.1、非阻塞命令执行"></a>2.1、非阻塞命令执行</h3><p>内置os库的popen方法，<strong>非阻塞</strong>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">print</span>(os.popen(<span class="hljs-string">&quot;adb devices&quot;</span>))<br></code></pre></td></tr></table></figure><p>正常执行，会返回执行结果的内存值，这里不会展示命令执行的结果：</p><p><img src="https://codestar.top/note-image/202401162219634.png" alt="image-20240116105825860"></p><p>如果只是想在代码中增加一个命令执行，可以使用这个方法，通过这种方式增加的命令执行为<strong>非阻塞的</strong>。缺点在于不会打印命令执行的结果。</p><p>验证阻塞：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># 此命令会一直执行</span><br><span class="hljs-built_in">print</span>(os.popen(<span class="hljs-string">&#x27;adb shell &quot;ping 127.0.0.1&quot;&#x27;</span>))<br><span class="hljs-comment"># 正常打印下面内容</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;阻塞验证&quot;</span>)<br></code></pre></td></tr></table></figure><p>Tips：在Python中实现多行输入，键入\即可换行继续输入。</p><h3 id="2-2、阻塞式命令执行"><a href="#2-2、阻塞式命令执行" class="headerlink" title="2.2、阻塞式命令执行"></a>2.2、阻塞式命令执行</h3><p>在上述方法中，os.popen()本质上是不阻塞的，那为了实现阻塞功能，可以增加一个<code>read()</code>或<code>readlines()</code>方法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://blog.51cto.com/u_2681882/2317053">[1]</span></a></sup>。当前命令未执行完毕不会进入下一步的代码执行，除非使用<kbd>Ctrl</kbd>+<kbd>C</kbd>关闭程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">print</span>(os.popen(<span class="hljs-string">&quot;adb devices&quot;</span>).read())<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202401162220704.png" alt="image-20240116110623924"></p><p>执行过程，会读取内存值，并将其返回。这里会返回命令执行的结果，但其会阻塞下一步代码的执行。</p><p>验证阻塞：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">print</span>(os.popen(<span class="hljs-string">&#x27;adb shell &quot;ping 127.0.0.1&quot;&#x27;</span>).read())<br><span class="hljs-comment"># 不会打印下面内容</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;阻塞验证&quot;</span>)<br></code></pre></td></tr></table></figure><p>当我们指令的执行存在前后依赖关系，这时候可使用阻塞式执行方法了。</p><h2 id="3、subprocess-Popen方法"><a href="#3、subprocess-Popen方法" class="headerlink" title="3、subprocess.Popen方法"></a>3、subprocess.Popen方法</h2><h3 id="3-1、非阻塞命令执行"><a href="#3-1、非阻塞命令执行" class="headerlink" title="3.1、非阻塞命令执行"></a>3.1、非阻塞命令执行</h3><p>使用subprocess库中的Popen()方法，同样可以执行shell命令，其本质是新开一个线程，来异步执行命令，使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-comment"># print(subprocess.Popen(“xxx”))会打印执行指令内存地址</span><br>subprocess.Popen(<span class="hljs-string">&#x27;adb shell &quot;ping 127.0.0.1&quot;&#x27;</span>)<br>subprocess.Popen(<span class="hljs-string">&quot;adb devices&quot;</span>)<br></code></pre></td></tr></table></figure><p>上述示例，两个指令执行不会受顺序的影响，是非阻塞的关系：</p><p><img src="https://codestar.top/note-image/202401162220409.png" alt="image-20240116115511724"></p><h3 id="3-2、阻塞命令执行"><a href="#3-2、阻塞命令执行" class="headerlink" title="3.2、阻塞命令执行"></a>3.2、阻塞命令执行</h3><p>使用<code>wait()</code>或<code>communicate()</code>方法<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://blog.csdn.net/huakai_sun/article/details/79682172">[2]</span></a></sup>，使其阻塞下一条指令的执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br>sprocess1 = subprocess.Popen(<span class="hljs-string">&#x27;adb shell &quot;ping 127.0.0.1&quot;&#x27;</span>)<br><span class="hljs-comment"># sprocess1.communicate()</span><br>sprocess1.wait()<br>subprocess.Popen(<span class="hljs-string">&quot;adb devices&quot;</span>)<br></code></pre></td></tr></table></figure><p>两种类型执行结果如下，后面的<code>adb devices</code>指令不会继续执行：</p><p><img src="https://codestar.top/note-image/202401162220427.png" alt="image-20240116121452020"></p><p>如果想定时阻塞，可以使用<code>Popen.wait(timeout=0)</code>增加<code>timeout</code>超时时间，到达时间后会执行下一步指令。</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>上述的方法，可以方便我们在外部（PC）实现shell指令的一些自动化，其中的一些阻塞关系可以交叉使用，以适配进程之间的同步、异步等关系，无论是阻塞亦或是非阻塞，两者的选用需要根据实际场景中指令见的依赖关系来选择。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.51cto.com/u_2681882/2317053">https://blog.51cto.com/u_2681882/2317053</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/huakai_sun/article/details/79682172">https://blog.csdn.net/huakai_sun/article/details/79682172</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>cmd指令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows：通过指令进行用户管理</title>
    <link href="/windows/windows-user-management.html"/>
    <url>/windows/windows-user-management.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>在很多场景下，通过Windows图形界面管理用户相对较为繁琐，因此可以通过使用cmd指令来简化管理步骤。以下所有操作可在管理员权限下使用。需要注意的是，在<strong>操作之前确保进行数据备份，或谨记修改内容</strong>，防止出现账户无法登录等异常。</p><h2 id="2、net-user指令介绍"><a href="#2、net-user指令介绍" class="headerlink" title="2、net user指令介绍"></a>2、net user指令介绍</h2><p>net user指令是Windows系统命令行中用于创建、修改和管理用户账户的命令。其指令格式如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user [username [password [options]]]<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><strong>username</strong>：用户帐户名</li><li><strong>password</strong>：用户帐户密码</li><li><strong>options</strong>：可选参数，用于指定用户帐户的属性</li></ul><p><strong>常用选项</strong></p><ul><li><strong>&#x2F;add</strong>：创建新用户帐户</li><li><strong>&#x2F;delete</strong>：删除用户帐户</li><li><strong>&#x2F;mod</strong>：修改用户帐户属性</li><li><strong>&#x2F;domain</strong>：指定用户帐户所在的域</li><li><strong>&#x2F;local</strong>：指定用户帐户为本地帐户</li></ul><h2 id="3、用户查询"><a href="#3、用户查询" class="headerlink" title="3、用户查询"></a>3、用户查询</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 查询当前所有权限用户<br><span class="hljs-built_in">net</span> user<br></code></pre></td></tr></table></figure><p>结果中，<strong>每一列为一个权限类型</strong>，列下<strong>每一行表示一个用户</strong>：如TF为Administrator账户</p><p><img src="https://codestar.top/note-image/202401162253359.png" alt="image-20240116152326904"></p><h2 id="4、用户创建"><a href="#4、用户创建" class="headerlink" title="4、用户创建"></a>4、用户创建</h2><p>创建账户Test1，并设置密码123456：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user Test1 <span class="hljs-number">123456</span> /add<br></code></pre></td></tr></table></figure><p>创建无密码账户Test2：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user Test2 /add<br></code></pre></td></tr></table></figure><h2 id="5、用户信息修改"><a href="#5、用户信息修改" class="headerlink" title="5、用户信息修改"></a>5、用户信息修改</h2><h3 id="5-1、修改用户名"><a href="#5-1、修改用户名" class="headerlink" title="5.1、修改用户名"></a>5.1、修改用户名</h3><p><code>net user</code>指令本身无法直接修改用户名，可以使用其他指令来实现：</p><p><strong>方法一：</strong><code>wmic</code>指令实现</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wmic computersystem where name=&#x27;<span class="hljs-variable">%computername%</span>&#x27; <span class="hljs-keyword">call</span> <span class="hljs-built_in">rename</span>=&#x27;YOUR-NEW-NAME&#x27;<br></code></pre></td></tr></table></figure><p>**方法二：**使用<code>Netplwiz</code>控制</p><p><code>Netplwiz</code>是Windows操作系统中的一个命令行工具，用于管理计算机上的用户账户。<kbd>Win</kbd>+<kbd>R</kbd>，打开运行窗口，输入<code>Netplwiz</code>：</p><p><img src="https://codestar.top/note-image/202401162254698.png" alt="image-20240116155154395"></p><p>进入控制台，修改特定账户的名称，修改完成之后“应用”即可：</p><p><img src="https://codestar.top/note-image/202401162254425.png" alt="image-20240116155336433"></p><p>通过<code>Netplwiz</code>命令行工具，还可以做其他的用户操作，如添加&#x2F;删除账户等，这里只说明账户名称修改的操作方法。</p><h3 id="5-2、修改用户密码"><a href="#5-2、修改用户密码" class="headerlink" title="5.2、修改用户密码"></a>5.2、修改用户密码</h3><h4 id="1）添加账户密码"><a href="#1）添加账户密码" class="headerlink" title="1）添加账户密码"></a>1）添加账户密码</h4><p>对无密码账户 Test2 设置密码“123456”：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user Test2 <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h4 id="2）修改账户密码"><a href="#2）修改账户密码" class="headerlink" title="2）修改账户密码"></a>2）修改账户密码</h4><p>对已设置密码的账户Test1，修改密码为“123”：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user Test1 <span class="hljs-number">123</span> /mod<br><span class="hljs-built_in">net</span> user Test1 <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h4 id="3）删除账户密码"><a href="#3）删除账户密码" class="headerlink" title="3）删除账户密码"></a>3）删除账户密码</h4><p>删除账户Test1的密码，回车之后生效：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user Test1 &quot;&quot;<br></code></pre></td></tr></table></figure><h3 id="5-3、修改账户状态"><a href="#5-3、修改账户状态" class="headerlink" title="5.3、修改账户状态"></a>5.3、修改账户状态</h3><p>修改账户（administrator）为启用状态：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user administrator /active:yes<br></code></pre></td></tr></table></figure><p>修改账户（administrator）为禁用状态：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user administrator /active:no<br></code></pre></td></tr></table></figure><p>上述指令，执行成功会提示禁用&#x2F;启用成功。</p><h2 id="6、用户删除"><a href="#6、用户删除" class="headerlink" title="6、用户删除"></a>6、用户删除</h2><p>将名为Test1的账户删除：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user Test1 /delete<br></code></pre></td></tr></table></figure><h2 id="7、扩展操作"><a href="#7、扩展操作" class="headerlink" title="7、扩展操作"></a>7、扩展操作</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>&#x2F;expires</strong></td><td align="left">指定用户帐户的过期时间</td></tr><tr><td align="left"><strong>&#x2F;fullname</strong></td><td align="left">指定用户帐户的全名</td></tr><tr><td align="left"><strong>&#x2F;groups</strong></td><td align="left">指定用户帐户所属的组</td></tr><tr><td align="left"><strong>&#x2F;homedir</strong></td><td align="left">指定用户帐户的主目录</td></tr><tr><td align="left"><strong>&#x2F;passwordchg</strong></td><td align="left">指定用户帐户密码的过期时间</td></tr><tr><td align="left"><strong>&#x2F;passwordneverexpires</strong></td><td align="left">指定用户帐户的密码永不过期</td></tr><tr><td align="left"><strong>&#x2F;profilepath</strong></td><td align="left">指定用户帐户的配置文件路径</td></tr><tr><td align="left"><strong>&#x2F;scriptpath</strong></td><td align="left">指定用户帐户的登录脚本路径</td></tr><tr><td align="left"><strong>&#x2F;systemaccount</strong></td><td align="left">指定用户帐户为系统帐户</td></tr><tr><td align="left"><strong>&#x2F;userclass</strong></td><td align="left">指定用户帐户的用户类别</td></tr><tr><td align="left"><strong>&#x2F;workstations</strong></td><td align="left">指定用户帐户可以登录的计算机</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>用户管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO：首页Slogon调用API定期更新</title>
    <link href="/website/hexo-slogon.html"/>
    <url>/website/hexo-slogon.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、每日一言API"><a href="#1、每日一言API" class="headerlink" title="1、每日一言API"></a>1、每日一言API</h2><h3 id="1-1、API接口"><a href="#1-1、API接口" class="headerlink" title="1.1、API接口"></a>1.1、API接口</h3><p>想要调用API更新Slogon，首先得有免费可用的API，我这边使用的是hitokoto的每日一言接口，请求地址如下：<a href="https://v1.hitokoto.cn/">https://v1.hitokoto.cn/</a></p><p>使用<code>get</code>方式请求，无需传递参数，无使用限制。</p><p>对应官方网址：<a href="https://developer.hitokoto.cn/sentence/">https://developer.hitokoto.cn/sentence/</a></p><h3 id="1-2、测试接口"><a href="#1-2、测试接口" class="headerlink" title="1.2、测试接口"></a>1.2、测试接口</h3><p>我这里使用的是postman来进行调用API测试，检查接口是否可正常使用：</p><p><img src="https://codestar.top/note-image/202401090016953.png" alt="image-20240109001629872"></p><p>可以看到，能够正常返回正确的json数据，我们要取的是其中的”hitokoto”字段值，在后续的配置文件中会用到这个字段。</p><h2 id="2、站点配置"><a href="#2、站点配置" class="headerlink" title="2、站点配置"></a>2、站点配置</h2><p>在找到可以使用的API之后，我们需要将其配置到站点中，定期更新。修改站点配置文件<code>_config.yml</code>，其中有一段slogon配置：</p><p><img src="https://codestar.top/note-image/202401090019455.png" alt="image-20240109001947396"></p><p>将API的地址填入上面的url，将开关enable置为<code>true</code>即可，其中<code>keys</code>填入需要获取值的字段名称。请求方式这个接口使用GET类型，按需配置。</p><p>**注：**这里有一个要求，需要将打字机的效果打开才能正常的生效API，将下面的配置改为true：</p><p><img src="https://codestar.top/note-image/202401080032091.png" alt="image-20240108003221050"></p><h2 id="3、部署到网站"><a href="#3、部署到网站" class="headerlink" title="3、部署到网站"></a>3、部署到网站</h2><p>配置完成之后，执行下面指令，重新生成网页：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>可以通过<code>http://localhost:4000/</code>检查是否生效，我配置完能够正常访问如下：</p><p><img src="https://codestar.top/note-image/202401090021637.png" alt="image-20240109002159286"></p><p>之后，将博客部署到服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客优化</tag>
      
      <tag>建站指南</tag>
      
      <tag>HEXO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode：vscode插件首次使用报错问题解决</title>
    <link href="/leetcode/vscode-plugin-first-use-error-solution.html"/>
    <url>/leetcode/vscode-plugin-first-use-error-solution.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、错误现象"><a href="#1、错误现象" class="headerlink" title="1、错误现象"></a>1、错误现象</h2><p>无论是使用Leetcode官方插件，还是使用labuladong优化后的插件，首次使用时均会出现下面的报错：</p><p><img src="https://codestar.top/note-image/202401082344984.png" alt="image-20240108153854843"></p><p>根据提示，发现没有配置Node.js的环境：</p><ul><li>找到插件的配置文件，添加Node.js的执行文件的源路径（如果PC没有安装Node.js，参考第2节安装过程）：</li></ul><p><img src="https://codestar.top/note-image/202401082344759.png" alt="image-20240108155801217"></p><ul><li>之后重启vscode，插件初始化激活时会打印下面内容：</li></ul><p><img src="https://codestar.top/note-image/202401082344272.png" alt="image-20240108155931056"></p><h2 id="2、Node-js安装"><a href="#2、Node-js安装" class="headerlink" title="2、Node.js安装"></a>2、Node.js安装</h2><p>官网：<a href="https://nodejs.org/en/download">https://nodejs.org/en/download</a></p><p>下载选择最新的长期支持版本：</p><p><img src="https://codestar.top/note-image/202401082344517.png" alt="image-20240108154938555"></p><p>下载完成后，双击exe安装文件，根据向导一路安装即可（除了自定义安装路径，其他无需修改），<strong>安装完成之后会默认添加PATH环境变量</strong>。</p><h2 id="3、登录leetcode插件"><a href="#3、登录leetcode插件" class="headerlink" title="3、登录leetcode插件"></a>3、登录leetcode插件</h2><h3 id="3-1、Cookie获取"><a href="#3-1、Cookie获取" class="headerlink" title="3.1、Cookie获取"></a>3.1、Cookie获取</h3><p>浏览器中登录leetcode之后，F12进入开发者模式，在网络一块中查找POST这一类型的接口请求，如：<a href="https://leetcode.cn/graphql/">https://leetcode.cn/graphql/</a></p><p>在标头（header）位置将其中的cookie后值全部拷贝。</p><p><img src="https://codestar.top/note-image/202401082345545.png" alt="image-20240108162207427"></p><p>**注：**使用原始格式更方便查看。</p><h3 id="3-2、登录leetcode"><a href="#3-2、登录leetcode" class="headerlink" title="3.2、登录leetcode"></a>3.2、登录leetcode</h3><p>进入插件，点击Sign in：</p><p><img src="https://codestar.top/note-image/202401082345251.png" alt="image-20240108160438644"></p><p>按照自己账号对应的平台选择，两个站点对应的账号非共享：</p><p><img src="https://codestar.top/note-image/202401082345601.png" alt="image-20240108160456017"></p><p>支持下面两种登录方式：</p><p><img src="https://codestar.top/note-image/202401082345238.png" alt="image-20240108160631444"></p><p>一般情况建议使用Cookie登录。</p><p>之后，获取到cookie，重新登录leetcode：先输入电话号码–》再填入cookie。登录成功之后正常获取到练题数据显示如下：</p><p><img src="https://codestar.top/note-image/202401082346142.png" alt="image-20240108162347421"></p><p>可以正常的刷题啦：</p><p><img src="https://codestar.top/note-image/202401082346977.png" alt="image-20240108200425908"></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>LeetCode</tag>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android fastboot驱动无法安装和识别问题</title>
    <link href="/android/fastoot-driver-install.html"/>
    <url>/android/fastoot-driver-install.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、问题现象及原因"><a href="#1、问题现象及原因" class="headerlink" title="1、问题现象及原因"></a>1、问题现象及原因</h2><p>Android fastboot模式下出现在其他设备中：</p><p><img src="https://codestar.top/note-image/image-20231108102720963.png" alt="image-20231108102720963"></p><p>指令也不生效：</p><p><img src="https://codestar.top/note-image/image-20231108102800265.png" alt="image-20231108102800265"></p><p>典型的驱动问题，在此之前已经安装了驱动。出现这个现象，很可能是驱动异常或者不兼容当前的fastboot设备。</p><h2 id="2、Google官网下载驱动包"><a href="#2、Google官网下载驱动包" class="headerlink" title="2、Google官网下载驱动包"></a>2、Google官网下载驱动包</h2><p>进入官方下载页面：<a href="https://developer.android.com/studio/run/win-usb?hl=zh-cn">https://developer.android.com/studio/run/win-usb?hl=zh-cn</a></p><p><img src="https://codestar.top/note-image/image-20231108102942717.png" alt="image-20231108102942717"></p><p>下载下来会是一个压缩包：usb_driver_r13-windows.zip，解压文件后使用。</p><h2 id="3、手动安装fastboot驱动"><a href="#3、手动安装fastboot驱动" class="headerlink" title="3、手动安装fastboot驱动"></a>3、手动安装fastboot驱动</h2><p>直接选择本地路径，进入下一页安装会出现下面的无法安装的情况：</p><p><img src="https://codestar.top/note-image/image-20231108103240406.png" alt="image-20231108103240406"></p><p><img src="https://codestar.top/note-image/image-20231108103222742.png" alt="image-20231108103222742"></p><p>需要手动，在PC本地选取到驱动路径来进行安装：</p><p>直接点击下面的选项，不要点击下一页：</p><p><img src="https://codestar.top/note-image/image-20231108103329623.png" alt="image-20231108103329623"></p><p>双击“显示所有设备”，或选中点击下一页：</p><p><img src="https://codestar.top/note-image/image-20231108103435463.png" alt="image-20231108103435463"></p><p>选择第一个，从磁盘安装：</p><p><img src="https://codestar.top/note-image/image-20231108105025315.png" alt="image-20231108105025315"></p><p>选择本地路径：</p><p><img src="https://codestar.top/note-image/image-20231108105109152.png" alt="image-20231108105109152"></p><p>之后就能成功的看到下面的驱动程序了，下一页安装：</p><p><img src="https://codestar.top/note-image/image-20231108105434813.png" alt="image-20231108105434813"></p><p>会出现一个安装告警弹窗，选择“是”直接安装，之后会开始安装驱动，逐个页面点击安装就行：</p><p><img src="https://codestar.top/note-image/image-20231108110036086.png" alt="image-20231108110036086"></p><p><strong>注：<strong>安装的过程可能会涉及到签名校验无法安装，关闭Windows的三方签名校验即可，参考</strong>4、关闭强制签名校验</strong>一节。</p><p>安装完成：</p><p><img src="https://codestar.top/note-image/image-20231108110147911.png" alt="image-20231108110147911"></p><p>之后就能正常的接入fastboot设备使用了：</p><p><img src="https://codestar.top/note-image/image-20231108110349965.png" alt="image-20231108110349965"></p><p><img src="https://codestar.top/note-image/image-20231108110444773.png" alt="image-20231108110444773"></p><h2 id="4、关闭强制签名校验"><a href="#4、关闭强制签名校验" class="headerlink" title="4、关闭强制签名校验"></a>4、关闭强制签名校验</h2><h3 id="4-1、Windows10配置"><a href="#4-1、Windows10配置" class="headerlink" title="4.1、Windows10配置"></a>4.1、Windows10配置</h3><p>使用<kbd>win</kbd>+<kbd>U</kbd>，打开设置页面，进入“主页”–&gt;“更新和安全”–&gt;“恢复”–&gt;“高级启动”–&gt;“立即重新启动”：</p><p><img src="https://codestar.top/note-image/image-20231207000134224.png" alt="image-20231207000134224"></p><p>之后按下面配置，“疑难解答”—&gt;“高级选项”–&gt;“启动设置”–&gt;“重启”，输入7或者F7禁用强制签名校验：</p><p><img src="https://codestar.top/note-image/image-20231207001231881.png" alt="image-20231207001231881"></p><p><img src="https://codestar.top/note-image/image-20231207001512625.png" alt="image-20231207001512625"></p><p>重启之后，重新安装驱动文件即可，会弹出信任第三方驱动的警告，同意即可。</p><h3 id="4-2、Windows11配置"><a href="#4-2、Windows11配置" class="headerlink" title="4.2、Windows11配置"></a>4.2、Windows11配置</h3><p>使用<kbd>win</kbd>+<kbd>U</kbd>，打开设置页面，进入“系统”–&gt;“恢复”–&gt;“高级启动”–&gt;“立即重新启动”：</p><p><img src="https://codestar.top/note-image/image-20231206235959721.png" alt="image-20231206235959721"></p><p>后续启动配置同上。</p><h3 id="4-3、永久禁用强制签名校验"><a href="#4-3、永久禁用强制签名校验" class="headerlink" title="4.3、永久禁用强制签名校验"></a>4.3、永久禁用强制签名校验</h3><p>之前的两种方法只是临时关闭签名校验，当设备重新开关机之后，又会重新恢复校验签名。为了方便后续更改驱动，可以使用下面的方法来永久禁用签名：</p><ul><li><kbd>win</kbd>+<kbd>X</kbd>打开启动菜单栏，选择“命令提示符（管理员）”，输入下列指令以关闭签名校验：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">bcdedit /<span class="hljs-built_in">set</span> nointegritychecks on<br></code></pre></td></tr></table></figure><ul><li>重新开启签名校验，输入下列指令：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">bcdedit /<span class="hljs-built_in">set</span> nointegritychecks off<br></code></pre></td></tr></table></figure><p>**注：**如果未生效，需要在BIOS中关闭Secure Boot。</p>]]></content>
    
    
    <categories>
      
      <category>Android技术</category>
      
      <category>FASTBOOT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>FASTBOOT</tag>
      
      <tag>驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 11安装hexo后，hexo指令无法识别问题</title>
    <link href="/windows/windows-11-install-hexo-command-not-found.html"/>
    <url>/windows/windows-11-install-hexo-command-not-found.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、现象"><a href="#1、现象" class="headerlink" title="1、现象"></a>1、现象</h2><p>无论是在Windows terminal中，还是在cmd，以及Node.js prompt中，在<strong>已经安装完成hexo或hexo-cli的情况下，无法识别到hexo指令</strong>，类似如下：</p><p><img src="https://codestar.top/note-image/image-20231009003053103.png" alt="image-20231009003053103"></p><p><img src="https://codestar.top/note-image/image-20231009003245022.png" alt="image-20231009003245022"></p><p>尝试在命令路径下执行，依旧不行。</p><p>查找本地的npm安装路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm root -g<br></code></pre></td></tr></table></figure><p><code>D:\Node.js\node_global\node_modules</code>将其添加到环境变量，发现依旧无效，查询方法</p><h2 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h2><p>上网查阅资料，处理方法为，将下面的路径加入到环境变量path中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">your-user-name 是你自己的电脑用户名</span><br>C:\\Users\\your-user-name\\AppData\\Roaming\\npm<br></code></pre></td></tr></table></figure><p>**但是！！！**很奇怪的是，我的APPDATA下没有npm这个路径：</p><p><img src="https://codestar.top/note-image/image-20231009232454879.png" alt="image-20231009232454879"></p><p>在另外一台Windows10上安装就没有出现这种问题，在Windows 11上就有这种奇怪的现象！</p><p>**思考：**到底是什么原因导致的，我在Windows terminal中，还是在cmd，以及Node.js prompt中，甚至是进入到<code>D:\Node.js\node_global\node_modules</code>相应的安装路径下执行，都还是找不到hexo这个命令，我重装hexo都不生效。</p><p>而修改环境变量更加不可行，本身我的node.js已经记录在环境变量的path下，原则上来说应该不影响才对。到底是什么原因？继续查找答案。</p><p><img src="https://codestar.top/note-image/image-20231009232908162.png" alt="image-20231009232908162"></p><h2 id="3、另辟蹊径之重装Node-js"><a href="#3、另辟蹊径之重装Node-js" class="headerlink" title="3、另辟蹊径之重装Node.js"></a>3、另辟蹊径之重装Node.js</h2><p>尝试重装Node.js</p><p><img src="https://codestar.top/note-image/image-20231009221659111.png" alt="image-20231009221659111"></p><p>安装额外的工具，安装完成之后，重新执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>依旧无法识别到hexo指令。。</p><p>之后又尝试重启电脑，然而，也并不管用。</p><p>检查本地是否已经安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm list -g<br></code></pre></td></tr></table></figure><p>很明显，我是已经安装的，但就是无法执行。。。</p><p><img src="https://codestar.top/note-image/image-20231010001701220.png" alt="image-20231010001701220"></p><h2 id="4、问题解决方法的探索"><a href="#4、问题解决方法的探索" class="headerlink" title="4、问题解决方法的探索"></a>4、问题解决方法的探索</h2><p>前面几种思路，查阅到的网上的处理方法也不管用，去官网看一下文档，尝试能否找到答案。</p><p>通过查阅<a href="https://hexo.io/docs/">hexo官方文档</a>，找到一种替代的方法可以执行hexo指令：</p><p><img src="https://codestar.top/note-image/image-20231009233558162.png" alt="image-20231009233558162"></p><p>使用npx来间接性的调用hexo指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx hexo &lt;command&gt;<br></code></pre></td></tr></table></figure><p>这个是可行的：</p><p><img src="https://codestar.top/note-image/image-20231009233633976.png" alt="image-20231009233633976"></p><p>基本的指令都是可以执行的：</p><p><img src="https://codestar.top/note-image/image-20231009234944537.png" alt="image-20231009234944537"></p><p>但是这种使用方式是在不配置环境变量的情况下才用，在实际的使用过程中会很不方便。</p><p>那接下来如何将我的PC本地的环境配置上hexo的bin路径？我继续查找方法。</p><p>我的PC使用<code>npx hexo</code>能够正常的执行，那么PC上肯定有可执行的同名文件，利用everything一搜索，果然找到了如下的文件，没错就是这个hexo.cmd文件：</p><p><img src="https://codestar.top/note-image/image-20231010001928018.png" alt="image-20231010001928018"></p><p>进入到这个路径下，检查文件，文件夹结构和我们的<code>C:\\Users\\your-user-name\\AppData\\Roaming\\npm</code>目录是一样的，全局安装路径。</p><p><img src="https://codestar.top/note-image/image-20231010001547905.png" alt="image-20231010001547905"></p><p>知道了之后，再将这个路径添加到系统path环境变量中试一试：</p><p><kbd>win</kbd>+<kbd>R</kbd>打开运行窗口，输入<code>sysdm.cpl</code>，高级</p><p><img src="https://codestar.top/note-image/image-20231010002214974.png" alt="image-20231010002214974"></p><p><img src="https://codestar.top/note-image/image-20231010002250920.png" alt="image-20231010002250920"></p><p>找到系统变量Path，编辑内容，<strong>新建</strong>一列，将这个路径拷贝进去：</p><p><img src="https://codestar.top/note-image/image-20231010002402709.png" alt="image-20231010002402709"></p><p>之后点击确定，关闭之前的运行窗口，重新打开，再尝试执行&#96;&#96;hexo&#96;指令，就大功告成了：</p><p><img src="https://codestar.top/note-image/image-20231010002546570.png" alt="image-20231010002546570"></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HEXO</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode调整窗口缩放级别来调整侧边栏大小</title>
    <link href="/ide/vscode-adjust-sidebar-size.html"/>
    <url>/ide/vscode-adjust-sidebar-size.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、解决思路"><a href="#1、解决思路" class="headerlink" title="1、解决思路"></a>1、解决思路</h2><p>想要调整侧边栏，可以通过调整页面的缩放级别来实现。</p><h2 id="2、vscode配置"><a href="#2、vscode配置" class="headerlink" title="2、vscode配置"></a>2、vscode配置</h2><p><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>p</kbd>打开选项栏，选择”首选项：打开用户设置”：</p><p><img src="https://codestar.top/note-image/image-20231202112048982.png" alt="image-20231202112048982"></p><p>进入设置页面后，搜索<code>window.zoomlevel</code>：</p><p><img src="https://codestar.top/note-image/image-20231202111921382.png" alt="image-20231202111921382"></p><p>放大窗口，设置值大于1即可，缩小窗口即设置为0-1之间的值即可。</p><p>设置完后，整体页面大小会进行变化。</p>]]></content>
    
    
    <categories>
      
      <category>IDE</category>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDE</tag>
      
      <tag>vscode</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO：github+hexo搭建个人博客流程</title>
    <link href="/website/hexo-set-blog-flow.html"/>
    <url>/website/hexo-set-blog-flow.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、github建库"><a href="#1、github建库" class="headerlink" title="1、github建库"></a>1、github建库</h2><h3 id="1-1、准备github账号"><a href="#1-1、准备github账号" class="headerlink" title="1.1、准备github账号"></a>1.1、准备github账号</h3><p>进入<a href="https://github.com/">GitHub官网</a>，点击右上角<code>Sign up</code>注册账户：</p><p><img src="https://codestar.top/note-image/image-20231202160043674.png" alt="image-20231202160043674"></p><p>填入邮箱，继续：</p><p><img src="https://codestar.top/note-image/image-20231202160203092.png" alt="image-20231202160203092"></p><p>自定义登录密码：</p><p><img src="https://codestar.top/note-image/image-20231202160257867.png" alt="image-20231202160257867"></p><p>之后填写用户名，当出现xxx is available时用户名可用：</p><p><img src="https://codestar.top/note-image/image-20231202160538160.png" alt="image-20231202160538160"></p><p>之后出现订阅栏，可选非必填：</p><p><img src="https://codestar.top/note-image/image-20231202160657226.png" alt="image-20231202160657226"></p><p>之后验证一下账户：</p><p><img src="https://codestar.top/note-image/image-20231202160755159.png" alt="image-20231202160755159"></p><p>完成验证之后，就可以开始创建账户了：</p><p><img src="https://codestar.top/note-image/image-20231202160933793.png" alt="image-20231202160933793"></p><p>之后会验证一下邮箱，填写接收到的验证码，即可成功创建账户。</p><h3 id="1-2、创建xxx-github-io库"><a href="#1-2、创建xxx-github-io库" class="headerlink" title="1.2、创建xxx.github.io库"></a>1.2、创建xxx.github.io库</h3><p>进入个人主页，点击页面右上角“+”，选择 New repository创建仓库：</p><p><img src="https://codestar.top/note-image/image-20231008201212195.png" alt="image-20231008201212195"></p><p>创建github代码仓库。注意，库名一定要为xxx.github.io做结尾，xxx部分可自定义：</p><p><img src="https://codestar.top/note-image/image-20231008200106092.png" alt="image-20231008200106092"></p><p>创建仓库文件：</p><p><img src="https://codestar.top/note-image/image-20231008200326697.png" alt="image-20231008200326697"></p><p>新建文件一定要为index.html文件，且只能有1个html文件：</p><p>加入任意html内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>yaorongke<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>演示页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>codestar！！！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231008202347446.png" alt="image-20231008202347446"></p><p><img src="https://codestar.top/note-image/image-20231008202533883.png" alt="image-20231008202533883"></p><h3 id="1-3、开启github-pages"><a href="#1-3、开启github-pages" class="headerlink" title="1.3、开启github pages"></a>1.3、开启github pages</h3><p>新建好了仓库之后，进入<code>setting</code>开启<code>github pages</code>功能：</p><p><img src="https://codestar.top/note-image/image-20231008203331362.png" alt="image-20231008203331362"></p><p>进入<code>Pages</code>页面：</p><p>在Branch选择main分支，点击save，之后再点击GitHub Pages：</p><p><img src="https://codestar.top/note-image/image-20231008205155447.png" alt="image-20231008205155447"></p><p>完成上面的步骤后，进入新的页面，选择<code>Project site</code>以及<code>Start from scratch</code>再下拉到页面底部，点击done即可：</p><p><img src="https://codestar.top/note-image/image-20231008204951174.png" alt="image-20231008204951174"></p><p><img src="https://codestar.top/note-image/image-20231008203522967.png" alt="image-20231008203522967"></p><p>之后再返回到自己的仓库，查看Pages页面，会查看到对应的网页地址已经启用：</p><p>**&#x3D;&#x3D;注：&#x3D;&#x3D;**由于我这边有两个仓库开放Github Pages，地址会叠加，可忽略。Github Pages功能为统一开启和统一关闭，无法单独为某个仓库开放。</p><p><img src="https://codestar.top/note-image/image-20231008210035443.png" alt="image-20231008210035443"></p><p>然后进入到对应的地址，就可以正常访问了：</p><p><img src="https://codestar.top/note-image/image-20231008210524431.png" alt="image-20231008210524431"></p><h2 id="2、安装Node-js"><a href="#2、安装Node-js" class="headerlink" title="2、安装Node.js"></a>2、安装Node.js</h2><p>进入<a href="https://nodejs.org/zh-tw/download">Node.js官网</a>，下载LTS版本，选择对应的平台下载即可：</p><p><img src="https://codestar.top/note-image/image-20231008211513177.png" alt="image-20231008211513177"></p><p>双击安装程序，选择完安装路径后，根据引导面板一路安装即可：</p><p><img src="https://codestar.top/note-image/image-20231008211831706.png" alt="image-20231008211831706"></p><p>在必要工具安装选框这，勾选上：</p><p><img src="https://codestar.top/note-image/image-20231008212119136.png" alt="image-20231008212119136"></p><p>安装后会新增以下工具：</p><p><img src="https://codestar.top/note-image/image-20231008213430610.png" alt="image-20231008213430610"></p><p>修改npm镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局修改为淘宝镜像源</span><br>npm config set registry https://registry.npm.taobao.org <br>npm config list -l             # 查看所有配置项<br>npm config get [&lt;key&gt;]         # 查看某一项的配置信息<br>npm config set &lt;key&gt; &lt;value&gt;   # 设置某一项的配置信息<br></code></pre></td></tr></table></figure><p>进入<code>Node.js command prompt</code>，检查npm版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm --version<br></code></pre></td></tr></table></figure><p>正常会返回对应的版本号。</p><h2 id="3、安装HEXO工具"><a href="#3、安装HEXO工具" class="headerlink" title="3、安装HEXO工具"></a>3、安装HEXO工具</h2><p>HEXO为基于Node.js的静态网页生成工具，用来搭建个人博客很适合。在安装完了Node.js之后，接下来就是安装HEXO工具了，使用npm指令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在Node.js <span class="hljs-built_in">command</span> prompt中输入</span><br>npm install -g hexo-cli<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者使用下面的指令安装</span><br>npm install hexo -g<br><span class="hljs-meta prompt_"># </span><span class="language-bash">升级</span><br>npm update hexo -g <br></code></pre></td></tr></table></figure><p>正常返回：</p><p><img src="https://codestar.top/note-image/image-20231008214129313.png" alt="image-20231008214129313"></p><p>检查hexo版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo -v<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231008214229734.png" alt="image-20231008214229734"></p><p>新建1个空目录，在shell面板cd到对应路径下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化：需要管理员权限</span><br>hexo init hexo_blog<br></code></pre></td></tr></table></figure><p>初始化完成后会生成以下文件：</p><p><img src="https://codestar.top/note-image/image-20231008215117731.png" alt="image-20231008215117731"></p><p><img src="https://codestar.top/note-image/image-20231008215446588.png" alt="image-20231008215446588"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd hexo_blog<br>npm install<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231008215556478.png" alt="image-20231008215556478"></p><p>本地启动博客：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo server<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231008215758391.png" alt="image-20231008215758391"></p><p>看到这个页面就大功告成了：</p><p><img src="https://codestar.top/note-image/image-20231008215954507.png" alt="image-20231008215954507"></p><h2 id="4、hexo与github仓库关联"><a href="#4、hexo与github仓库关联" class="headerlink" title="4、hexo与github仓库关联"></a>4、hexo与github仓库关联</h2><h3 id="4-1、Git配置"><a href="#4-1、Git配置" class="headerlink" title="4.1、Git配置"></a>4.1、Git配置</h3><p>在博客路径下，右键选择<code>Open Git Bash Here</code>：</p><p><img src="https://codestar.top/note-image/image-20231010204957690.png" alt="image-20231010204957690"></p><p>配置github账号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;minixiaoxin&quot;<br>git config --global user.email &quot;1799258962@qq.com&quot;<br></code></pre></td></tr></table></figure><p>配置完成之后，可以通过<code>git config --list</code>查看配置的内容：</p><p><img src="https://codestar.top/note-image/image-20231010205430422.png" alt="image-20231010205430422"></p><p>生成密钥SSH Key：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;1799258962@qq.com&quot;<br></code></pre></td></tr></table></figure><p>生成的过程中一路<code>enter</code>敲过去就行。</p><p>查看刚才生成的Key，后面需要将它放入github中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>在Github中，点击个人头像，进入<code>setting</code>–》<code>SSH and GPG keys</code>，添加新的ssh key。将刚才查看的key内容复制到下面的key栏中：</p><p><img src="https://codestar.top/note-image/image-20231010205924150.png" alt="image-20231010205924150"></p><p>之后保存即可：</p><p><img src="https://codestar.top/note-image/image-20231010210410735.png" alt="image-20231010210410735"></p><p>在bash面板中输入下面的指令验证key 连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>出现<code>successful authenticated</code>说明连接成功：</p><p><img src="https://codestar.top/note-image/image-20231010210540262.png" alt="image-20231010210540262"></p><h3 id="4-2、修改博客站点配置"><a href="#4-2、修改博客站点配置" class="headerlink" title="4.2、修改博客站点配置"></a>4.2、修改博客站点配置</h3><p>hexo网站建立成功之后，则需要将其与我们GitHub的仓库相关联，进入博客路径，在博客根路径下，<code>_config.yml_</code>为站点配置文件：</p><p><img src="https://codestar.top/note-image/image-20231008235315031.png" alt="image-20231008235315031"></p><p>翻到最后，修改deploy这一段：</p><p><img src="https://codestar.top/note-image/image-20231008235513160.png" alt="image-20231008235513160"></p><p>修改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repo: https://github.com/minixiaoxin/codestar.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>填入的是仓库的地址，进入仓库，直接拷贝这个地址填入就行：</p><p><img src="https://codestar.top/note-image/image-20231008235725193.png" alt="image-20231008235725193"></p><p>改好了之后保存站点文件：</p><p><img src="https://codestar.top/note-image/image-20231008235833034.png" alt="image-20231008235833034"></p><h3 id="4-3、连接github-token"><a href="#4-3、连接github-token" class="headerlink" title="4.3、连接github token"></a>4.3、连接github token</h3><p>进入github，setting，找到<code>Developer Settings</code>，进入<code>Personal access tokens</code>：</p><p>新建一个token，勾选下面的访问权限，开多了不安全，过期时间保持默认就行，不建议开永不过期：</p><p><img src="https://codestar.top/note-image/image-20231010211904548.png" alt="image-20231010211904548"></p><p>下拉到页面最下方，点击<code>Generator token</code>即可。</p><p>在站点配置文件中，deploy改为以下内容，加入了一列token属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs she">deploy:<br>  type: git<br>  repo: https://github.com/minixiaoxin/codestar.github.io.git<br>  branch: master<br>  token: your_token<br></code></pre></td></tr></table></figure><p>然后部署网站：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br></code></pre></td></tr></table></figure><h3 id="4-4、博客部署"><a href="#4-4、博客部署" class="headerlink" title="4.4、博客部署"></a>4.4、博客部署</h3><p>安装git部署插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或执行</span><br>npm i hexo-deployer-git<br></code></pre></td></tr></table></figure><p>正常执行返回如下：</p><p><img src="https://codestar.top/note-image/image-20231009000428664.png" alt="image-20231009000428664"></p><p>之后，再分别输入三条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">等价于:hexo cl</span><br>hexo clean<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231009103530211.png" alt="image-20231009103530211"></p><p>生成静态网页：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">等价于:hexo generate</span><br>hexo g<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231009103615664.png" alt="image-20231009103615664"></p><p>本地预览：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">等价于:hexo server</span><br>hexo s<br></code></pre></td></tr></table></figure><p>部署网站：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">等价于:hexo deploy</span><br>hexo d<br></code></pre></td></tr></table></figure><p>成功如下：</p><p><img src="https://codestar.top/note-image/image-20231010220157027.png" alt="image-20231010220157027"></p><p>后面就可以直接在github上看到文件提交了，在我们的网站上看到自己的博客：</p><p><img src="https://codestar.top/note-image/image-20231010224142330.png" alt="image-20231010224142330"></p><p><img src="https://codestar.top/note-image/image-20231010224803391.png" alt="image-20231010224803391"></p><h2 id="5、关联个人域名"><a href="#5、关联个人域名" class="headerlink" title="5、关联个人域名"></a>5、关联个人域名</h2><p>如果有自己的域名，可以将其关联上。我这使用的是namesoli的域名：</p><p>在namesoli控制后台添加一个解析，类型为CNAME:</p><p><img src="https://codestar.top/note-image/image-20231010225429266.png" alt="image-20231010225429266"></p><p>点击蓝球球：</p><p><img src="https://codestar.top/note-image/image-20231010225457731.png" alt="image-20231010225457731"></p><p><img src="https://codestar.top/note-image/image-20231010225645462.png" alt="image-20231010225645462"></p><p>之后在github中添加自定义域名：</p><p><img src="https://codestar.top/note-image/image-20231010225155405.png" alt="image-20231010225155405"></p><p>这样就完成了域名配置，访问域名可以直接跳转到我们的博客了。</p><h2 id="6、修改站点显示语言"><a href="#6、修改站点显示语言" class="headerlink" title="6、修改站点显示语言"></a>6、修改站点显示语言</h2><p>修改站点路径下的<code>_config.yml</code>文件来配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 显示中文</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-comment"># 显示英文</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">en</span><br></code></pre></td></tr></table></figure><h2 id="7、更换HEXO博客主题"><a href="#7、更换HEXO博客主题" class="headerlink" title="7、更换HEXO博客主题"></a>7、更换HEXO博客主题</h2><p>这里我以fluid主题来演示：</p><h3 id="7-1、下载主题源码"><a href="#7-1、下载主题源码" class="headerlink" title="7.1、下载主题源码"></a>7.1、下载主题源码</h3><p>github官方库：<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">https://github.com/fluid-dev/hexo-theme-fluid/releases</a></p><p>打开发布页，在最新版本下面找到<code>Source code.zip</code>，点击加载到本地：</p><p><img src="https://codestar.top/note-image/image-20231010235532329.png" alt="image-20231010235532329"></p><p>将压缩包解压，文件移动到hexo博客根目录下的theme目录：</p><p><img src="https://codestar.top/note-image/image-20231010235718388.png" alt="image-20231010235718388"></p><p>并将主题目录重新命名为fluid（注意目录层级，主题路径后一定要为css等资源文件，不能嵌套目录）：</p><p><img src="https://codestar.top/note-image/image-20231010235820060.png" alt="image-20231010235820060"></p><p>名称也可以不更改，直接使用<code>hexo-theme-fluid-1.9.5</code>，这样的话在<code>_config.yml</code>配置文件中theme字段也填入这个名称来就行。</p><h3 id="7-2、修改站点配置并部署"><a href="#7-2、修改站点配置并部署" class="headerlink" title="7.2、修改站点配置并部署"></a>7.2、修改站点配置并部署</h3><p>修改站点配置文件<code>_config.yml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">字段theme，没有则手动添加该字段</span><br>theme: fluid<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231011001123205.png" alt="image-20231011001123205"></p><p>完成修改之后，本地预览：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p>成功生成会展示如下页面：</p><p><img src="https://codestar.top/note-image/image-20231012003828038.png" alt="image-20231012003828038"></p><p><img src="https://codestar.top/note-image/image-20231012003858847.png" alt="image-20231012003858847"></p><p>之后，就可以进一步部署到github了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo d<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231012005601022.png" alt="image-20231012005601022"></p><p>把博客页面重新刷新一下就可以啦，so happy。</p><h2 id="8、添加页面"><a href="#8、添加页面" class="headerlink" title="8、添加页面"></a>8、添加页面</h2><h3 id="8-1、添加分类页面"><a href="#8-1、添加分类页面" class="headerlink" title="8.1、添加分类页面"></a>8.1、添加分类页面</h3><p>创建分类页面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page categories<br></code></pre></td></tr></table></figure><p>创建成功如下：</p><p><img src="https://codestar.top/note-image/image-20231012224842751.png" alt="image-20231012224842751"></p><p><img src="https://codestar.top/note-image/image-20231012224951266.png" alt="image-20231012224951266"></p><p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-10-12 22:48:17</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>添加<code>type: &quot;categories&quot;</code>到内容中，添加后是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2017-05-27 13:47:40</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>完成修改之后，后面每创建1篇文章，属性列中，支持”categories”这个属性。</p><h3 id="8-2、添加标签页"><a href="#8-2、添加标签页" class="headerlink" title="8.2、添加标签页"></a>8.2、添加标签页</h3><p>创建<code>标签页</code>与<code>分类页面</code>操作类似，操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page tags<br></code></pre></td></tr></table></figure><p>创建成功如下：</p><p><img src="https://codestar.top/note-image/image-20231012225453438.png" alt="image-20231012225453438"></p><p>然后编辑生成的<code>index.md</code>文件，添加<code>tags属性</code>：</p><p>默认内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">---<br>title: tags<br>date: 2023-10-12 22:54:41<br>---<br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">---<br>title: 标签<br>date: 2023-10-12 22:54:41<br>type: &quot;tags&quot;<br>---<br></code></pre></td></tr></table></figure><p>后面每创建1篇文章，其中的属性列中，支持”tags”这个属性。</p><h3 id="8-3、子导航栏"><a href="#8-3、子导航栏" class="headerlink" title="8.3、子导航栏"></a>8.3、子导航栏</h3><p>使用submenu来录入二级导航栏：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>    <span class="hljs-comment"># 文章归档页--二级菜单：归档、分类、标签</span><br>    <span class="hljs-bullet">-</span> &#123; <br>        <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;文章&quot;</span>,<br>          <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-icon_books&quot;</span>,<br>          <span class="hljs-attr">submenu:</span> [<br>            &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;,<br>            &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;,<br>            &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>          ] &#125;<br>    <span class="hljs-bullet">-</span> &#123; <br>        <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;个人&quot;</span>, <br>          <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span>,<br>          <span class="hljs-attr">submenu:</span> [<br>            &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-info&quot;</span> &#125;<br>          ] &#125;<br></code></pre></td></tr></table></figure><p>实际效果：</p><p><img src="https://codestar.top/note-image/image-20231027235342913.png" alt="image-20231027235342913"></p><h3 id="8-4、添加关于页"><a href="#8-4、添加关于页" class="headerlink" title="8.4、添加关于页"></a>8.4、添加关于页</h3><p><code>关于我</code>页面，需要手动创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page about<br></code></pre></td></tr></table></figure><p>会生成相应的页面：</p><p><img src="https://codestar.top/note-image/image-20231012211032250.png" alt="image-20231012211032250"></p><p>根据自己需求，修改对应的MD文件,，添加layout属性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">---<br>title: MiniXiaoxin<br>date: 2023-10-12 21:09:51<br>layout: about<br>---<br>正文内容：<br>这是MiniXiaoxin的博客，记录在知识的海洋里学习到的每一点小小的知识。<br></code></pre></td></tr></table></figure><p>添加完成后，重新生成页面，并本地预览后可部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br>hexo d<br></code></pre></td></tr></table></figure><h2 id="9、发布新文章"><a href="#9、发布新文章" class="headerlink" title="9、发布新文章"></a>9、发布新文章</h2><h3 id="9-1、markdown新建文章配置"><a href="#9-1、markdown新建文章配置" class="headerlink" title="9.1、markdown新建文章配置"></a>9.1、markdown新建文章配置</h3><p>文章以markdown格式进行存储，可以修改一些配置方便新建文章：</p><p>修改站点文件<code>_config.yml</code>，修改下面的配置可以在新建文章的时候，生成一个同名的资源目录用于存放图片文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">post_asset_folder: true<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231012212413325.png" alt="image-20231012212413325"></p><h3 id="9-2、新建博文"><a href="#9-2、新建博文" class="headerlink" title="9.2、新建博文"></a>9.2、新建博文</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo n &quot;我的第一篇文章&quot;<br></code></pre></td></tr></table></figure><p>执行完成之后，会在<code>source\_posts</code>下生成一个新的md文件和一个同名的资源目录：</p><p><img src="https://codestar.top/note-image/image-20231012213940917.png" alt="image-20231012213940917"></p><p><img src="https://codestar.top/note-image/image-20231012214019324.png" alt="image-20231012214019324"></p><p>打开之后，是下面的这些内容：顶部为文章的一些属性信息，可以方便做文章归类</p><p>**&#x3D;&#x3D;注意：&#x3D;&#x3D;**在属性”:”符号后面，需要添加一个空格，否则文章不生效</p><p><img src="https://codestar.top/note-image/image-20231202171219218.png" alt="image-20231202171219218"></p><p>可以添加的属性有这些：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">title: postName               文章标题<br>date: 2013-12-02 15:30:16     文章编写的时间，这里可以随意修改<br>updated: 2013-12-02 15:30:16  文件的修改日期<br>categories:                   文章分类目录，可以为空<br>tags:                         文章标签，可空，多标签请用格式[tag1,tag2,tag3]<br>author:                       文章作者声明<br>description:                  对本页的描述，相当于是一个简介，如果这个定义了，就会在首页中出现这里的内容而不会出现整个文章详细内容。<br></code></pre></td></tr></table></figure><h3 id="9-3、博文Front-matter配置"><a href="#9-3、博文Front-matter配置" class="headerlink" title="9.3、博文Front-matter配置"></a>9.3、博文Front-matter配置</h3><p>hexo中有Front-matter这个概念，是文件最上方以 — 分隔的区域，用于指定个别文件的变量。配置tags和categories: 示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">---<br>title: 我的博文<br>date: 2023-10-12 21:35:14<br>categories: <br>- 分类一<br>- 子分类<br>tags: <br>- 标签一<br>- 子标签<br>---<br>我的博文<br></code></pre></td></tr></table></figure><p>子标签和子分类<strong>支持多个</strong>，每个标签或分类占一行。</p><h3 id="9-3、删除文章"><a href="#9-3、删除文章" class="headerlink" title="9.3、删除文章"></a>9.3、删除文章</h3><p>如果需要删除一篇历史文章，只需要在<code>source\_posts</code>下，<strong>删除相应的markdown文件和资源目录</strong>就行，然后重新生成静态页面，预览并部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo s<br>hexo d<br></code></pre></td></tr></table></figure><h3 id="9-5、文章管理"><a href="#9-5、文章管理" class="headerlink" title="9.5、文章管理"></a>9.5、文章管理</h3><h4 id="1）标签及分来管理"><a href="#1）标签及分来管理" class="headerlink" title="1）标签及分来管理"></a>1）标签及分来管理</h4><p>分类及标签管理：</p><p>创建了<strong>分类</strong>和<strong>标签</strong>页面之后，就可以在文章中<strong>配置分类</strong>和<strong>页签属性</strong>了，通过这两个属性来管理发布的文章了：</p><p>对上面的第一篇文章做修改，添加分类和标签如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">---<br>title: 我的第一篇文章<br>date: 2023-10-12 21:35:14<br>categories: <br>- 测试内容<br>tags: <br>- 测试文章<br>---<br>我的第一篇博客文章<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231012230610082.png" alt="image-20231012230610082"></p><p>重新生成静态页面并预览：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231012232517358.png" alt="image-20231012232517358"></p><h4 id="2）源文件夹分类管理"><a href="#2）源文件夹分类管理" class="headerlink" title="2）源文件夹分类管理"></a>2）源文件夹分类管理</h4><p>通过发布文章的资源文件夹来管理文章：</p><p>在hexo中，可以在<code>_post</code>文章源路径下创建不同的路径来标识文章，方便自己管理。在生成页面的时候不会根据这个路径来标识，依旧会通过前面配置的<strong>分类和标签属性来标识</strong>，创建路径示例：</p><p><img src="https://codestar.top/note-image/image-20231110003802687.png" alt="image-20231110003802687"></p><p>之后同样执行<code>hexo g</code>生成静态页面：</p><p><img src="https://codestar.top/note-image/image-20231110003911612.png" alt="image-20231110003911612"></p><p>文章依旧可以正常的访问，但页面URL会有所不同，方便自己本地进行文章管理。</p><h3 id="9-6、新建草稿文章"><a href="#9-6、新建草稿文章" class="headerlink" title="9.6、新建草稿文章"></a>9.6、新建草稿文章</h3><p>如果文章还没写完，或者暂时不想公开，这时候可以将文章保存为草稿。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new draft &quot;new draft&quot;<br></code></pre></td></tr></table></figure><p>执行上面命令，会在 <code>source/_drafts</code> 目录下生成一个 new-draft.md 文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到 <code>_drafts</code> 目录之中。</p><p>如果你希望强行预览草稿，更改配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>或者，如下方式启动 server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo server --drafts<br></code></pre></td></tr></table></figure><p>下面这条命令可以把草稿变成文章，或者页面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo publish [layout]<br></code></pre></td></tr></table></figure><h3 id="9-7、文章属性"><a href="#9-7、文章属性" class="headerlink" title="9.7、文章属性"></a>9.7、文章属性</h3><table><thead><tr><th>属性名称</th><th>作用</th><th>属性名称</th><th>作用</th></tr></thead><tbody><tr><td>layout</td><td>Layout 类型</td><td>excerpt_link</td><td>摘要链接文本</td></tr><tr><td>title</td><td>文章标题</td><td>reward</td><td>是否启用文章打赏功能</td></tr><tr><td>date</td><td>创建日期</td><td>reward_comment</td><td>打赏功能的评论提示文本</td></tr><tr><td>updated</td><td>修改日期</td><td>no_reward</td><td>是否禁用全局的打赏功能</td></tr><tr><td>comments</td><td>是否开启评论</td><td>hide_in_summary</td><td>是否在文章列表中隐藏该文章</td></tr><tr><td>tags</td><td>标签</td><td>password</td><td>访问文章所需密码</td></tr><tr><td>categories</td><td>分类</td><td>Disqus_shortname</td><td>用于集成 Disqus 评论系统的短名称</td></tr><tr><td>permalink</td><td>自定义 URL</td><td>Duoshuo_shortname</td><td>用于集成多说评论系统的短名称</td></tr><tr><td>author</td><td>作者</td><td>Facebook_comments</td><td>是否启用 Facebook 评论插件</td></tr><tr><td>excerpt</td><td>文章摘要</td><td>Instagram</td><td>嵌入 Instagram 相册到文章中</td></tr><tr><td>top_img</td><td>置顶图片</td><td>Weibo_frame</td><td>在文章中嵌入微博帖子</td></tr><tr><td>cover_img</td><td>封面图片</td><td>gitment_owner</td><td>Gitment 评论系统的仓库拥有者</td></tr><tr><td>toc</td><td>是否启用目录</td><td>gitment_repo</td><td>Gitment 评论系统的仓库名称</td></tr></tbody></table><p>示例1：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Hello, Hexo&quot;</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-01-01 10:00:00</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">技术</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Hexo</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">静态网站生成器</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">post</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">John</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">&quot;这是一篇测试文章&quot;</span><br><span class="hljs-attr">top_img:</span> <span class="hljs-string">&quot;/images/top.jpg&quot;</span><br><span class="hljs-attr">cover_img:</span> <span class="hljs-string">&quot;/images/cover.jpg&quot;</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">toc_depth:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">slides:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">excerpt_link:</span> <span class="hljs-string">&quot;继续阅读&quot;</span><br><span class="hljs-attr">reward:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">reward_comment:</span> <span class="hljs-string">&quot;如果觉得本文对您有帮助，欢迎打赏支持！&quot;</span><br><span class="hljs-attr">no_reward:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">hide_in_summary:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Hello, Hexo&quot;</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-01-01 10:00:00</span><br><span class="hljs-attr">updated:</span> <span class="hljs-number">2022-02-15 13:30:00</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Hexo</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">静态网站生成器</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">技术</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">&quot;/hello-hexo/&quot;</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">John</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">&quot;这是一篇测试文章&quot;</span><br><span class="hljs-attr">top_img:</span> <span class="hljs-string">&quot;/images/top.jpg&quot;</span><br><span class="hljs-attr">cover_img:</span> <span class="hljs-string">&quot;/images/cover.jpg&quot;</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">toc_depth:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">post</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>示例3：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Hello, Hexo&quot;</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-01-01 10:00:00</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">技术</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Hexo</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">静态网站生成器</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">post</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">John</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">&quot;这是一篇测试文章&quot;</span><br><span class="hljs-attr">top_img:</span> <span class="hljs-string">&quot;/images/top.jpg&quot;</span><br><span class="hljs-attr">cover_img:</span> <span class="hljs-string">&quot;/images/cover.jpg&quot;</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">toc_depth:</span> <span class="hljs-number">2</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h3 id="9-8、添加文章脚注"><a href="#9-8、添加文章脚注" class="headerlink" title="9.8、添加文章脚注"></a>9.8、添加文章脚注</h3><p>主题内置了脚注语法支持，可以在文章末尾自动生成带有锚点的脚注，该功能在<strong>主题配置</strong><code>_config.yml</code>中默认开启：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">footnote:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>脚注语法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一句话[^1]<br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">这是对应的脚注</span><br></code></pre></td></tr></table></figure><p>更优雅的使用方式，是将脚注写在文末，比如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">正文<br><br><span class="hljs-section">## 参考</span><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">参考资料1</span><br>[<span class="hljs-symbol">^2</span>]: <span class="hljs-link">参考资料2</span><br></code></pre></td></tr></table></figure><p>当然你也可以通过修改上方配置项 <code>header</code> 来自动加入节标题，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">footnote:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&lt;h2&gt;参考&lt;/h2&gt;&#x27;</span>  <span class="hljs-comment"># 等同于手动写 `## 参考`</span><br></code></pre></td></tr></table></figure><h3 id="9-9、多标签及子分类"><a href="#9-9、多标签及子分类" class="headerlink" title="9.9、多标签及子分类"></a>9.9、多标签及子分类</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 多标签：标签只存在并列关系，无上下级关系</span><br><span class="hljs-attr">tags:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">JAVA</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Windows</span><br><span class="hljs-comment"># 子分类：-Linux即为子分类</span><br><span class="hljs-attr">categories:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">Linux技术</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Linux</span><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231026225821444.png" alt="image-20231026225821444"></p><p><img src="https://codestar.top/note-image/image-20231026225713983.png" alt="image-20231026225713983"></p><h3 id="9-10、文章在首页的封面图"><a href="#9-10、文章在首页的封面图" class="headerlink" title="9.10、文章在首页的封面图"></a>9.10、文章在首页的封面图</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><p>将图片放入到img文件夹中。</p><h3 id="9-11、文章页顶部大图"><a href="#9-11、文章页顶部大图" class="headerlink" title="9.11、文章页顶部大图"></a>9.11、文章页顶部大图</h3><p>默认显示<strong>主题配置</strong>中的 <code>post.banner_img</code>，如需要设置单个文章的 Banner，在 <a href="https://hexo.io/zh-cn/docs/front-matter">front-matter (opens new window)</a>中指定 <code>banner_img</code> 属性。</p><p>本地图片存放位置同上。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/post_banner.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><h2 id="10、删除页面"><a href="#10、删除页面" class="headerlink" title="10、删除页面"></a>10、删除页面</h2><p>直接删除<code>hexo/source</code>路径下的非_post路径即可，删除后，重新生成静态页面部署即可完成页面的删除：</p><p><img src="https://codestar.top/note-image/image-20231027235438283.png" alt="image-20231027235438283"></p><h2 id="11、启用404页面"><a href="#11、启用404页面" class="headerlink" title="11、启用404页面"></a>11、启用404页面</h2><p>通过github配置的站点，不需要额外配置404页面，主题<strong>默认支持</strong>。</p><h2 id="12、修改头像等图片信息"><a href="#12、修改头像等图片信息" class="headerlink" title="12、修改头像等图片信息"></a>12、修改头像等图片信息</h2><p><strong>图像资源路径：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo_blog\themes\fluid\source\img<br></code></pre></td></tr></table></figure><p>修改其中的”default.png”为网站首页背景图、”avatar.png”为头像、”fliud.png”为网页图标、”loading.gif”为加载动图，另外一个为备案图标。</p><p><img src="https://codestar.top/note-image/image-20231018003807575.png" alt="image-20231018003807575"></p><h3 id="12-1、修改网页背景图"><a href="#12-1、修改网页背景图" class="headerlink" title="12.1、修改网页背景图"></a>12.1、修改网页背景图</h3><p>查询替换掉所有的”default.png”</p><p><img src="https://codestar.top/note-image/image-20231018010517213.png" alt="image-20231018010517213"></p><h3 id="12-2、启用头像并修改"><a href="#12-2、启用头像并修改" class="headerlink" title="12.2、启用头像并修改"></a>12.2、启用头像并修改</h3><p>在主题的<code>_config.yml</code>配置文件中，修改<code>about</code>关于页面中<code>avatar</code>属性来配置头像，图源为上面的<code>图源资源路径</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/wall-1.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/mnxin-blackavatar.png</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;mini小新&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;一个追逐知识，记录知识的少年。&quot;</span><br></code></pre></td></tr></table></figure><h3 id="12-3、修改网页图标"><a href="#12-3、修改网页图标" class="headerlink" title="12.3、修改网页图标"></a>12.3、修改网页图标</h3><p>在主题的<code>_config.yml</code>文件中修改下面的内容，j将其中的<code>/img/fluid.png</code>替换为自己的图标：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">用于浏览器标签的图标</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Icon <span class="hljs-keyword">for</span> browser tab</span><br>favicon: /img/web-icon1.png<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">用于苹果设备的图标</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Icon <span class="hljs-keyword">for</span> Apple <span class="hljs-built_in">touch</span></span><br>apple_touch_icon: /img/web-icon1.png<br></code></pre></td></tr></table></figure><h2 id="13、版权声明"><a href="#13、版权声明" class="headerlink" title="13、版权声明"></a>13、版权声明</h2><p>在主题下的<code>_config.yml</code>配置文件下，开启：</p><p>**&#x3D;&#x3D;注：&#x3D;&#x3D;**需要文章设置<code>author</code>字段值。</p><p>配置为’BY-NC-SA’类型：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">copyright:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># CreativeCommons license</span><br>    <span class="hljs-comment"># Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND</span><br>    <span class="hljs-attr">license:</span> <span class="hljs-string">&#x27;BY-NC-SA&#x27;</span><br>    <br><br>    <span class="hljs-comment"># 显示作者</span><br>    <span class="hljs-attr">author:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 显示发布日期</span><br>    <span class="hljs-comment"># Show post date</span><br>    <span class="hljs-attr">post_date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span><br><br>    <span class="hljs-comment"># 显示更新日期</span><br>    <span class="hljs-comment"># Show update date</span><br>    <span class="hljs-attr">update_date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span><br></code></pre></td></tr></table></figure><p>实际效果：</p><p><img src="https://codestar.top/note-image/image-20231024013253080.png" alt="image-20231024013253080"></p><p>关于许可协议，可以学习这篇文章：</p><p><a href="https://kevin-okay.github.io/2019/08/25/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%85%B1%E4%BA%AB%E8%AE%B8%E5%8F%AF%E8%AF%81/">https://kevin-okay.github.io/2019/08/25/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%85%B1%E4%BA%AB%E8%AE%B8%E5%8F%AF%E8%AF%81/</a></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站指南</tag>
      
      <tag>HEXO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows Terminal命令行工具安装过程指导</title>
    <link href="/windows/windows-terminal-installation.html"/>
    <url>/windows/windows-terminal-installation.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、在线安装"><a href="#1、在线安装" class="headerlink" title="1、在线安装"></a>1、在线安装</h2><p>使用Windows自带的应用商店下载：Windows Store直接搜索<code>terminal</code>下载第一个即可</p><p><img src="https://codestar.top/note-image/image-20231130224110717.png" alt="image-20231130224110717"></p><h2 id="2、离线安装"><a href="#2、离线安装" class="headerlink" title="2、离线安装"></a>2、离线安装</h2><p>Windows Terminal 微软官方有相应的Github库来维护和发布：<a href="https://github.com/microsoft/terminal/releases">https://github.com/microsoft/terminal/releases</a></p><p>去到微软官方GitHub仓库Release页面，根据系统对应版本下载安装包：</p><p><img src="https://codestar.top/note-image/image-20230216144337781.png" alt="image-20230216144337781"></p><p>下载完成之后，文件后缀为<code>.msixbundle</code>，直接双击安装包进行安装：</p><p><img src="https://codestar.top/note-image/image-20230216144504874.png" alt="image-20230216144504874"></p><p><img src="https://codestar.top/note-image/image-20230216144528352.png" alt="image-20230216144528352"></p><h2 id="3、问题记录"><a href="#3、问题记录" class="headerlink" title="3、问题记录"></a>3、问题记录</h2><p>出现**应用安装程序无法安装应用包相关项。请向开发人员索要  应用包。**的问题：</p><p><img src="https://codestar.top/note-image/image-20230216171030402.png" alt="image-20230216171030402"></p><p>可以尝试下面的方法来解决问题：</p><ul><li>1、启用<code>Microsoft Store Install Service</code>服务</li></ul><blockquote><p><kbd>Win</kbd>+<kbd>R</kbd>打开运行窗口，输入<code>services.msc</code>打开服务页面，找到<code>Microsoft Store Install Service</code>服务项，启动该项服务</p></blockquote><ul><li>2、重装<code>Microsoft Store</code></li></ul><blockquote><p>1）卸载Microsoft Store</p><p>右键 开始 -&gt; Windows PowerShell (Admin) -&gt; 输入下列指令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">get-appxpackage</span> *store* | <span class="hljs-built_in">remove-Appxpackage</span><br></code></pre></td></tr></table></figure><p>2）重启电脑，重新安装Microsoft Store</p><p>右键 开始 -&gt; Windows PowerShell (Admin) -&gt; 输入下列指令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">add-appxpackage</span> <span class="hljs-literal">-register</span> <span class="hljs-string">&quot;C:\Program Files\WindowsApps\*Store*\AppxManifest.xml&quot;</span> <span class="hljs-literal">-disabledevelopmentmode</span><br></code></pre></td></tr></table></figure></blockquote><ul><li>3、修改支持TLS协议</li></ul><blockquote><p><kbd>Win</kbd>+<kbd>R</kbd>打开运行窗口，输入<code>inetcpl.cpl </code>，“高级”，勾选<code>SSL 3.0 、TLS 1.0 、TLS 1.1 、TLS 1.2、TLS1.3</code>，应用后重启电脑</p></blockquote><p>之后重新运行离线安装包，即可正常安装。</p><p>参考：<a href="https://answers.microsoft.com/zh-hans/windows/forum/all/%E6%88%91%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85/c5ac1083-da00-4df8-940a-ca626267da3d">https://answers.microsoft.com/zh-hans/windows/forum/all/%E6%88%91%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85/c5ac1083-da00-4df8-940a-ca626267da3d</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>Windows Terminal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows Terminal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM笔记5：大模型开发的迭代验证</title>
    <link href="/ai-ml/llm-learning-note5.html"/>
    <url>/ai-ml/llm-learning-note5.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、迭代验证的一般思路"><a href="#1、迭代验证的一般思路" class="headerlink" title="1、迭代验证的一般思路"></a>1、迭代验证的一般思路</h2><p>参考：</p><p><a href="https://datawhalechina.github.io/llm-universe/#/C6/1.%20%E9%AA%8C%E8%AF%81%E8%BF%AD%E4%BB%A3%E7%9A%84%E4%B8%80%E8%88%AC%E6%80%9D%E8%B7%AF">https://datawhalechina.github.io/llm-universe/#/C6/1.%20%E9%AA%8C%E8%AF%81%E8%BF%AD%E4%BB%A3%E7%9A%84%E4%B8%80%E8%88%AC%E6%80%9D%E8%B7%AF</a></p><p>占坑，待完善</p><h2 id="2、Bad-Case优化"><a href="#2、Bad-Case优化" class="headerlink" title="2、Bad Case优化"></a>2、Bad Case优化</h2><p>参考：</p><p><a href="https://datawhalechina.github.io/llm-universe/#/C6/2.%20%E8%A7%A3%E5%86%B3Bad%20Case">https://datawhalechina.github.io/llm-universe/#/C6/2.%20%E8%A7%A3%E5%86%B3Bad%20Case</a></p><p>占坑，待完善</p><h2 id="3、大模型评估方法"><a href="#3、大模型评估方法" class="headerlink" title="3、大模型评估方法"></a>3、大模型评估方法</h2><p>参考：</p><p><a href="https://datawhalechina.github.io/llm-universe/#/C6/3.%20%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95">https://datawhalechina.github.io/llm-universe/#/C6/3.%20%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95</a></p><p>占坑，待完善</p>]]></content>
    
    
    <categories>
      
      <category>AI&amp;ML</category>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datawhale</tag>
      
      <tag>LLM</tag>
      
      <tag>AI&amp;ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM笔记4：LLM向量数据库构建</title>
    <link href="/ai-ml/llm-learning-note4.html"/>
    <url>/ai-ml/llm-learning-note4.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、知识库的数据"><a href="#1、知识库的数据" class="headerlink" title="1、知识库的数据"></a>1、知识库的数据</h2><h3 id="1-1、需要什么数据库？"><a href="#1-1、需要什么数据库？" class="headerlink" title="1.1、需要什么数据库？"></a>1.1、需要什么数据库？</h3><p>如何来构建一个适用于LLM的数据库，不同于传统的关系型数据库SQL那些，LLM中所存储的数据均为向量格式，在LLM中进行运算的也是以向量作为语料。也正是这个特殊点，LLM的数据库也称之为向量数据库。当前的方案是使用LangChain架构来构建出一个向量数据库，在LangChain中已经集成了30多个向量数据库工具，考虑到轻巧加载快捷的特点，这里使用<strong>Chroma向量数据库</strong>作为首选。</p><h3 id="1-2、数据的处理过程"><a href="#1-2、数据的处理过程" class="headerlink" title="1.2、数据的处理过程"></a>1.2、数据的处理过程</h3><p>明确了构建工具，接下来是构建流程。构建的过程，首先是语料收集和处理：</p><blockquote><p>数据语料，可以使用不同类型的格式文件，常见的如PDF文本文件、MP4视频文件、MD文本文件等。</p></blockquote><p>将这些文件经过处理之后，可以存储到向量数据库中，最终目的是要将这些数据转换为向量的格式。具体要经过下面的一些处理过程：</p><p><img src="https://codestar.top/note-image/image-20231121231529369.png" alt="image-20231121231529369"></p><p>方便处理的是文本类型的结构化数据，非结构化数据需要经过转化处理才能使用。</p><h2 id="2、向量数据库构建"><a href="#2、向量数据库构建" class="headerlink" title="2、向量数据库构建"></a>2、向量数据库构建</h2><h3 id="2-1、Chroma认识"><a href="#2-1、Chroma认识" class="headerlink" title="2.1、Chroma认识"></a>2.1、Chroma认识</h3><p>Chroma向量数据库，用来专门检索<strong>向量数据</strong>即<strong>Embedding</strong>的一种数据库系统，在LangChain集成，这里涉及到embedding一些知识点，参考下面的内容，暂时不做梳理：</p><blockquote><p>embedding的认识：</p><p><a href="https://datawhalechina.github.io/llm-universe/#/C2/%E9%99%843.LangChain%20%E8%87%AA%E5%AE%9A%E4%B9%89%20LLM%20embedding">https://datawhalechina.github.io/llm-universe/#/C2/%E9%99%843.LangChain%20%E8%87%AA%E5%AE%9A%E4%B9%89%20LLM%20embedding</a></p><p>调用智谱embedding：</p><p><a href="https://datawhalechina.github.io/llm-universe/#/C2/6.%20%E8%B0%83%E7%94%A8%E6%99%BA%E8%B0%B1%20AI(ChatGLM)%E7%94%9F%E6%88%90%20embedding">https://datawhalechina.github.io/llm-universe/#/C2/6.%20%E8%B0%83%E7%94%A8%E6%99%BA%E8%B0%B1%20AI(ChatGLM)%E7%94%9F%E6%88%90%20embedding</a></p></blockquote><p>向量数据库中的数据形式，其中每个向量代表一个数据项，每个向量，可以是文本、数字、或者图像亦或是视频等其他格式的数据类型。通过建立向量数据库，能够对其中的数据建立高效的索引，加速检索过程和存储过程的效率。</p><h3 id="2-2、通过向量数据库进行检索"><a href="#2-2、通过向量数据库进行检索" class="headerlink" title="2.2、通过向量数据库进行检索"></a>2.2、通过向量数据库进行检索</h3><p>在向量数据库中可以使用多种检索方式，有几个典型的检索：<br>1）相似度检索：以相似度即词的相关性进行检索</p><p>2）MMR检索：最大边际相关性（MMR，Maximum marginal relevance）。主要目的是在进行相似度检索的同时，增加内容的丰富度。</p><p>后续还有<strong>链锁式问答</strong>、<strong>结合Prompt提问过程</strong>处理，后续进行扩展。</p><h2 id="3、项目数据库构建"><a href="#3、项目数据库构建" class="headerlink" title="3、项目数据库构建"></a>3、项目数据库构建</h2><p>实践流程，将具体的文件处理成文档词向量化，存储到Chroma向量数据库中，从而建立我们的LLM应用数据源。按照第一章流程来建立项目数据库。</p><p>**注：**Embedding的类型有许多，根据使用的LLM大模型来实践。</p>]]></content>
    
    
    <categories>
      
      <category>AI&amp;ML</category>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datawhale</tag>
      
      <tag>LLM</tag>
      
      <tag>AI&amp;ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM笔记3：LLM项目设计及开发流程</title>
    <link href="/ai-ml/llm-learning-note3.html"/>
    <url>/ai-ml/llm-learning-note3.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、大模型开发"><a href="#1、大模型开发" class="headerlink" title="1、大模型开发"></a>1、大模型开发</h2><h3 id="1-1、大模型开发概念"><a href="#1-1、大模型开发概念" class="headerlink" title="1.1、大模型开发概念"></a>1.1、大模型开发概念</h3><p>初级大模型的开发，一般是将LLM作为一个调用工具，通过 <strong>Prompt Engineering、数据工程、业务逻辑分解</strong>等手段来发挥大模型的能力，一般不会去大幅度改动模型本身。通过调用LLM来适配不同的任务，之后在应用场景中去优化。</p><p>由于不需要对模型进行训练，无需构造类似于传统AI开发需要用到的训练集等内容，可以直接从我们所处的业务中自行构造出一小批特定场景的小验证集，重点工作主要还是在Prompt的设计上，以此来验证llm开发的效果是否达标。在开发过程中，尝试用 <strong>Prompt Engineering 来替代子模型的训练调优</strong>，通过 Prompt 链路组合来实现业务逻辑，用一个通用大模型 + 若干业务 Prompt 来解决任务</p><p>在实际的业务中，收集Bad Case，再通过这些Bad Case针对性优化Prompt，从而实现较好的泛化效果。相较于传统 AI 的评估过程，需要构造训练集、测试集、验证集，在训练集上训练模型、在测试集上调优模型、在验证集上最终验证模型效果，整个开发链路相对简化了一些。</p><h3 id="1-2、LLM项目开发的整理流程"><a href="#1-2、LLM项目开发的整理流程" class="headerlink" title="1.2、LLM项目开发的整理流程"></a>1.2、LLM项目开发的整理流程</h3><p>LLM项目的开发流程，整体上包含8个过程项，顺序如下图：</p><p><img src="https://codestar.top/note-image/image-20231121224818691.png" alt="image-20231121224818691"></p><ul><li>确定目标：需要明确出开发所针对的应用场景、目标人群和核心价值</li><li>功能设计：从业务逻辑中提炼出应用所应该要提供的功能，设计出一个完整的适配LLM场景的功能逻辑。</li><li>整体框架搭建：在明确好功能之后，需要对功能进行规划，明确好设计框架，当前通用的框架是 <strong>特定数据库（向量数据库）+ Prompt + 通用大模型</strong>。推荐使用LangChain框架来进行开发，其提供了Chain、Tool 等架构的实现，可以基于 LangChain 框架进行LLM的定制化，从而实现从用户输入到数据库再到大模型最后输出的整体架构连接</li><li>搭建数据库(向量)：开发过程需要使用到个性化的数据库进行支撑，由于LLM需要进行向量语义检索，一般使用想chroma的向量数据库。</li><li>Prompt Engineering：Prompt对LLM影响尤为深刻，这一步需要明确出Prompt的设计原则和技巧，一般借助于业务数据中收集到的验证集来设计满足要求、具备基本能力的Prompt。</li><li>验证迭代：模型开发完成之后，还需要对其中发现的Bad Case来进行针对性的改进Prompt，并验证改进，通过这个过程不断迭代不断优化，提升系统效果。</li><li>搭建前端后台：完整迭代优化之后，就已经完成了核心功能，后续可以进行前端后台的搭建。这个领域已经发展的非常成熟，主流的有两种快速开发Demo的框架有<strong>Gradio</strong>和<strong>Streamlit</strong>，可以是开发者迅速搭建可视化页面并实现Demo上线。</li><li>体验优化：到了这一步，基本上已经有了用户开始使用了，这一过程就需要来对用户体验进行跟踪，记录用户反馈及其中出现的Bad Case，从而对应用进行针对性的优化。</li></ul><p>基本的环节如上，其中比较核心的几个环节有，<strong>搭建向量数据库、Prompt Engineering、验证迭代</strong>，这几步对应用影响较大，甚至可以说直接决定了用户体验好坏与否。</p><h2 id="2、LLM项目流程"><a href="#2、LLM项目流程" class="headerlink" title="2、LLM项目流程"></a>2、LLM项目流程</h2><p>下面根据我们所需要实现的个人应用来按照上述的框架，做一些项目流程拆解：</p><h3 id="2-1、项目规划与需求分析"><a href="#2-1、项目规划与需求分析" class="headerlink" title="2.1、项目规划与需求分析"></a>2.1、项目规划与需求分析</h3><p>明确设计需求及应用功能：</p><ul><li>1）项目目标：</li></ul><blockquote><p>基于个人知识库的问答助手</p></blockquote><ul><li>2）<strong>核心功能</strong>：</li></ul><blockquote><ol><li>上传文档、创建知识库；</li><li>选择知识库，检索用户提问的知识片段；</li><li>提供知识片段与提问，获取大模型回答；</li><li>流式回复；</li><li>历史对话记录；</li></ol></blockquote><ul><li>3）确定技术架构和工具</li></ul><blockquote><ol><li>开发框架：LangChain框架</li><li>向量数据库：Chroma知识库</li><li>LLM：GPT、星火大模型、文心一言、GLM 等</li><li>前后端：Gradio 和 Streamlit</li></ol></blockquote><h3 id="2-2、向量数据库构建与数据获取"><a href="#2-2、向量数据库构建与数据获取" class="headerlink" title="2.2、向量数据库构建与数据获取"></a>2.2、向量数据库构建与数据获取</h3><h4 id="1）项目原理"><a href="#1）项目原理" class="headerlink" title="1）项目原理"></a>1）项目原理</h4><p>本项目实现原理如下图所示（<a href="https://github.com/chatchat-space/Langchain-Chatchat/blob/master/img/langchain+chatglm.png">图片来源</a> ）：</p><p><img src="https://codestar.top/note-image/image-20231119235902301.png" alt="image-20231119235902301"></p><p>过程概述如下：</p><blockquote><p>加载本地文档 -&gt; 读取文本 -&gt; 文本分割 -&gt; 文本向量化 -&gt; question向量化 -&gt; 在文本向量中匹配出与问句向量最相似的 top k个 -&gt; 匹配出的文本作为上下文和问题一起添加到 prompt中 -&gt; 提交给 LLM生成回答</p></blockquote><h4 id="2）收集和整理用户提供的文档"><a href="#2）收集和整理用户提供的文档" class="headerlink" title="2）收集和整理用户提供的文档"></a>2）收集和整理用户提供的文档</h4><p>用户常用文档格式有 pdf、txt、doc 等，首先使用工具读取文本，通常使用 langchain 的文档加载器模块可以方便的将用户提供的文档加载进来，也可以使用一些 python 比较成熟的包进行读取。</p><p>由于目前大模型使用 token 的限制，我们需要对读取的文本进行切分，将较长的文本切分为较小的文本，这时一段文本就是一个单位的知识。</p><h4 id="3）将文档词向量化"><a href="#3）将文档词向量化" class="headerlink" title="3）将文档词向量化"></a>3）将文档词向量化</h4><p>使用文本嵌入(Embeddings)对分割后的文档进行向量化，使语义相似的文本片段具有接近的向量表示。然后，存入向量数据库，这个流程正是创建 <code>索引(index)</code> 的过程。</p><p>向量数据库对各文档片段进行索引，支持快速检索。这样，当用户提出问题时，可以先将问题转换为向量，在数据库中快速找到语义最相关的文档片段。然后将这些文档片段与问题一起传递给语言模型，生成回答</p><h4 id="4）将向量化后的文档导入Chroma知识库，建立知识库索引"><a href="#4）将向量化后的文档导入Chroma知识库，建立知识库索引" class="headerlink" title="4）将向量化后的文档导入Chroma知识库，建立知识库索引"></a>4）将向量化后的文档导入Chroma知识库，建立知识库索引</h4><p>Langchain 集成了超过 30 个不同的向量存储库。我们选择 Chroma 向量库是因为它轻量级且数据存储在内存中，这使得它非常容易启动和开始使用。</p><p>将用户知识库内容经过 embedding 存入向量知识库，然后用户每一次提问也会经过 embedding，利用向量相关性算法（例如余弦算法）找到最匹配的几个知识库片段，将这些知识库片段作为上下文，与用户问题一起作为 prompt 提交给 LLM 回答。</p><h3 id="2-3、大模型集成与API连接"><a href="#2-3、大模型集成与API连接" class="headerlink" title="2.3、大模型集成与API连接"></a>2.3、大模型集成与API连接</h3><ol><li>集成GPT、星火、文心、GLM 等大模型，配置 API 连接。</li><li>编写代码，实现与大模型 API 的交互，以便获取问题答案。</li></ol><h3 id="2-4、核心功能实现"><a href="#2-4、核心功能实现" class="headerlink" title="2.4、核心功能实现"></a>2.4、核心功能实现</h3><ol><li>构建 Prompt Engineering，实现大模型回答功能，根据用户提问和知识库内容生成回答。</li><li>实现流式回复，允许用户进行多轮对话。</li><li>添加历史对话记录功能，保存用户与助手的交互历史。</li></ol><h3 id="2-5、核心功能迭代优化"><a href="#2-5、核心功能迭代优化" class="headerlink" title="2.5、核心功能迭代优化"></a>2.5、核心功能迭代优化</h3><ol><li>进行验证评估，收集 Bad Case。</li><li>根据 Bad Case 迭代优化核心功能实现。</li></ol><h3 id="2-6、前端与用户交互界面开发"><a href="#2-6、前端与用户交互界面开发" class="headerlink" title="2.6、前端与用户交互界面开发"></a>2.6、前端与用户交互界面开发</h3><ol><li>使用 Gradio 和 Streamlit 搭建前端界面。</li><li>实现用户上传文档、创建知识库的功能。</li><li>设计用户界面，包括问题输入、知识库选择、历史记录展示等。</li></ol><h3 id="2-7、部署测试与上线"><a href="#2-7、部署测试与上线" class="headerlink" title="2.7、部署测试与上线"></a>2.7、部署测试与上线</h3><ol><li>部署问答助手到服务器或云平台，确保可在互联网上访问。</li><li>进行生产环境测试，确保系统稳定。</li><li>上线并向用户发布。</li></ol><h3 id="2-8、维护与持续改进"><a href="#2-8、维护与持续改进" class="headerlink" title="2.8、维护与持续改进"></a>2.8、维护与持续改进</h3><ol><li>监测系统性能和用户反馈，及时处理问题。</li><li>定期更新知识库，添加新的文档和信息。</li><li>收集用户需求，进行系统改进和功能扩展。</li></ol><p>整个流程将确保项目从规划、开发、测试到上线和维护都能够顺利进行，为用户提供高质量的基于个人知识库的问答助手。</p><h2 id="3、LLM项目开发架构"><a href="#3、LLM项目开发架构" class="headerlink" title="3、LLM项目开发架构"></a>3、LLM项目开发架构</h2><h3 id="3-1、整体架构"><a href="#3-1、整体架构" class="headerlink" title="3.1、整体架构"></a>3.1、整体架构</h3><p>经过上文分析，本项目为搭建一个<strong>基于大模型的个人知识库助手</strong>，基于 LangChain 框架搭建，核心技术包括 <strong>LLM API 调用、向量数据库、检索问答链</strong>等。项目整体架构如下：</p><p><img src="https://codestar.top/note-image/image-20231120001308172.png" alt="image-20231120001308172"></p><p>图来源于：<a href="https://github.com/datawhalechina/llm-universe/blob/main/figures/structure.jpg">https://github.com/datawhalechina/llm-universe/blob/main/figures/structure.jpg</a></p><p>如上，本项目从底向上依次分为 <strong>LLM 层、数据层、数据库层、应用层与服务层</strong>：<br>① <strong>LLM</strong> 层主要基于四种流行 LLM API 进行了 LLM 调用封装，支持用户以统一的入口、方式来访问不同的模型，支持随时进行模型的切换；<br>② <strong>数据层</strong> 主要包括个人知识库的源数据以及 Embedding API，源数据经过 Embedding 处理可以被向量数据库使用；<br>③ <strong>数据库层</strong> 主要为基于个人知识库源数据搭建的向量数据库，在本项目中我们选择了 Chroma；<br>④ <strong>应用层</strong> 为核心功能的最顶层封装，我们基于 LangChain 提供的检索问答链基类进行了进一步封装，从而支持不同模型切换以及便捷实现基于数据库的检索问答；<br>⑤ 最顶层为<strong>服务层</strong>，我们分别实现了 Gradio 搭建 Demo 与 FastAPI 组建 API 两种方式来支持本项目的服务访问。</p><h3 id="3-2、代码结构"><a href="#3-2、代码结构" class="headerlink" title="3.2、代码结构"></a>3.2、代码结构</h3><p>本项目的完整代码存放于 <a href="https://github.com/datawhalechina/llm-universe">project</a> 目录下，实现了项目的全部功能及封装，代码结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs markup">-project<br>    -readme.md 项目说明<br>    -requirements.txt 使用依赖包的版本 <br>    -llm LLM调用封装<br>        -self_llm.py 自定义 LLM 基类<br>        -wenxin_llm.py 自定义百度文心 LLM<br>        -spark_llm.py 自定义讯飞星火 LLM<br>        -zhipuai_llm.py 自定义智谱AI LLM<br>        -call_llm.py 将各个 LLM 的原生接口封装在一起<br>        -test.ipynb 使用示例<br>    -embedding embedding调用封装<br>        -zhipuai_embedding.py 自定义智谱AI embedding<br>        -call_embedding.py 调用 embedding 模型 <br>    -data 源数据路径<br>    -database 数据库层封装<br>        -create_db.py 处理源数据及初始化数据库封装<br>    -qa_chain 应用层封装<br>        -qa_chain.py 封装检索问答链，返回一个检索问答链对象<br>        -chat_qa_chian.py：封装对话检索链，返回一个带有历史记录的对话检索链对象<br>        -get_vectordb.py 返回向量数据库对象<br>        -model_to_llm.py 调用模型<br>        -test.ipynb 使用示例<br>    -serve 服务层封装<br>        -run_gradio.py 启动 Gradio 界面<br>        -api.py 封装 FastAPI<br>        -run_api.sh 启动 API<br>        -test.ipynb 使用示例Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h3 id="3-3、项目逻辑"><a href="#3-3、项目逻辑" class="headerlink" title="3.3、项目逻辑"></a>3.3、项目逻辑</h3><ol><li>用户：可以通过<code> run_gradio</code> 或者 <code>run_api </code>启动整个服务；</li><li>服务层调用 qa_chain.py 或 chat_qa_chain 实例化对话检索链对象，实现全部核心功能；</li><li>服务层和应用层都可以调用、切换 prompt_template.py 中的 prompt 模板来实现 prompt 的迭代；</li><li>也可以直接调用 call_llm 中的 get_completion 函数来实现不使用数据库的 LLM；</li><li>应用层调用已存在的数据库和 llm 中的自定义 LLM 来构建检索链；</li><li>如果数据库不存在，应用层调用 create_db.py 创建数据库，该脚本可以使用 openai embedding 也可以使用 embedding.py 中的自定义 embedding</li></ol><h3 id="3-4、-各层简析"><a href="#3-4、-各层简析" class="headerlink" title="3.4、 各层简析"></a>3.4、 各层简析</h3><h4 id="1）LLM-层"><a href="#1）LLM-层" class="headerlink" title="1）LLM 层"></a>1）LLM 层</h4><p>LLM 层主要功能为将国内外四种知名 LLM API（OpenAI-ChatGPT、百度文心、讯飞星火、智谱GLM）进行封装，隐藏不同 API 的调用差异，实现在同一个对象或函数中通过不同的 model 参数来使用不同来源的 LLM。</p><p>在 LLM 层，我们首先构建了一个 Self_LLM 基类，基类定义了所有 API 的一些共同参数（如 API_Key，temperature 等）；然后我们在该基类基础上继承实现了上述四种 LLM API 的自定义 LLM。同时，我们也将四种 LLM 的原生 API 封装在了统一的 get_completion 函数中。</p><p>在上一章，我们已详细介绍了每一种 LLM 的调用方式、封装方式，项目代码中的 LLM 层封装就是上一章讲解的代码实践。</p><h4 id="2）数据层"><a href="#2）数据层" class="headerlink" title="2）数据层"></a>2）数据层</h4><p>数据层主要包括个人知识库的源数据（包括 pdf、txt、md 等）和 Embedding 对象。源数据需要经过 Embedding 处理才能进入向量数据库，我们在数据层自定义了智谱提供的 Embedding API 的封装，支持上层以统一方式调用智谱 Embedding 或 OpenAI Embedding。</p><p>在上一章，我们也已详细介绍了 Embdding API 的调用及封装方式。</p><h4 id="3）数据库层"><a href="#3）数据库层" class="headerlink" title="3）数据库层"></a>3）数据库层</h4><p>数据库层主要存放了向量数据库文件。同时，我们在该层实现了源数据处理、创建向量数据库的方法。</p><p>我们将在第四章详细介绍向量数据库、源数据处理方法以及构建向量数据库的具体实现。</p><h4 id="4）应用层"><a href="#4）应用层" class="headerlink" title="4）应用层"></a>4）应用层</h4><p>应用层封装了整个项目的全部核心功能。我们基于 LangChain 提供的检索问答链，在 LLM 层、数据库层的基础上，实现了本项目检索问答链的封装。自定义的检索问答链除具备基本的检索问答功能外，也支持通过 model 参数来灵活切换使用的 LLM。我们实现了两个检索问答链，分别是有历史记录的 Chat_QA_Chain 和没有历史记录的 QA_Chain。</p><p>我们将在第五章讲解 Prompt 的构造与检索问答链的构建细节。</p><h4 id="5）服务层"><a href="#5）服务层" class="headerlink" title="5）服务层"></a>5）服务层</h4><p>服务层主要是基于应用层的核心功能封装，实现了 Demo 的搭建或 API 的封装。在本项目中，我们分别实现了通过 Gradio 搭建前端界面与 FastAPI 进行封装，支持多样化的项目调用。</p><p>我们将在第六章详细介绍如何使用 Gradio 以及 FastAPI 来实现服务层的设计。</p><h2 id="4、参考："><a href="#4、参考：" class="headerlink" title="4、参考："></a>4、参考：</h2><p><a href="https://datawhalechina.github.io/llm-universe/#/C3/3.%20%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E7%AE%80%E6%9E%90">https://datawhalechina.github.io/llm-universe/#/C3/3.%20%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E7%AE%80%E6%9E%90</a></p>]]></content>
    
    
    <categories>
      
      <category>AI&amp;ML</category>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datawhale</tag>
      
      <tag>LLM</tag>
      
      <tag>AI&amp;ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python执行websocket连接出现websocket has no attribute enableTrace错误</title>
    <link href="/python/python-websocket-connection-attribute-error.html"/>
    <url>/python/python-websocket-connection-attribute-error.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、问题现象"><a href="#1、问题现象" class="headerlink" title="1、问题现象"></a>1、问题现象</h2><p>在websocket同服务器进行连接时，出现没有<code>enableTrace</code>属性：</p><p><img src="https://codestar.top/note-image/image-20231118234948161.png" alt="image-20231118234948161"></p><h2 id="2、问题原因"><a href="#2、问题原因" class="headerlink" title="2、问题原因"></a>2、问题原因</h2><p>检查一下当前安装的库，websocket：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip show websocket<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118234835661.png" alt="image-20231118234835661"></p><p>检查这个库的相关发布信息：已经很久没维护了，早已被弃用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip_search websocket<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118235204165.png" alt="image-20231118235204165"></p><h2 id="3、问题解决方法"><a href="#3、问题解决方法" class="headerlink" title="3、问题解决方法"></a>3、问题解决方法</h2><p>后续Python中websocket库改为使用websocket-client，需要重新安装：</p><p>卸载websocket，这个已弃用，websockets中没有<code>enableTrace</code>模块，还会影响websocket-client，也卸载掉：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip uninstall websocket<br>pip uninstall websockets<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118234913614.png" alt="image-20231118234913614"></p><p>必须要将websocket和websockets这两个库都卸载掉才能修复问题，否则websocket-client不会生效：</p><p><img src="https://codestar.top/note-image/image-20231119000205745.png" alt="image-20231119000205745"></p><p><img src="https://codestar.top/note-image/image-20231119000316817.png" alt="image-20231119000316817"></p><p>重新安装websocket-client：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install websocket-client -i https://pypi.tuna.tsinghua.edu.cn/simple/<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231119001929840.png" alt="image-20231119001929840"></p><p>**注意：**由于之前安装的websocket和websockets的影响，websocket-client不会重新安装<code>enableTrace</code>模块，需要卸载再重装才会生效。</p><p><img src="https://codestar.top/note-image/image-20231119002127863.png" alt="image-20231119002127863"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>websocket</tag>
      
      <tag>pip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM笔记2-1：Python实现大模型API的调用</title>
    <link href="/ai-ml/llm-learning-note2-1.html"/>
    <url>/ai-ml/llm-learning-note2-1.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、Prompt认识"><a href="#1、Prompt认识" class="headerlink" title="1、Prompt认识"></a>1、Prompt认识</h2><h3 id="1-1、Prompt基本概念"><a href="#1-1、Prompt基本概念" class="headerlink" title="1.1、Prompt基本概念"></a>1.1、Prompt基本概念</h3><p>关于LLM大模型，在前面已经有了了解，现在来了解一下什么是prompt。在LLM发展早期，prompt是一个被用来给LLM下发任务的模板，每种分类任务或聚类任务对应一种prompt，当然不局限于此。随着LLM技术的发展以及ChatGPT的诞生，prompt已经泛指为给大模型的所有输入内容，不仅限与文字。我们与LLM的每次对话，都可视为一个prompt，而经过LLM输出的结果，称其为<strong>Completion</strong>。简单点理解，输入即为prompt，输出即为completion。</p><p><img src="https://codestar.top/note-image/image-20231118102533309.png" alt="image-20231118102533309"></p><h3 id="1-2、Prompt中的常用参数"><a href="#1-2、Prompt中的常用参数" class="headerlink" title="1.2、Prompt中的常用参数"></a>1.2、Prompt中的常用参数</h3><ul><li><p>**Temperature：**生成结果的随机性</p><blockquote><p>参数范围：[0 ,1]</p></blockquote></li></ul><blockquote><p>当temperature &#x3D; 0时，LLM的创造性最低，生成的结果更加的<strong>保守</strong>，可预测，适用于一些对结果准确度或格式要求很高的场景。</p><p>当temperature &#x3D; 1时，LLM的创造性最高，生成的结果更加的<strong>随机</strong>，难以预测，适用于一些更需要创造力的场景，如写作，设计等。</p></blockquote><ul><li><p><strong>system prompt：</strong></p><blockquote><p><strong>prompt中优先级更高的一种prompt，在一次完整的对话中，只会生效一个 system prompt</strong>，如果一个对话中出现两个system prompt，则生效的为后者。system prompt的的主要作用是提前设定好LLM所扮演的角色或者预先的条件，这样在后续的输入中能够按照这个要求来给出更准确或更契合场景的回答。效果主要是用来提升用例体验，ChatGPT API开放后这概念被大量推广。不得不说，效果很好。</p></blockquote></li></ul><p>使用示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;<br>    &quot;system prompt&quot;:&quot;我想让你充当一个花哨的标题生成器。我会用逗号输入关键字，你会用花哨的标题回复。我的第一个关键字是 api、test、automation&quot;,<br>    &quot;user prompt&quot;:&quot;今日天气，很靓&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用效果，确实会生成花里胡哨的标题<img src="https://codestar.top/note-image/0BC47B01.png" alt="0BC47B01">：</p><p><img src="https://codestar.top/note-image/image-20231118104713638.png" alt="image-20231118104713638"></p><p>**注：**这里所支持的角色可以根据自己的想法来设定，它所能做的能力范围有多大，全靠你想像有多大，能力不是无限大，<strong>在允许范围内尝试</strong></p><ul><li><p><strong>user prompt：</strong></p><blockquote><p>prompt中的另一种：user prompt，等价于我们正常的输入，它的优先级会比system prompt优先级更低，如上述的示例，其中”今日天气，很靓”便是一个user prompt。区别在于，我们在一段完整对话中，可以迭代很多个user prompt，但system prompt只能有一个。</p></blockquote></li></ul><h2 id="2、环境准备"><a href="#2、环境准备" class="headerlink" title="2、环境准备"></a>2、环境准备</h2><h3 id="2-1、Anaconda安装"><a href="#2-1、Anaconda安装" class="headerlink" title="2.1、Anaconda安装"></a>2.1、Anaconda安装</h3><p><a href="https://www.anaconda.com/download">Anaconda官网</a>下载安装包：</p><p><img src="https://codestar.top/note-image/image-20231118131922857.png" alt="image-20231118131922857"></p><p>之后双击安装程序，修改安装路径之后按照推荐设定安装即可，此处不详述。</p><p>安装完成后，将anaconda中的Python配置到系统环境变量<code>path</code>中：添加两条环境变量路径如下，<code>D:\Anaconda</code>为我本地安装的路径</p><p><img src="https://codestar.top/note-image/image-20231118140057806.png" alt="image-20231118140057806"></p><h3 id="2-2、工具pip-search安装"><a href="#2-2、工具pip-search安装" class="headerlink" title="2.2、工具pip-search安装"></a>2.2、工具pip-search安装</h3><p>pip-search可以用来查找指定的包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install pip-search -i https://pypi.tuna.tsinghua.edu.cn/simple/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">搜索指定包</span><br>pip_search numpy<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看可安装包版本</span><br>pip index vesions numpy<br></code></pre></td></tr></table></figure><h3 id="2-3、pip必要库安装（Windows）"><a href="#2-3、pip必要库安装（Windows）" class="headerlink" title="2.3、pip必要库安装（Windows）"></a>2.3、pip必要库安装（Windows）</h3><p>获取库依赖文件：<a href="https://github.com/datawhalechina/llm-universe">https://github.com/datawhalechina/llm-universe</a></p><p>在仓库根路径下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先<span class="hljs-built_in">cd</span>到仓库根路径</span><br>pip install -r .\requirements_windows.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里可能会涉及到修改pip的情况，使用Python进行安装</span><br>D:\Anaconda\python.exe -m pip install -r .\requirements_windows.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/<br></code></pre></td></tr></table></figure><p>正常执行如下：这里我更改为了国内的清华pip源镜像下载</p><p><img src="https://codestar.top/note-image/image-20231118140655233.png" alt="image-20231118140655233"></p><p>接下来就是等待其安装好，大约需要2-3分钟左右。</p><p>正常情况不会出现其他报错会直接安装成功，如下：</p><p><img src="https://codestar.top/note-image/image-20231118141525471.png" alt="image-20231118141525471"></p><p>我这边安装出现了一些兼容性或缺包问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR: pip&#x27;s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.<br>gensim 4.3.0 requires FuzzyTM&gt;=0.4.0, which is not installed.<br>tables 3.8.0 requires blosc2~=2.0.0, which is not installed.<br>tables 3.8.0 requires cython&gt;=0.29.21, which is not installed.<br>anaconda-cloud-auth 0.1.3 requires pydantic&lt;2.0, but you have pydantic 2.5.1 which is incompatible.<br>numba 0.57.1 requires numpy&lt;1.25,&gt;=1.21, but you have numpy 1.26.2 which is incompatible.<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118141441651.png" alt="image-20231118141441651"></p><p>逐个解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1、缺失FuzzyTM&gt;=0.4.0</span><br>pip install FuzzyTM -i https://pypi.tuna.tsinghua.edu.cn/simple/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2、缺失blosc2~=2.0.0:指定下载2.0.0版本blosc2（先执行3，再执行这一步）</span><br>pip install blosc2==2.0.0 -i https://pypi.tuna.tsinghua.edu.cn/simple/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">3、缺失cython&gt;=0.29.21</span><br>pip install cython -i https://pypi.tuna.tsinghua.edu.cn/simple/<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-comment"># 4、要求pydantic&lt;2.0：安装1.10.3版本--暂不处理，不影响</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">pip install pydantic==1.10.3 -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">5、要求numpy&lt;1.25,&gt;=1.21</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查安装的版本，不满足则仿照步骤2，指定版本重新安装，pip index versions numpy查看可安装的版本</span><br>pip show numpy<br>pip install numba -i https://pypi.tuna.tsinghua.edu.cn/simple/<br></code></pre></td></tr></table></figure><p>FuzzyTM安装：</p><p><img src="https://codestar.top/note-image/image-20231118142225393.png" alt="image-20231118142225393"></p><p>cython安装：</p><p><img src="https://codestar.top/note-image/image-20231118142559351.png" alt="image-20231118142559351"></p><p>blosc2 2.0.0版本安装：</p><p><img src="https://codestar.top/note-image/image-20231118142708681.png" alt="image-20231118142708681"></p><p>pydantic库影响的是anaconda-cloud-auth 0.1.3，anaconda云授权库，可选的库有下面这些：（1.10.13安装后会出现不满足gradio库的现象，暂不处理，不影响后续代码运行）</p><p><img src="https://codestar.top/note-image/image-20231118143403139.png" alt="image-20231118143403139"></p><p>numba安装：</p><p><img src="https://codestar.top/note-image/image-20231118150041170.png" alt="image-20231118150041170"></p><p><img src="https://codestar.top/note-image/image-20231118150103390.png" alt="image-20231118150103390"></p><h3 id="2-4、pycharm创建项目"><a href="#2-4、pycharm创建项目" class="headerlink" title="2.4、pycharm创建项目"></a>2.4、pycharm创建项目</h3><p>打开pycharm，NEW PROJECT，填写项目基本信息，选取本地安装的Anaconda中的Python：</p><p><img src="https://codestar.top/note-image/image-20231118134134734.png" alt="image-20231118134134734"></p><h2 id="3、LLM-API的使用"><a href="#3、LLM-API的使用" class="headerlink" title="3、LLM API的使用"></a>3、LLM API的使用</h2><h3 id="3-1、ChatGPT-API调用"><a href="#3-1、ChatGPT-API调用" class="headerlink" title="3.1、ChatGPT API调用"></a>3.1、ChatGPT API调用</h3><h4 id="1）OpenAI-key生成"><a href="#1）OpenAI-key生成" class="headerlink" title="1）OpenAI key生成"></a>1）OpenAI key生成</h4><p>进入Overview页面：<a href="https://platform.openai.com/docs/overview">https://platform.openai.com/docs/overview</a></p><p><img src="https://codestar.top/note-image/image-20231118110129691.png" alt="image-20231118110129691"></p><p>填写key名称，点击<code>Create secret key</code>之后生成相应的密钥：</p><p><img src="https://codestar.top/note-image/image-20231118110203297.png" alt="image-20231118110203297"></p><p>生成后，拷贝生成的密钥，保存好密钥，后面会使用到它，<strong>注意密钥只会展示1次，关闭弹窗之后不会再显示</strong>。生成成功之后会在API keys页面上展示刚才新建的key。一个<strong>免费账号密钥用量有效期在3个月</strong>，超过这段时间则无效。</p><h4 id="2）配置读取key"><a href="#2）配置读取key" class="headerlink" title="2）配置读取key"></a>2）配置读取key</h4><p>在项目根路径，创建<code>.env</code>文件保存我们的key</p><p><img src="https://codestar.top/note-image/image-20231118171518004.png" alt="image-20231118171518004"></p><p>通过下面的代码来读取<code>.env</code>中的key值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># file:obtain_key.py</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> openai<br><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv, find_dotenv<br><br><span class="hljs-comment"># 封装成get_dotenv()函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dotenv</span>():<br>    <span class="hljs-comment"># 读取本地/项目的环境变量。</span><br>    <span class="hljs-comment"># find_dotenv()寻找并定位.env文件的路径</span><br>    <span class="hljs-comment"># load_dotenv()读取该.env文件，并将其中的环境变量加载到当前的运行环境中</span><br>    <span class="hljs-comment"># 如果你设置的是全局的环境变量，这行代码则没有任何作用。</span><br>    _ = load_dotenv(find_dotenv())<br><br>    <span class="hljs-comment"># 如果你需要通过代理端口访问，你需要如下配置：注意端口是否正确</span><br>    os.environ[<span class="hljs-string">&#x27;HTTPS_PROXY&#x27;</span>] = <span class="hljs-string">&#x27;http://127.0.0.1:9981&#x27;</span><br>    os.environ[<span class="hljs-string">&quot;HTTP_PROXY&quot;</span>] = <span class="hljs-string">&#x27;http://127.0.0.1:9981&#x27;</span><br><br>    <span class="hljs-comment"># 获取环境变量 OPENAI_API_KEY</span><br>    <span class="hljs-comment"># openai.api_key = os.environ[&#x27;OPENAI_API_KEY&#x27;]</span><br>    openai.api_key = os.getenv(<span class="hljs-string">&#x27;OPENAI_API_KEY&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(openai.api_key)<br>    <span class="hljs-comment"># print(type(openai.api_key))</span><br>    <span class="hljs-keyword">return</span> os.getenv(<span class="hljs-string">&#x27;OPENAI_API_KEY&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="3）ChatGPT原生接口调用"><a href="#3）ChatGPT原生接口调用" class="headerlink" title="3）ChatGPT原生接口调用"></a>3）ChatGPT原生接口调用</h4><p>获取到OpenAI官方的key之后，我们来尝试调用ChatGPT，参考<a href="https://platform.openai.com/docs/api-reference/chat/object">官方文档</a>。：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> openai<br><span class="hljs-keyword">from</span> obtain_key <span class="hljs-keyword">import</span> get_dotenv<br><br><br>get_dotenv()<br><span class="hljs-comment"># 导入所需库</span><br><span class="hljs-comment"># 注意，此处我们假设你已根据上文配置了 OpenAI API Key，如没有将访问失败</span><br>completion = openai.ChatCompletion.create(<br>    <span class="hljs-comment"># 创建一个 ChatCompletion</span><br>    <span class="hljs-comment"># 调用模型：ChatGPT-3.5</span><br>    model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>,<br>    <span class="hljs-comment"># message 是你的 prompt</span><br>    messages=[<br>        &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;You are a helpful assistant.&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;Hello!&quot;</span>&#125;<br>    ]<br>)<br><span class="hljs-built_in">print</span>(completion[<span class="hljs-string">&quot;choices&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;message&quot;</span>][<span class="hljs-string">&quot;content&quot;</span>])<br></code></pre></td></tr></table></figure><p>接口会返回一个ChatCompletion对象，包含了回答文本，创建时间等属性内容，我们仅需要content属性内容，返回示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">完整的ChatCompletion对象</span><br>&lt;OpenAIObject chat.completion id=chatcmpl-80QUFny7lXqOcfu5CZMRYhgXqUCv0 at 0x7f1fbc0bd770&gt; JSON: &#123;<br>  &quot;choices&quot;: [<br>    &#123;<br>      &quot;finish_reason&quot;: &quot;stop&quot;,<br>      &quot;index&quot;: 0,<br>      &quot;message&quot;: &#123;<br>        &quot;content&quot;: &quot;Hello! How can I assist you today?&quot;,<br>        &quot;role&quot;: &quot;assistant&quot;<br>      &#125;<br>    &#125;<br>  ],<br>  &quot;created&quot;: 1695112507,<br>  &quot;id&quot;: &quot;chatcmpl-80QUFny7lXqOcfu5CZMRYhgXqUCv0&quot;,<br>  &quot;model&quot;: &quot;gpt-3.5-turbo-0613&quot;,<br>  &quot;object&quot;: &quot;chat.completion&quot;,<br>  &quot;usage&quot;: &#123;<br>    &quot;completion_tokens&quot;: 9,<br>    &quot;prompt_tokens&quot;: 19,<br>    &quot;total_tokens&quot;: 28<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118194351466.png" alt="image-20231118194351466"></p><h4 id="4）封装请求API函数"><a href="#4）封装请求API函数" class="headerlink" title="4）封装请求API函数"></a>4）封装请求API函数</h4><p>将API的调用进行封装：隐去了message的具体细节，并将模型固定，用户只需要传入prompt即user prompt的内容就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个封装 OpenAI 接口的函数，参数为 Prompt，返回对应结果</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_completion</span>(<span class="hljs-params">prompt, model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>, temperature = <span class="hljs-number">0</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    调用CHATGPT</span><br><span class="hljs-string">    prompt: 对应的提示词</span><br><span class="hljs-string">    model: 调用的模型，默认为 gpt-3.5-turbo(ChatGPT)，有内测资格的用户可以选择 gpt-4</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    messages = [&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt&#125;, &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;You are a joyful assistant.&quot;</span>&#125;]<br>    response = openai.ChatCompletion.create(<br>        model=model,<br>        messages=messages,<br>        temperature=temperature, <span class="hljs-comment"># 模型输出的温度系数，控制输出的随机程度</span><br>    )<br>    <span class="hljs-comment"># 调用 OpenAI 的 ChatCompletion 接口</span><br>    <span class="hljs-keyword">return</span> response.choices[<span class="hljs-number">0</span>].message[<span class="hljs-string">&quot;content&quot;</span>]<br></code></pre></td></tr></table></figure><p>调用接口如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调用get_completion()方法</span><br>completion = get_completion(<span class="hljs-string">&quot;介绍一下广东这个省&quot;</span>)<br><span class="hljs-built_in">print</span>(completion)<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118200354830.png" alt="image-20231118200354830"></p><h4 id="5）使用LangChain调用ChatGPT"><a href="#5）使用LangChain调用ChatGPT" class="headerlink" title="5）使用LangChain调用ChatGPT"></a>5）使用LangChain调用ChatGPT</h4><p>LangChain中已经对ChatGPT进行封装，可以直接在应用中调用。更多细节，参考<a href="https://api.python.langchain.com/en/latest/api_reference.html#module-langchain.chat_models">LangChain官方文档</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">langchain 调用 chatgpt</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 从langchain.chat_models导入OpenAI的对话模型ChatOpenAI</span><br><span class="hljs-keyword">from</span> langchain.chat_models <span class="hljs-keyword">import</span> ChatOpenAI<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> obtain_key <span class="hljs-keyword">import</span> get_dotenv<br>key = get_dotenv()<br><span class="hljs-built_in">print</span>(key)<br><span class="hljs-comment"># 实例化ChatOpenAI 类</span><br><span class="hljs-comment"># 这里我们将参数temperature设置为0.0，从而减少生成答案的随机性。</span><br><span class="hljs-comment"># 如果你想要每次得到不一样的有新意的答案，可以尝试调整该参数。</span><br>chat = ChatOpenAI(temperature=<span class="hljs-number">0.0</span>, openai_api_key=key)<br><span class="hljs-built_in">print</span>(chat)<br></code></pre></td></tr></table></figure><p>正常返回如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cache=None verbose=False callbacks=None callback_manager=None tags=None metadata=None client=&lt;class &#x27;openai.api_resources.chat_completion.ChatCompletion&#x27;&gt; model_name=&#x27;gpt-3.5-turbo&#x27; temperature=0.0 model_kwargs=&#123;&#125; openai_api_key=&#x27;OPENAI_API_KEY&#x27; openai_api_base=&#x27;&#x27; openai_organization=&#x27;&#x27; openai_proxy=&#x27;&#x27; request_timeout=None max_retries=6 streaming=False n=1 max_tokens=None tiktoken_model_name=None<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118180700050.png" alt="image-20231118180700050"></p><p>返回参数说明：</p><blockquote><ul><li><p>model_name：所要使用的模型，默认为 ‘gpt-3.5-turbo’，参数设置与 OpenAI 原生接口参数设置一致。 </p></li><li><p>temperature：温度系数，取值同原生接口。 </p></li><li><p>openai_api_key：OpenAI API key，如果不使用环境变量设置 API Key，也可以在实例化时设置。</p></li><li><p>openai_proxy：设置代理，如果不使用环境变量设置代理，也可以在实例化时设置。 </p></li><li><p>streaming：是否使用流式传输，即逐字输出模型回答，默认为 False。</p></li><li><p>max_tokens：模型输出的最大 token 数，意义及取值同上。</p></li></ul></blockquote><h4 id="6）LangChain-Template配置prompt"><a href="#6）LangChain-Template配置prompt" class="headerlink" title="6）LangChain Template配置prompt"></a>6）LangChain Template配置prompt</h4><p>Template即模板，是LongChain中的一种固定的Prompt格式。可以在Template中填入自定义的任务来便捷的完成个性化任务的Prompt设置。</p><p>1、构造一个个性化 Template：Template写法固定格式，可以较大程度发挥模型性能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain.prompts <span class="hljs-keyword">import</span> ChatPromptTemplate<br><br><span class="hljs-comment"># template内容：这里我们要求模型对给定文本进行中文翻译</span><br><span class="hljs-comment"># 固定写法</span><br>template_string = <span class="hljs-string">&quot;&quot;&quot;Translate the text \</span><br><span class="hljs-string">that is delimited by triple backticks \</span><br><span class="hljs-string">into a Chinses. \</span><br><span class="hljs-string">text: ```&#123;text&#125;```</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 接着将 Template 实例化</span><br>chat_template = ChatPromptTemplate.from_template(template_string)<br></code></pre></td></tr></table></figure><p>2、针对模型调用 format 方法，将 template 转化为模型输入的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 我们首先设置变量值</span><br>input_text = <span class="hljs-string">&quot;Today is a nice day.&quot;</span><br><br><span class="hljs-comment"># 接着调用 format_messages 将 template 转化为 message 格式</span><br>message = chat_template.format_messages(text=input_text)<br><span class="hljs-built_in">print</span>(message)<br></code></pre></td></tr></table></figure><p>转化的格式是<strong>专用于调用类似于 ChatGPT 的模型格式</strong>的数据类型</p><p><img src="https://codestar.top/note-image/image-20231118201822434.png" alt="image-20231118201822434"></p><p>3、使用template格式数据调用chatgpt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将实例化的类型传入设定好的prompt</span><br><span class="hljs-comment"># 此处存在问题--待调试：2 argument were given</span><br>response = ChatOpenAI(message)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><p>参考：<a href="https://python.langchain.com.cn/docs/modules/model_io/prompts/prompt_templates/">提示模板 | 🦜️🔗 Langchain</a></p><h3 id="3-2、文心大模型API调用"><a href="#3-2、文心大模型API调用" class="headerlink" title="3.2、文心大模型API调用"></a>3.2、文心大模型API调用</h3><h4 id="1）文心key获取"><a href="#1）文心key获取" class="headerlink" title="1）文心key获取"></a>1）文心key获取</h4><p>进入<a href="https://console.bce.baidu.com/qianfan/overview">百度云千帆大模型平台</a>，应用接入：</p><p><img src="https://codestar.top/note-image/image-20231118132712169.png" alt="image-20231118132712169"></p><p>创建应用**（需要账号已经实名制）**：</p><p><img src="https://codestar.top/note-image/image-20231118132911933.png" alt="image-20231118132911933"></p><p>填写应用基本信息，确定进入下一页：</p><p><img src="https://codestar.top/note-image/image-20231118133137495.png" alt="image-20231118133137495"></p><p>创建之后就可以在应用页面查看到我们刚建的应用，其中会展示我们想要的AppID<code>、</code>API Key<code>、</code>Secret Key：后续需要使用到API Key<code>、</code>Secret Key。</p><p><img src="https://codestar.top/note-image/image-20231118133314183.png" alt="image-20231118133314183"></p><h4 id="2）API原生调用"><a href="#2）API原生调用" class="headerlink" title="2）API原生调用"></a>2）API原生调用</h4><p>获取access_token：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_access_token</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用 API Key，Secret Key 获取access_token，替换下列示例中的应用API Key、应用Secret Key</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 指定网址</span><br>    <span class="hljs-comment"># 文心模型调用：替换&#123;api_key&#125;和&#123;secret_key&#125;</span><br>    url = <span class="hljs-string">&quot;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=&#123;api_key&#125;&amp;client_secret=&#123;secret_key&#125;&quot;</span><br>    <span class="hljs-comment"># 设置 POST 访问</span><br>    payload = json.dumps(<span class="hljs-string">&quot;&quot;</span>)<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;<br>    <span class="hljs-comment"># 通过 POST 访问获取账户对应的 access_token</span><br>    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, url, headers=headers, data=payload)<br>    <span class="hljs-keyword">return</span> response.json().get(<span class="hljs-string">&quot;access_token&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>正常返回如下，通过access_token访问文心大模型：</p><p><img src="https://codestar.top/note-image/image-20231118154840361.png" alt="image-20231118154840361"></p><p>调用文心原生API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_wenxin</span>(<span class="hljs-params">prompt</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    通过access_token调用文心一言模型</span><br><span class="hljs-string">    :param prompt:用户输入内容</span><br><span class="hljs-string">    :return:输出结果</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 调用接口</span><br>    <span class="hljs-comment"># 将下面&#123;access_token&#125;替换为get_access_token()获取到的access_token</span><br>    url = <span class="hljs-string">&quot;https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/eb-instant?access_token=&#123;access_token&#125;&quot;</span><br>    <span class="hljs-comment"># 配置 POST 参数</span><br>    payload = json.dumps(&#123;<br>        <span class="hljs-string">&quot;messages&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-comment"># user prompt</span><br>                <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(prompt)<span class="hljs-comment"># 输入的 prompt</span><br>            &#125;<br>        ]<br>    &#125;)<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;<br>    <span class="hljs-comment"># 发起请求</span><br>    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, url, headers=headers, data=payload)<br>    <span class="hljs-comment"># 返回的是一个 Json 字符串</span><br>    js = json.loads(response.text)<br>    <span class="hljs-built_in">print</span>(js[<span class="hljs-string">&quot;result&quot;</span>])<br><br></code></pre></td></tr></table></figure><p>调用模型（默认调用的是ERNIE-Bot-turbo模型）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># access_token = get_access_token()</span><br>    <span class="hljs-comment"># print(&quot;access_token is:&quot;, access_token)</span><br>    get_wenxin(<span class="hljs-string">&quot;关于NLP&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>调用正常返回如下：</p><p><img src="https://codestar.top/note-image/image-20231118162155785.png" alt="image-20231118162155785"></p><p>注意：文心大模型，免费用户1天只能调用1次，尝试多次，需购买token。</p><p><img src="https://codestar.top/note-image/image-20231118161157679.png" alt="image-20231118161157679"></p><p>注：文心API调用与OpenAI相似，但没有system prompt的配置，仅支持 user、assistant 。</p><h4 id="3）使用LangChain自定义文心LLM—待完善"><a href="#3）使用LangChain自定义文心LLM—待完善" class="headerlink" title="3）使用LangChain自定义文心LLM—待完善"></a>3）使用LangChain自定义文心LLM—待完善</h4><h3 id="3-3、星火大模型API调用"><a href="#3-3、星火大模型API调用" class="headerlink" title="3.3、星火大模型API调用"></a>3.3、星火大模型API调用</h3><p>科大讯飞旗下的一款大模型产品，侧重于中文内容，是一款典型的中文大模型。在国内与文心一言不分上下。</p><h4 id="1）星火API申请"><a href="#1）星火API申请" class="headerlink" title="1）星火API申请"></a>1）星火API申请</h4><p>进入<a href="https://console.xfyun.cn/app/create?redirect=/services/bm2">讯飞开放平台</a>申请：创建1个新应用，填写应用基本信息</p><p><img src="https://codestar.top/note-image/image-20231118212010453.png" alt="image-20231118212010453"></p><p>创建完了之后会在此处展示我们需要的APPID、APISecret、APIKey：</p><p><img src="https://codestar.top/note-image/image-20231118213029660.png" alt="image-20231118213029660"></p><h4 id="2）领取免费token"><a href="#2）领取免费token" class="headerlink" title="2）领取免费token"></a>2）领取免费token</h4><p>在应用控制台，实时用量，点击<code>立即购买</code>（必须要先实名）：</p><p><img src="https://codestar.top/note-image/image-20231118213414904.png" alt="image-20231118213414904"></p><p>选择”免费包（个人认证）”：</p><p><img src="https://codestar.top/note-image/image-20231118213512966.png" alt="image-20231118213512966"></p><p>选择OK之后，立即下单，就能成功购买了：</p><p><img src="https://codestar.top/note-image/image-20231118213614738.png" alt="image-20231118213614738"></p><p>免费token额度会同步刷新：</p><p><img src="https://codestar.top/note-image/image-20231118213659585.png" alt="image-20231118213659585"></p><h4 id="3）星火API调用"><a href="#3）星火API调用" class="headerlink" title="3）星火API调用"></a>3）星火API调用</h4><h5 id="3-1）Spark相关库配置"><a href="#3-1）Spark相关库配置" class="headerlink" title="3.1）Spark相关库配置"></a>3.1）Spark相关库配置</h5><p>由于星火 API 需要通过 WebSocket 进行连接，相对麻烦，这一步需要将SparkApi.py、SparkApiSelf.py两各个文件放置于项目根目录：</p><p><img src="https://codestar.top/note-image/image-20231118231656262.png" alt="image-20231118231656262"></p><p>源文件，从datawhale仓库路径取：<a href="https://github.com/datawhalechina/llm-universe/tree/main/notebook/C2%20%E8%B0%83%E7%94%A8%E5%A4%A7%E6%A8%A1%E5%9E%8B%20API">https://github.com/datawhalechina/llm-universe/tree/main/notebook/C2%20%E8%B0%83%E7%94%A8%E5%A4%A7%E6%A8%A1%E5%9E%8B%20API</a></p><p><img src="https://codestar.top/note-image/image-20231118232326070.png" alt="image-20231118232326070"></p><h5 id="3-2）Spark-API调用"><a href="#3-2）Spark-API调用" class="headerlink" title="3.2）Spark API调用"></a>3.2）Spark API调用</h5><p>完整调用代码，调用的传参和文心类似，均为列表类型。其中要根据实际申请的星火大模型的版本来配置<code>domain</code>、<code>Spark_url</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> SparkApi<br><br><span class="hljs-comment"># 1、配置密钥信息</span><br>appid = <span class="hljs-string">&quot;APPID&quot;</span>     <span class="hljs-comment">#填写控制台中获取的 APPID 信息</span><br>api_secret = <span class="hljs-string">&quot;APISecret&quot;</span>   <span class="hljs-comment">#填写控制台中获取的 APISecret 信息</span><br>api_key =<span class="hljs-string">&quot;APIKey&quot;</span>    <span class="hljs-comment">#填写控制台中获取的 APIKey 信息</span><br><br><span class="hljs-comment"># 2、配置大模型版本，默认“general/generalv2”：根据实际申请的版本选取</span><br><span class="hljs-comment"># domain = &quot;general&quot;   # v1.5版本</span><br>domain = <span class="hljs-string">&quot;generalv2&quot;</span>    <span class="hljs-comment"># v2.0版本</span><br><br><br><span class="hljs-comment"># 3、配置云端环境的服务地址：根据实际申请的版本选取</span><br><span class="hljs-comment"># Spark_url = &quot;ws://spark-api.xf-yun.com/v1.1/chat&quot;  # v1.5环境的地址</span><br>Spark_url = <span class="hljs-string">&quot;ws://spark-api.xf-yun.com/v2.1/chat&quot;</span>  <span class="hljs-comment"># v2.0环境的地址</span><br><br><span class="hljs-comment"># 4、封装将用户输入的prompt转化为传入参数的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_text</span>(<span class="hljs-params">role, content, text = []</span>):<br>    <span class="hljs-comment"># role 是指定角色，content 是 prompt 内容</span><br>    jsoncon = &#123;&#125;<br>    jsoncon[<span class="hljs-string">&quot;role&quot;</span>] = role<br>    jsoncon[<span class="hljs-string">&quot;content&quot;</span>] = content<br>    text.append(jsoncon)<br>    <span class="hljs-keyword">return</span> text<br><br><span class="hljs-comment"># 5、将用户输入 prompt 封装为传入参数列表</span><br>question = get_text(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;你好&quot;</span>)<br><span class="hljs-built_in">print</span>(question)<br><br><span class="hljs-comment"># 6、调用SparkApi.py 中封装的 main 函数</span><br>response = SparkApi.main(appid,api_key,api_secret,Spark_url,domain,question)<br></code></pre></td></tr></table></figure><p>成功调用如下：</p><p><img src="https://codestar.top/note-image/image-20231119003052282.png" alt="image-20231119003052282"></p><h3 id="3-4、智谱GLM-API调用"><a href="#3-4、智谱GLM-API调用" class="headerlink" title="3.4、智谱GLM API调用"></a>3.4、智谱GLM API调用</h3><p>GLM为智谱AI与清华大学共同合作开发的一款认知大模型，为新一代通用大模型，接下来将展开实现GLM API的调用过程。</p><h4 id="1）GLM-API申请"><a href="#1）GLM-API申请" class="headerlink" title="1）GLM API申请"></a>1）GLM API申请</h4><p>进入<a href="https://open.bigmodel.cn/overview">智谱AI开放平台</a>：</p><p><img src="https://codestar.top/note-image/image-20231118212311798.png" alt="image-20231118212311798"></p><p>进入<code>查看API Key</code>，开始创建API Key：初始账号会存在一个系统默认的key，并且存在赠送的18元token额度</p><p><img src="https://codestar.top/note-image/image-20231118212805541.png" alt="image-20231118212805541"></p><p>新建一个新的Key：</p><p><img src="https://codestar.top/note-image/image-20231118212601456.png" alt="image-20231118212601456"></p><p>之后会存在两个API Key：一个自己新建的Key，一个系统默认的Key</p><p><img src="https://codestar.top/note-image/image-20231118212648942.png" alt="image-20231118212648942"></p><p>API价格：</p><p><img src="https://codestar.top/note-image/image-20231118214001933.png" alt="image-20231118214001933"></p><h4 id="2）调用智谱大模型API"><a href="#2）调用智谱大模型API" class="headerlink" title="2）调用智谱大模型API"></a>2）调用智谱大模型API</h4><p>智谱AI支持SDK 和原生 HTTP来调用模型，本节以SDK为主：</p><p>环境中安装配置示例中的所需第三方库</p><h5 id="2-1）安装zhipu库"><a href="#2-1）安装zhipu库" class="headerlink" title="2.1）安装zhipu库"></a>2.1）安装zhipu库</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install zhipuai -i https://pypi.tuna.tsinghua.edu.cn/simple/<br></code></pre></td></tr></table></figure><p>在第2章中，已经将环境提前准备好了，这里执行指令可以做个检查：</p><p><img src="https://codestar.top/note-image/image-20231118222548647.png" alt="image-20231118222548647"></p><h5 id="2-2）API调用"><a href="#2-2）API调用" class="headerlink" title="2.2）API调用"></a>2.2）API调用</h5><p>分为下面几段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zhipuai<br><br><span class="hljs-comment"># 1、配置key和model</span><br>zhipuai.api_key = <span class="hljs-string">&quot;zhipu_key&quot;</span> <span class="hljs-comment">#填写控制台中获取的 APIKey 信息</span><br>model = <span class="hljs-string">&quot;chatglm_std&quot;</span> <span class="hljs-comment">#用于配置大模型版本</span><br><br><br><span class="hljs-comment"># 2、将用户输入的prompt转化为传入参数，输出的结果为列表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_text</span>(<span class="hljs-params">role, content, text = []</span>):<br>    <span class="hljs-comment"># role 是指定角色，content 是 prompt 内容</span><br>    jsoncon = &#123;&#125;<br>    jsoncon[<span class="hljs-string">&quot;role&quot;</span>] = role<br>    jsoncon[<span class="hljs-string">&quot;content&quot;</span>] = content<br>    text.append(jsoncon)<br>    <span class="hljs-keyword">return</span> text<br><br><br><span class="hljs-comment"># 3、将一个用户输入 prompt 封装为这样一个传入参数列表</span><br>question = get_text(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;你好&quot;</span>)<br><span class="hljs-built_in">print</span>(question)<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118224838824.png" alt="image-20231118224838824"></p><p>调用AI：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 4、请求模型：调用zhipuai SDK 中封装的 invoke 函数</span><br>response = zhipuai.model_api.invoke(<br>    model=model,<br>    prompt=question<br>)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><p>调用成功结果如下：</p><p><img src="https://codestar.top/note-image/image-20231118225023072.png" alt="image-20231118225023072"></p><p>常用传入参数介绍：</p><blockquote><ul><li><code>prompt (list)</code>: 调用对话模型时，将当前对话信息列表作为提示输入给模型; 按照 {“role”: “user”, “content”: “你好”} 的键值对形式进行传参; 总长度超过模型最长输入限制后会自动截断，需按时间由旧到新排序。</li><li><code>temperature (float)</code>: 采样温度，控制输出的随机性，必须为正数取值范围是：(0.0,1.0]，不能等于 0，默认值为 0.95 值越大，会使输出更随机，更具创造性；值越小，输出会更加稳定或确定。</li><li><code>top_p (float)</code>: 用温度取样的另一种方法，称为核取样。取值范围是：(0.0, 1.0) 开区间，不能等于 0 或 1，默认值为 0.7。模型考虑具有 top_p 概率质量 tokens 的结果。例如：0.1 意味着模型解码器只考虑从前 10% 的概率的候选集中取 tokens。</li><li><code>request_id (string)</code>: 由用户端传参，需保证唯一性；用于区分每次请求的唯一标识，用户端不传时平台会默认生成</li><li><code>return_type (string)</code>: 用于控制每次返回内容的类型，空或者没有此字段时默认按照 json_string 返回。<code>json_string</code> 返回标准的 JSON 字符串。<code>text</code> 返回原始的文本内容</li></ul></blockquote><p>**注：**不建议同时调整<code>temperature</code>和 <code>top_p </code>，根据具体场景单独调整1个即可。接口文档：<a href="https://open.bigmodel.cn/dev/api">https://open.bigmodel.cn/dev/api</a></p><p>参考文档：<a href="https://datawhalechina.github.io/llm-universe/#/C2/4.%20%E8%B0%83%E7%94%A8%E8%AE%AF%E9%A3%9E%E6%98%9F%E7%81%AB">https://datawhalechina.github.io/llm-universe/#/C2/4.%20%E8%B0%83%E7%94%A8%E8%AE%AF%E9%A3%9E%E6%98%9F%E7%81%AB</a></p>]]></content>
    
    
    <categories>
      
      <category>AI&amp;ML</category>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datawhale</tag>
      
      <tag>LLM</tag>
      
      <tag>AI&amp;ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL学习笔记1：SQL语法结构及DDL CREATE指令</title>
    <link href="/sql/sql-syntax-structure-and-ddl-create.html"/>
    <url>/sql/sql-syntax-structure-and-ddl-create.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、SQL基本语法结构"><a href="#1、SQL基本语法结构" class="headerlink" title="1、SQL基本语法结构"></a>1、SQL基本语法结构</h2><p>SQL分为三类：</p><p>1、数据定义语言DDL</p><blockquote><p>用于<strong>创建</strong>和<strong>定义</strong>数据库对象，并且将对这些对象的定义保存到数据字典中。通过DDL语句可以创建数据库对象，修改数据库对象和删除数据库对象等。</p></blockquote><p>常用的DDL语句及其功能：</p><table><thead><tr><th>DDL语句</th><th>功能说明</th></tr></thead><tbody><tr><td>CREATE</td><td>创建数据库</td></tr><tr><td>ALTER</td><td>修改数据库</td></tr><tr><td>DROP</td><td>删除数据库</td></tr><tr><td>RENAME</td><td>更改数据库对象的名称</td></tr><tr><td>TRUNCATE</td><td>删除表的全部内容</td></tr></tbody></table><p>**注：**每一条DDL语句执行后，Oracle都将提交当前事务。</p><p>2、数据操纵语言DML</p><blockquote><p>主要用来处理数据库中的数据内容。允许用户对数据库中的数据进行查询、插入、更新、删除等操作。</p></blockquote><p>常用的DML语句及其功能：</p><table><thead><tr><th>DML语句</th><th>功能说明</th></tr></thead><tbody><tr><td>SELECT</td><td>从表或视图中检索数据行</td></tr><tr><td>INSERT</td><td>插入数据到表或视图</td></tr><tr><td>UPDATE</td><td>更新数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>CALL</td><td>调用过程</td></tr><tr><td>MERGE</td><td>合并（插入或修改）</td></tr><tr><td>COMMIT</td><td>将当前事务所做的更改永久化（写入数据库）</td></tr><tr><td>ROLLBACK</td><td>取消上次提交以来的所有操作</td></tr></tbody></table><p>3、数据控制语言DCL</p><blockquote><p>数据控制语言用于修改数据库<strong>结构</strong>的操作权限。</p></blockquote><p>DCL语句主要有2种：</p><table><thead><tr><th>DCL语句</th><th>功能说明</th></tr></thead><tbody><tr><td>GRANT</td><td>授予其他用户对数据库结构的访问权限</td></tr><tr><td>REVOKE</td><td>收回用户访问数据库结构的权限</td></tr></tbody></table><p>CRUD释义：</p><blockquote><p>增加、读取、更新、删除&#x2F;销毁</p></blockquote><p><img src="https://codestar.top/note-image/image-20230617154817200.png" alt="image-20230617154817200"></p><h2 id="2、SQL之DDL-CREATE"><a href="#2、SQL之DDL-CREATE" class="headerlink" title="2、SQL之DDL - CREATE"></a>2、SQL之DDL - CREATE</h2><h3 id="2-1、创建数据库-DATABASE"><a href="#2-1、创建数据库-DATABASE" class="headerlink" title="2.1、创建数据库(DATABASE)"></a>2.1、创建数据库(DATABASE)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE database_name<br><span class="hljs-comment">-- 示例：创建名为test_db1的数据库</span><br><span class="hljs-keyword">create</span> database test_db1<br></code></pre></td></tr></table></figure><h3 id="2-2、创建表-TABLE"><a href="#2-2、创建表-TABLE" class="headerlink" title="2.2、创建表(TABLE)"></a>2.2、创建表(TABLE)</h3><p>语法结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE TABLE 表名称<br>(<br>列名称1 数据类型,<br>列名称2 数据类型,<br>列名称3 数据类型,<br>....<br>)<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建Persons表，含5列：&quot;Id_P&quot;、&quot;LastName&quot;、&quot;FirstName&quot;、&quot;Address&quot; 以及 &quot;City&quot;</span><br><span class="hljs-keyword">CREATE TABLE</span> Persons<br>(<br>Id_P <span class="hljs-type">int</span>,<br>LastName <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>FirstName <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>Address <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>City <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>)<br></code></pre></td></tr></table></figure><p>基础数据类型：</p><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">integer(size)<br/>int(size)<br/>smallint(size)<br/>tinyint(size)</td><td align="left">仅容纳整数。在括号内规定数字的最大位数。</td></tr><tr><td align="left">decimal(size,d)<br>numeric(size,d)</td><td align="left">容纳带有小数的数字。”size” 规定数字的最大位数。”d” 规定小数点右侧的最大位数。</td></tr><tr><td align="left">char(size)</td><td align="left">容纳固定长度的字符串（可容纳字母、数字以及特殊字符）。在括号中规定字符串的长度。</td></tr><tr><td align="left">varchar(size)</td><td align="left">容纳可变长度的字符串（可容纳字母、数字以及特殊的字符）。在括号中规定字符串的最大长度。</td></tr><tr><td align="left">date(yyyymmdd)</td><td align="left">容纳日期。</td></tr></tbody></table><p>创建完成之后使用<code>insert into</code>插入数据。</p><p><img src="https://codestar.top/note-image/image-20230617163358411.png" alt="image-20230617163358411"></p><h3 id="2-3、创建索引-INDEX"><a href="#2-3、创建索引-INDEX" class="headerlink" title="2.3、创建索引(INDEX)"></a>2.3、创建索引(INDEX)</h3><p>**索引：**在不读取整个表的情况下，索引使数据库应用程序可以更快地查找数据</p><ul><li>创建简单索引：允许使用重复的值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- &quot;column_name&quot; 规定需要索引的列</span><br><span class="hljs-keyword">CREATE</span> INDEX index_name<br><span class="hljs-keyword">ON</span> table_name (column_name)<br></code></pre></td></tr></table></figure><ul><li>创建一个唯一索引：两个行不能拥有相同的索引值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX index_name<br><span class="hljs-keyword">ON</span> table_name (column_name)<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- Person表上创建Index_pers索引LastName列</span><br><span class="hljs-keyword">CREATE</span> INDEX Index_Pers<br><span class="hljs-keyword">ON</span> Person (LastName) <br><span class="hljs-comment">-- 降序排列</span><br><span class="hljs-keyword">CREATE</span> INDEX Index_Pers<br><span class="hljs-keyword">ON</span> Person (LastName <span class="hljs-keyword">DESC</span>) <br><span class="hljs-comment">-- 索引多个列：逗号隔开多列</span><br><span class="hljs-keyword">CREATE</span> INDEX Index_Pers<br><span class="hljs-keyword">ON</span> Person (LastName, FirstName)<br></code></pre></td></tr></table></figure><h3 id="2-4、创建视图-VIEW"><a href="#2-4、创建视图-VIEW" class="headerlink" title="2.4、创建视图(VIEW)"></a>2.4、创建视图(VIEW)</h3><p>视图是基于 SQL 语句的结果集的可视化的表。视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，我们也可以提交数据，就像这些来自于某个单一的表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_name <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建立一个包括 First_Name， Last_Name，和 Country 这三个栏位的视图</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_Customer<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> First_Name, Last_Name, Country<br><span class="hljs-keyword">FROM</span> Customer;<br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li><p>数据库的设计和结构不会受到视图中的函数、where 或 join 语句的影响。</p></li><li><p>视图总是显示最近的数据。每当用户查询视图时，数据库引擎通过使用 SQL 语句来重建数据</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基本原理及基础指令</title>
    <link href="/git/git-basic-principle.html"/>
    <url>/git/git-basic-principle.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、GIT工作原理"><a href="#一、GIT工作原理" class="headerlink" title="一、GIT工作原理"></a>一、GIT工作原理</h2><h3 id="1、工作流程图"><a href="#1、工作流程图" class="headerlink" title="1、工作流程图"></a>1、工作流程图</h3><p>一般工作流程如下：</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源（本地工作目录）上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><p><img src="https://codestar.top/note-image/image-20210901215459286.png" alt="image-20210901215459286"></p><h3 id="2、内部结构图"><a href="#2、内部结构图" class="headerlink" title="2、内部结构图"></a>2、内部结构图</h3><ul><li>左侧为<strong>工作区</strong></li><li>右侧为<strong>版本库</strong></li><li>版本库中标记为 “index” 的区域是<strong>暂存区</strong>（stage&#x2F;index）</li><li>标记为 “master” 的是 <strong>master 分支所代表的目录树</strong>（远程端）</li></ul><p><img src="https://codestar.top/note-image/git%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="git工作原理"></p><p><img src="https://codestar.top/note-image/image-20210901215552081.png" alt="image-20210901215552081"></p><h3 id="3、常用命令间的关系"><a href="#3、常用命令间的关系" class="headerlink" title="3、常用命令间的关系"></a>3、常用命令间的关系</h3><p><img src="https://codestar.top/note-image/image-20210901221244248.png" alt="image-20210901221244248"></p><p><strong>说明：</strong></p><ul><li>workspace：工作区</li><li>staging area：暂存区&#x2F;缓存区</li><li>local repository：版本库或本地仓库</li><li>remote repository：远程仓库</li></ul><h2 id="二、GIT基本操作"><a href="#二、GIT基本操作" class="headerlink" title="二、GIT基本操作"></a>二、GIT基本操作</h2><h3 id="1、仓库构建"><a href="#1、仓库构建" class="headerlink" title="1、仓库构建"></a>1、仓库构建</h3><p> git 创建仓库的命令：</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git init</code></td><td align="left">初始化仓库</td></tr><tr><td align="left"><code>git clone</code></td><td align="left">拷贝一份远程仓库，也就是下载一个项目。</td></tr></tbody></table><h3 id="2、提交与修改"><a href="#2、提交与修改" class="headerlink" title="2、提交与修改"></a>2、提交与修改</h3><p><strong>Git 的工作</strong>：创建、保存你的项目快照及与之后的快照进行对比。</p><p>创建与提交项目快照的命令：</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git add</code></td><td align="left">添加文件到仓库</td></tr><tr><td align="left"><code>git status</code></td><td align="left">查看仓库当前的状态，显示有变更的文件。</td></tr><tr><td align="left"><code>git diff</code></td><td align="left">比较文件的不同，即暂存区和工作区的差异。</td></tr><tr><td align="left"><code>git commit</code></td><td align="left">提交暂存区到本地仓库。</td></tr><tr><td align="left"><code>git reset</code></td><td align="left">回退版本。</td></tr><tr><td align="left"><code>git rm</code></td><td align="left">删除工作区文件。</td></tr><tr><td align="left"><code>git mv</code></td><td align="left">移动或重命名工作区文件。</td></tr></tbody></table><h3 id="3、日志查看"><a href="#3、日志查看" class="headerlink" title="3、日志查看"></a>3、日志查看</h3><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git log</code></td><td align="left">查看历史提交记录</td></tr><tr><td align="left"><code>git blame &lt;file&gt;</code></td><td align="left">以列表形式查看指定文件的历史修改记录</td></tr></tbody></table><h3 id="4、远程操作"><a href="#4、远程操作" class="headerlink" title="4、远程操作"></a>4、远程操作</h3><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git remote</code></td><td align="left">远程仓库操作</td></tr><tr><td align="left"><code>git fetch</code></td><td align="left">从远程获取代码库</td></tr><tr><td align="left"><code>git pull</code></td><td align="left">下载远程代码并合并</td></tr><tr><td align="left"><code>git push</code></td><td align="left">上传远程代码并合并</td></tr></tbody></table><h2 id="三、GIT分支管理"><a href="#三、GIT分支管理" class="headerlink" title="三、GIT分支管理"></a>三、GIT分支管理</h2><p><strong>分支模型</strong>：优势，可通过建立额外分支独立出主线开发，且不影响主线的同时继续工作。</p><p>**创建分支命令：**没有参数时，git branch会列出你在本地的分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch (branchname)</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当前分支为master分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch</span><br>* master<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当前可用分支两个，当前分支为<span class="hljs-built_in">test</span></span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch <span class="hljs-built_in">test</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch</span><br>  master<br>* test<br></code></pre></td></tr></table></figure><p><strong>切换分支命令:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git <span class="hljs-title function_">checkout</span> <span class="hljs-params">(branchname)</span><br></code></pre></td></tr></table></figure><p><strong>合并分支命令:</strong></p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitee连接指导</title>
    <link href="/git/gitee-connection-guide.html"/>
    <url>/git/gitee-connection-guide.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、git生成公钥"><a href="#1、git生成公钥" class="headerlink" title="1、git生成公钥"></a>1、git生成公钥</h2><p>打开ssh bash面板，执行以下命令生成公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">-t 公钥名称， -C 指定生成sshkey的名称</span><br>ssh-keygen -t ed25519 -C &quot;xxxxx@xxxxx.com&quot;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Generating public/private ed25519 key pair...</span><br></code></pre></td></tr></table></figure><p>三次回车之后，结果如下：</p><p><img src="https://codestar.top/note-image/image-20211108112736481.png" alt="image-20211108112736481"></p><p>公钥生成结束，存放位置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">路径</span><br>~/.ssh/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">公钥</span><br>~/.ssh/id_ed25519.pub<br><span class="hljs-meta prompt_"># </span><span class="language-bash">私钥</span><br>~/.ssh/id_ed25519<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20211108113003666.png" alt="image-20211108113003666"></p><h2 id="2、gitee添加公钥"><a href="#2、gitee添加公钥" class="headerlink" title="2、gitee添加公钥"></a>2、gitee添加公钥</h2><p>查看生成的公钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat ~/.ssh/id_ed25519.pub<br></code></pre></td></tr></table></figure><p>复制生成的公钥，所有内容。进入gitee：通过仓库主页 <strong>「管理」-&gt;「部署公钥管理」-&gt;「添加部署公钥」</strong> ，添加生成的 public key 添加到仓库中。</p><p><img src="https://codestar.top/note-image/image-20211108113326138.png" alt="image-20211108113326138"></p><p>添加完成，本地确认：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@gitee.com<br></code></pre></td></tr></table></figure><p>首次使用需要确认并添加主机到本机SSH可信列表。若返回 <code>Hi XXX! You&#39;ve successfully authenticated, but Gitee.com does not provide shell access.</code> 内容，则证明添加成功。</p><p>首次：</p><p><img src="https://codestar.top/note-image/image-20211108113630718.png" alt="image-20211108113630718"></p><p>非首次：</p><p><img src="https://codestar.top/note-image/image-20211108113644310.png" alt="image-20211108113644310"></p><h2 id="3、基本配置"><a href="#3、基本配置" class="headerlink" title="3、基本配置"></a>3、基本配置</h2><h3 id="3-1、配置全局账户"><a href="#3-1、配置全局账户" class="headerlink" title="3.1、配置全局账户"></a>3.1、配置全局账户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局用户</span><br>git config --global user.name &quot;miniboy&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">全局邮箱</span><br>git config --global user.email example@example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看配置</span><br>git config --list<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20211108114925163.png" alt="image-20211108114925163"></p><p>如果用了 <strong>–global</strong> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p><p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git&#x2F;config 文件里。</p><h3 id="3-2、文本编辑器"><a href="#3-2、文本编辑器" class="headerlink" title="3.2、文本编辑器"></a>3.2、文本编辑器</h3><p>设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">$ git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global core.editor emacs</span><br></code></pre></td></tr></table></figure><h3 id="3-3、差异分析工具"><a href="#3-3、差异分析工具" class="headerlink" title="3.3、差异分析工具"></a>3.3、差异分析工具</h3><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">$ git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global merge.tool vimdiff</span><br></code></pre></td></tr></table></figure><p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。也可以指定使用自己开发的工具，自定义方法，另外有机会介绍。</p><h3 id="3-4、查看配置信息"><a href="#3-4、查看配置信息" class="headerlink" title="3.4、查看配置信息"></a>3.4、查看配置信息</h3><p>要检查已有的配置信息，可以使用 git config –list 命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ git<span class="hljs-built_in"> config </span>--list<br>http.<span class="hljs-attribute">postbuffer</span>=2M<br>user.<span class="hljs-attribute">name</span>=runoob<br>user.<span class="hljs-attribute">email</span>=test@runoob.com<br></code></pre></td></tr></table></figure><p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 &#x2F;etc&#x2F;gitconfig 和 ~&#x2F;.gitconfig），不过最终 Git 实际采用的是最后一个。</p><p>这些配置我们也可以在 <strong>~&#x2F;.gitconfig</strong> 或 <strong>&#x2F;etc&#x2F;gitconfig</strong> 看到，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.gitconfig <br></code></pre></td></tr></table></figure><p>显示内容如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[http]</span><br>    <span class="hljs-attr">postBuffer</span> = <span class="hljs-number">2</span>M<br><span class="hljs-section">[user]</span><br>    <span class="hljs-attr">name</span> = runoob<br>    <span class="hljs-attr">email</span> = test@runoob.com<br></code></pre></td></tr></table></figure><p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ git config <span class="hljs-keyword">user</span>.name<br>runoob<br></code></pre></td></tr></table></figure><h2 id="4、登录账户"><a href="#4、登录账户" class="headerlink" title="4、登录账户"></a>4、登录账户</h2><p>首次push代码会出现账号密码输入框。</p><p>输入用户名和账号正常登陆gitee即可。</p><h2 id="5、本地建立工作区"><a href="#5、本地建立工作区" class="headerlink" title="5、本地建立工作区"></a>5、本地建立工作区</h2><h3 id="5-1、初始化当前文件夹"><a href="#5-1、初始化当前文件夹" class="headerlink" title="5.1、初始化当前文件夹"></a>5.1、初始化当前文件夹</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">移动到当前文件夹</span><br>cd /d/GitRepositories/repo1/big-data-notes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化文件夹</span><br>git init<br></code></pre></td></tr></table></figure><p>初始化后的结果：</p><p><img src="https://codestar.top/note-image/image-20211108114126189.png" alt="image-20211108114126189"></p><h3 id="5-2、克隆代码库"><a href="#5-2、克隆代码库" class="headerlink" title="5.2、克隆代码库"></a>5.2、克隆代码库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">克隆仓库</span><br>git clone https://gitee.com/codergzq/my-test-code.git<br></code></pre></td></tr></table></figure><p>完成克隆之后，进入对应工作目录，查看远程仓库。</p><p><img src="https://codestar.top/note-image/image-20211108114714627.png" alt="image-20211108114714627"></p><p>至此，已完成配置，后续可进行分支、仓库的各种管理操作。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitKraken代码基本操作指导</title>
    <link href="/git/gitkraken-basic-operations.html"/>
    <url>/git/gitkraken-basic-operations.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、克隆仓库"><a href="#1、克隆仓库" class="headerlink" title="1、克隆仓库"></a>1、克隆仓库</h2><h3 id="1-1、基本步骤"><a href="#1-1、基本步骤" class="headerlink" title="1.1、基本步骤"></a>1.1、基本步骤</h3><p>点击“+”号打开新的页签New Tab，选择Clone a repo：</p><p><img src="https://codestar.top/note-image/image-20230804113914069.png" alt="image-20230804113914069"></p><p>选定本地一个文件夹，并填入<strong>仓库的url地址</strong>，点击**“Clone the repo!”**即可：</p><p><img src="https://codestar.top/note-image/image-20230804114055398.png" alt="image-20230804114055398"></p><p><strong>&#x3D;&#x3D;注：&#x3D;&#x3D;<strong>需要选取的文件夹必须为</strong>空文件夹</strong>，否则会clone失败或覆盖掉本地文件。</p><p><strong>仓库url获取</strong>：Gitee及GitHub所在的位置如下，看到后直接复制即可：</p><p><img src="https://codestar.top/note-image/image-20230804114708827.png" alt="image-20230804114708827"></p><p><img src="https://codestar.top/note-image/image-20230804114825383.png" alt="image-20230804114825383"></p><p><strong>&#x3D;&#x3D;注：&#x3D;&#x3D;</strong></p><ul><li><p>除去第一个“Clone with URL”选项，其他选项均为<strong>登录账户使用</strong>或<strong>升级付费使用</strong>。</p></li><li><p>克隆的仓库<strong>若为私有库</strong>，<strong>会弹出账号密码弹窗，输入对应平台的账号密码</strong>，点击<strong>login</strong>即可：</p></li><li><p>公有库则无需密码，直接可以克隆成功</p></li></ul><p>出现此弹窗，即为成功，“Open Now”打开克隆下来的仓库，之后便可以进行代码提交及修改更新等操作了。</p><p><img src="https://codestar.top/note-image/image-20230804120452869.png" alt="image-20230804120452869"></p><h3 id="1-2、克隆仓库示例"><a href="#1-2、克隆仓库示例" class="headerlink" title="1.2、克隆仓库示例"></a>1.2、克隆仓库示例</h3><p>此处以<strong>GitHub中的uiautomator2仓库</strong>为例，拷贝仓库地址：</p><p><img src="https://codestar.top/note-image/image-20230804120758174.png" alt="image-20230804120758174"></p><p>选中空文件夹，并填入仓库url地址，点击”Clone the repo!”：</p><p><img src="https://codestar.top/note-image/image-20230804120936267.png" alt="image-20230804120936267"></p><p>存在一个进度条，等待clone完成</p><p><img src="https://codestar.top/note-image/image-20230804120959602.png" alt="image-20230804120959602"></p><p>克隆成功：</p><p><img src="https://codestar.top/note-image/image-20230804121026018.png" alt="image-20230804121026018"></p><h2 id="2、拉取更新"><a href="#2、拉取更新" class="headerlink" title="2、拉取更新"></a>2、拉取更新</h2><p>进入仓库后，点击pull拉取最新代码，<strong>默认为master分支</strong>：</p><p><img src="https://codestar.top/note-image/image-20230804121455762.png" alt="image-20230804121455762"></p><p>如要切换分支，点击branch，填入对应仓库中存在的分支名称即可切换：</p><p><img src="https://codestar.top/note-image/image-20230804121633576.png" alt="image-20230804121633576"></p><h2 id="3、提交修改"><a href="#3、提交修改" class="headerlink" title="3、提交修改"></a>3、提交修改</h2><h3 id="3-1、流程示意图"><a href="#3-1、流程示意图" class="headerlink" title="3.1、流程示意图"></a>3.1、流程示意图</h3><p><strong>Local WorkSpace  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Staging Area  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Local Repository  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Remote Repository</strong></p><p><img src="https://codestar.top/note-image/image-20230804142305001.png" alt="image-20230804142305001"></p><h3 id="3-2、修改文件"><a href="#3-2、修改文件" class="headerlink" title="3.2、修改文件"></a>3.2、修改文件</h3><p>修改库中任意文件，以图中文件示例，修改之后会存在一个差异点，表明本地文件与remote端不一致，有新内容可提交：</p><p><img src="https://codestar.top/note-image/image-20230804141940766.png" alt="image-20230804141940766"></p><h3 id="3-3、Stage文件"><a href="#3-3、Stage文件" class="headerlink" title="3.3、Stage文件"></a>3.3、Stage文件</h3><p>填入提交意见之后，点击“Stage all changes”将文件存入Staging Area：</p><p><img src="https://codestar.top/note-image/image-20230804142649118.png" alt="image-20230804142649118"></p><p>之后在<strong>Staged Files</strong>会查看到刚才stage的文件，之后修改意见同步展示，如果需要回退修改，可以点击此区域的“Unstage all changes”按钮：</p><p><img src="https://codestar.top/note-image/image-20230804142954207.png" alt="image-20230804142954207"></p><h3 id="3-4、commit文件"><a href="#3-4、commit文件" class="headerlink" title="3.4、commit文件"></a>3.4、commit文件</h3><p>在文件已经存入Staging Area后，点击“Commit changes to 1 file”将文件存入本地仓库（Local Repository），此时本地仓库进度会更新：</p><p><img src="https://codestar.top/note-image/image-20230804143641805.png" alt="image-20230804143641805"></p><h2 id="4、更新remote仓库"><a href="#4、更新remote仓库" class="headerlink" title="4、更新remote仓库"></a>4、更新remote仓库</h2><p>在所有的修改已经提交到 Local Repository 后，点击push更新remote端仓库文件：</p><p><img src="https://codestar.top/note-image/image-20230804143847499.png" alt="image-20230804143847499"></p><p>push完成之后，两者的进度会再次保持一致：</p><p><img src="https://codestar.top/note-image/image-20230804143954473.png" alt="image-20230804143954473"></p><p>至此，1次代码修改提交的流程完成。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Gitkraken</tag>
      
      <tag>Git可视化工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitkraken安装过程指南</title>
    <link href="/git/gitkraken-install-guide.html"/>
    <url>/git/gitkraken-install-guide.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、软件下载"><a href="#1、软件下载" class="headerlink" title="1、软件下载"></a>1、软件下载</h2><p>Gitkraken最后一个免费版本为：6.5.1。后续的新版本本地私有库打开都为<strong>收费功能</strong>。</p><p>可用的下载链接：</p><table><thead><tr><th>平台</th><th>文件名</th><th>下载链接</th></tr></thead><tbody><tr><td>win-x86</td><td>GitKrakenSetup-6.5.1-x86.exe</td><td><a href="https://ihawo.liner.fun/usr/uploads/2020/09/700118875.exe">下载</a></td></tr><tr><td>win-x64</td><td>GitKrakenSetup-6.5.1-x64.exe</td><td><a href="https://ihawo.liner.fun/usr/uploads/2020/09/2110903104.exe">下载</a></td></tr><tr><td>linux-rpm</td><td>GitKraken-v6.5.1.rpm</td><td><a href="https://ihawo.liner.fun/usr/uploads/2020/09/3454936649.rpm">下载</a></td></tr><tr><td>linux-deb</td><td>GitKraken-v6.5.1.deb</td><td><a href="https://ihawo.liner.fun/usr/uploads/2020/09/3894812982.deb">下载</a></td></tr><tr><td>linux-tar.gz</td><td>GitKraken-v6.5.1.tar.gz</td><td><a href="https://ihawo.liner.fun/usr/uploads/2020/09/12847260.gz">下载</a></td></tr><tr><td>mac</td><td>GitKraken-v6.5.1.zip</td><td><a href="https://ihawo.liner.fun/usr/uploads/2020/09/2065013024.zip">下载</a></td></tr></tbody></table><p>下载对应版本后，直接双击文件安装即可。</p><p>想下载新版本的可以去官网下载，最新版本为9.0.1</p><p><a href="https://www.gitkraken.com/download">https://www.gitkraken.com/download</a></p><p>订阅费用$4.95&#x2F;用户&#x2F;月。</p><h2 id="2、屏蔽自动更新"><a href="#2、屏蔽自动更新" class="headerlink" title="2、屏蔽自动更新"></a>2、屏蔽自动更新</h2><h3 id="2-1、host文件屏蔽更新"><a href="#2-1、host文件屏蔽更新" class="headerlink" title="2.1、host文件屏蔽更新"></a>2.1、host文件屏蔽更新</h3><p>修改hosts文件，当连接到以下域名时首先会从hosts文件中索引，将其设备本机地址进行屏蔽：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Windows\System32\drivers\etc\hosts<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加以下内容</span><br>0.0.0.0 release.gitkraken.com<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230606173130627.png" alt="image-20230606173130627"></p><h3 id="2-1、删除更新程序"><a href="#2-1、删除更新程序" class="headerlink" title="2.1、删除更新程序"></a>2.1、删除更新程序</h3><p>程序所在路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\&lt;你的用户名&gt;\AppData\Local\gitkraken<br></code></pre></td></tr></table></figure><p>删除Update.exe程序</p><h2 id="3、启动应用"><a href="#3、启动应用" class="headerlink" title="3、启动应用"></a>3、启动应用</h2><p>正常启动会出现这个页面：</p><p><img src="https://codestar.top/note-image/image-20230113173027315.png" alt="image-20230113173027315"></p><p>支持两种账号登陆：GitHub账号、Gitkraken账户：</p><p><img src="https://codestar.top/note-image/image-20230113173121550.png" alt="image-20230113173121550"></p><p>首次打开无法绕过上面的弹窗，关闭软件，重新打开右上角会出现<strong>X</strong>关闭按钮：</p><p><img src="https://codestar.top/note-image/image-20230803180308957.png" alt="image-20230803180308957"></p><p>关闭弹窗之后，后面软件就可以正常的使用了。</p><p>页面右下角有一个激活日期，不用管它，清零后也不影响使用：</p><p><img src="https://codestar.top/note-image/image-20230803180436879.png" alt="image-20230803180436879"></p><p>注：由于在<a href="###2.1host%E6%96%87%E4%BB%B6%E5%B1%8F%E8%94%BD%E6%9B%B4%E6%96%B0">2.1host文件屏蔽更新</a>节中屏蔽了对应的域名，不建议登录账户，直接免登录使用即可，需要拉库直接clone即可。</p><p>参考文章：</p><p><a href="https://blog.csdn.net/weixin_43335226/article/details/107091568">https://blog.csdn.net/weixin_43335226/article/details/107091568</a></p><p><a href="https://zhuanlan.zhihu.com/p/98960725">https://zhuanlan.zhihu.com/p/98960725</a></p><p><a href="https://www.zhihu.com/tardis/zm/art/98960725?source_id=1005">https://www.zhihu.com/tardis/zm/art/98960725?source_id=1005</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Gitkraken</tag>
      
      <tag>Git可视化工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM笔记1：了解大模型的历史及特点</title>
    <link href="/ai-ml/llm-learning-note1.html"/>
    <url>/ai-ml/llm-learning-note1.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><h3 id="1-1、词义解惑"><a href="#1-1、词义解惑" class="headerlink" title="1.1、词义解惑"></a>1.1、词义解惑</h3><p>部分专业名词缩略词表：</p><table><thead><tr><th>缩写</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>LLM</td><td>Large Language Model</td><td>大语言模型：参数量达到10亿级别以上的(不同领域定义会存在偏差)</td></tr><tr><td>PLM</td><td>Pre-trained Language Model</td><td>预训练语言模型：这种模型是在大规模文本数据上进行预训练，然后可以通过微调或其他技术来适应特定的自然语言处理任务。常见的PLM包括BERT、GPT等。</td></tr><tr><td>AGI</td><td>Artificial General Intelligence</td><td>通用人工智能</td></tr></tbody></table><h3 id="1-2、关于大模型LLM的认识"><a href="#1-2、关于大模型LLM的认识" class="headerlink" title="1.2、关于大模型LLM的认识"></a>1.2、关于大模型LLM的认识</h3><p>​现如今LLM（大语言模型）发展迅速，在各种应用领域都有不错的应用效果，如在<strong>自然语言处理</strong>领域，LLM可以帮助计算机更好地理解和生成文本，包括写文章、回答问题、翻译语言等。在<strong>信息检索</strong>领域，它可以改进搜索引擎，让我们更轻松地找到所需的信息。在<strong>计算机视觉</strong>领域，研究人员还在努力让计算机理解图像和文字，以改善多媒体交互。下面来了解一下语言模型的发展历程。</p><h2 id="2、语言模型发展简史"><a href="#2、语言模型发展简史" class="headerlink" title="2、语言模型发展简史"></a>2、语言模型发展简史</h2><p>梳理的一张发展简图：</p><p><img src="https://codestar.top/note-image/image-20231115014623579.png" alt="image-20231115014623579"></p><p>参考：<a href="https://datawhalechina.github.io/llm-universe/#/C1/1.%20%E4%BB%80%E4%B9%88%E6%98%AF%E2%BC%A4%E6%A8%A1%E5%9E%8B">https://datawhalechina.github.io/llm-universe/#/C1/1.%20%E4%BB%80%E4%B9%88%E6%98%AF%E2%BC%A4%E6%A8%A1%E5%9E%8B</a></p><h2 id="3、国内外的LLM发展"><a href="#3、国内外的LLM发展" class="headerlink" title="3、国内外的LLM发展"></a>3、国内外的LLM发展</h2><h3 id="3-1、大模型的发展"><a href="#3-1、大模型的发展" class="headerlink" title="3.1、大模型的发展"></a>3.1、大模型的发展</h3><p>2019年大模型开始进入爆发式发展，至今在各大科技公司或研究机构已有非常多的LLM落地实现。下面是按时间线【2019年 - 2023年 6月】列出的LLM发展轨迹，其中仅包含模型参数量超100亿的大模型，如下图所示：</p><p><img src="https://codestar.top/note-image/LLMs-0623-final.png" alt="大语言模型"></p><p>图来源于：<a href="https://arxiv.org/abs/23018223">https://arxiv.org/abs/23018223</a></p><h3 id="3-2、国外代表性LLM大模型"><a href="#3-2、国外代表性LLM大模型" class="headerlink" title="3.2、国外代表性LLM大模型"></a>3.2、国外代表性LLM大模型</h3><h4 id="3-2-1、开源模型"><a href="#3-2-1、开源模型" class="headerlink" title="3.2.1、开源模型"></a>3.2.1、开源模型</h4><table><thead><tr><th align="left">LLM名称</th><th align="left">参数量</th><th align="left">上下文长度</th><th align="left">发布厂商&#x2F;研究机构</th><th align="left">开源地址</th></tr></thead><tbody><tr><td align="left">LLaMA系列</td><td align="left">70亿-650亿</td><td align="left">32k-256k</td><td align="left">Meta</td><td align="left"><a href="https://github.com/facebookresearch/llama">https://github.com/facebookresearch/llama</a></td></tr></tbody></table><h4 id="3-2-2、闭源模型"><a href="#3-2-2、闭源模型" class="headerlink" title="3.2.2、闭源模型"></a>3.2.2、闭源模型</h4><p>国外现如今的LLM发展很迅速，在继OpenAI发布ChatGPT之后，各大厂商纷纷推出自己的大语言模型，具有代表性的LLM如下：</p><table><thead><tr><th align="left">LLM名称</th><th align="left">参数量</th><th align="left">上下文长度</th><th align="left">发布厂商&#x2F;研究机构</th><th align="left">发布时间</th><th align="left">学习知识库截止日期</th></tr></thead><tbody><tr><td align="left">GPT-4 Turbo</td><td align="left">未公布</td><td align="left">128k</td><td align="left">OpenAI</td><td align="left">2023 年 11 月 7 日</td><td align="left">2023 年 4 月</td></tr><tr><td align="left">GPT-4</td><td align="left">1.8 万亿（猜测）</td><td align="left">未公布</td><td align="left">OpenAI</td><td align="left">2023 年 3月</td><td align="left">2021 年 9 月</td></tr><tr><td align="left">GPT-3.5</td><td align="left">1750亿</td><td align="left">16k</td><td align="left">OpenAI</td><td align="left">2023 年 3月</td><td align="left">2021 年 9 月</td></tr><tr><td align="left">Claude 2</td><td align="left">860.1 亿(猜测)</td><td align="left">200K</td><td align="left">Anthropic 公司</td><td align="left">2023 年 7 月 11 日</td><td align="left">2022 年 11 月</td></tr><tr><td align="left">Claude</td><td align="left">62亿</td><td align="left">100K</td><td align="left">Anthropic 公司</td><td align="left">2023 年 3 月 15 日</td><td align="left">2022 年 3 月</td></tr><tr><td align="left">PaLM 2</td><td align="left">34亿</td><td align="left">未公布</td><td align="left">Google</td><td align="left">2022 年 5 月</td><td align="left">未公布</td></tr></tbody></table><h3 id="3-3、国内代表性LLM大模型"><a href="#3-3、国内代表性LLM大模型" class="headerlink" title="3.3、国内代表性LLM大模型"></a>3.3、国内代表性LLM大模型</h3><h4 id="3-3-1、开源模型"><a href="#3-3-1、开源模型" class="headerlink" title="3.3.1、开源模型"></a>3.3.1、开源模型</h4><table><thead><tr><th align="left">LLM名称</th><th align="left">参数量</th><th align="left">上下文长度</th><th align="left">发布厂商&#x2F;研究机构</th><th align="left">开源地址</th></tr></thead><tbody><tr><td align="left">GLM系列</td><td align="left">62 亿</td><td align="left">2k</td><td align="left">清华大学&amp;智谱 AI</td><td align="left"><a href="https://github.com/THUDM">https://github.com/THUDM</a></td></tr><tr><td align="left">通义千问（Qwen）</td><td align="left">70亿(7B)&amp;140亿(7B)</td><td align="left">8k</td><td align="left">阿里巴巴</td><td align="left"><a href="https://github.com/QwenLM/Qwen/tree/main">https://github.com/QwenLM/Qwen/tree/main</a></td></tr><tr><td align="left">Baichuan系列</td><td align="left">70 亿</td><td align="left">4k</td><td align="left">百川智能</td><td align="left"><a href="https://github.com/baichuan-inc">https://github.com/baichuan-inc</a></td></tr><tr><td align="left">Yi</td><td align="left">60亿&amp;340亿</td><td align="left">200k</td><td align="left">零一万物</td><td align="left"><a href="https://github.com/01-ai/Yi">https://github.com/01-ai/Yi</a></td></tr></tbody></table><h4 id="3-3-2、闭源模型"><a href="#3-3-2、闭源模型" class="headerlink" title="3.3.2、闭源模型"></a>3.3.2、闭源模型</h4><table><thead><tr><th align="left">LLM名称</th><th align="left">参数量</th><th align="left">上下文长度</th><th align="left">发布厂商&#x2F;研究机构</th><th align="left">发布时间</th><th align="left">学习知识库截止日期</th></tr></thead><tbody><tr><td align="left">文心一言（4.0）</td><td align="left">2600 亿</td><td align="left">未公布</td><td align="left">百度</td><td align="left">2023 年 3 月</td><td align="left">未公布</td></tr><tr><td align="left">星火大模型</td><td align="left">1700 亿</td><td align="left">未公布</td><td align="left">科大讯飞</td><td align="left">2023 年 5 月 6 日</td><td align="left">未公布</td></tr></tbody></table><h2 id="4、LLM可能的应用场景"><a href="#4、LLM可能的应用场景" class="headerlink" title="4、LLM可能的应用场景"></a>4、LLM可能的应用场景</h2><p>​目前在LLM方面的应用，最多的便是Chat机器人，通过与人类对话的形式，理解人类指令和执行各种复杂任务。这一形式，大大的扩展了人们的想象空间，基于LLM的能力，可以让其充当各种角色来与自己对话，并可作为一个领域专家来回答或解决自己所提出的问题，当然目前这种对话形式以文字较多，后续会逐渐扩展到其他各种输入类型，如视频、语音、图像等等内容，并且在多模态领域也已有各种相对成熟的模型来调用，如<strong>GPT-4与DALL·E 3</strong>的联合，扩展了ChatGPT在图像生成方面的能力，未来的应用范围必定会非常的广泛。</p><h2 id="5、我们如何利用LLM构建应用？"><a href="#5、我们如何利用LLM构建应用？" class="headerlink" title="5、我们如何利用LLM构建应用？"></a>5、我们如何利用LLM构建应用？</h2><h3 id="5-1、思考"><a href="#5-1、思考" class="headerlink" title="5.1、思考"></a>5.1、思考</h3><p>​在上述介绍了非常多的大语言模型，各有千秋，那么除了使用原生的Chat应用，我们还能够使用它们来做什么？目前大模型能够执行各种任务，代码编写、求解数学问题、写作建议、图像生成、摘要总结、搜索信息等等。那么这些能力，我们是否可以通过这些惊奇的能力来拓展应用的使用场景或者自定义应用的能力，那么我们如何来通过LLM来构建出我们自己的应用？在这个问题上，目前已经有了一个相对稳定的一个开发框架——<a href="https://www.langchain.com/">LangChain</a>。LangChain为开源工具，</p><p>为了将大模型整条链路能够部署在端侧，即部署为应用，这个工具实现了将整个链路连接在一起，可以更便捷的开发上层应用，在制作自己专属的LLM应用上更为的简单。</p><h3 id="5-2、LangChain"><a href="#5-2、LangChain" class="headerlink" title="5.2、LangChain"></a>5.2、LangChain</h3><p>​LangChain是一个用于开发由语言模型驱动的应用程序的框架，可以将不同的LLM模型、向量数据库、交互层 Prompt、外部知识、外部代理工具等工具前部整合到一起，进而方便我们可以自由构建专属LLM应用。</p><ul><li><p>相关资源：</p><blockquote><p>Langchain官网：<a href="https://www.langchain.com/">https://www.langchain.com/</a></p><p>中文官方文档：<a href="https://www.langchain.asia/">https://www.langchain.asia/</a></p><p>官方仓库：<a href="https://github.com/langchain-ai/langchain">https://github.com/langchain-ai/langchain</a></p></blockquote></li></ul><p>​框架由几个部分组成：</p><ul><li><p>LangChain 库：</p><blockquote><p> Python 和 JavaScript 库。包含无数组件的接口和集成，将这些组件组合成链和代理的基本运行时，以及链和代理的现成实现</p></blockquote></li><li><p>LangChain模板：</p><blockquote><p>一组易于部署的参考架构，适用于各种任务</p></blockquote></li><li><p>LangServe：</p><blockquote><p>用于将LangChain链部署为REST API的库</p></blockquote></li><li><p>LangSmith：</p><blockquote><p> 开发者平台，可调试、测试、评估和监控基于任何LLM框架构建的链，并与LangChain无缝集成</p></blockquote></li></ul><p>基本的结构图如下：</p><p><img src="https://codestar.top/note-image/image-20231115011536625.png" alt="image-20231115011536625"></p><p>参考：</p><p>1）<a href="https://python.langchain.com/docs/get_started/introduction">https://python.langchain.com/docs/get_started/introduction</a></p><p>2）<a href="https://datawhalechina.github.io/llm-universe/#/C1/4.%20%E4%BB%80%E4%B9%88%E6%98%AF%20LangChain">https://datawhalechina.github.io/llm-universe/#/C1/4.%20%E4%BB%80%E4%B9%88%E6%98%AF%20LangChain</a></p>]]></content>
    
    
    <categories>
      
      <category>AI&amp;ML</category>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datawhale</tag>
      
      <tag>LLM</tag>
      
      <tag>AI&amp;ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索引擎技术及使用技巧</title>
    <link href="/skills/search-engine-techniques.html"/>
    <url>/skills/search-engine-techniques.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、搜索引擎概论"><a href="#1、搜索引擎概论" class="headerlink" title="1、搜索引擎概论"></a>1、搜索引擎概论</h2><p>搜索引擎的本质是在一堆建立好索引的网页中，按照查询的条件查询指定的内容，可以理解为是一个大规模的网页数据库。因为这个原因，当一个网站页面地址未提交到对应的搜索引擎的“网页数据库”中，那么我们就无法通过这个搜索引擎查询到对应的页面内容。我们现在常用的一些搜索引擎，像Google、Baidu、Bing、Sogou背后都存储着各自的”大型网页数据库”。按照这个原理，我们就能够按照指定的搜索格式，来优化我们的搜索技巧，而不是只是单纯的按照直接输入关键字来查找结果。</p><h2 id="2、搜索引擎技巧"><a href="#2、搜索引擎技巧" class="headerlink" title="2、搜索引擎技巧"></a>2、搜索引擎技巧</h2><h3 id="2-1、准确搜索"><a href="#2-1、准确搜索" class="headerlink" title="2.1、准确搜索"></a>2.1、准确搜索</h3><p>使用双引号”text”：这样搜索引擎只会返回和关键词<strong>完全吻合</strong>的搜索结果，在不加双引号的情况下,有的时候, 两个词中间加一个空格, 它会分别搜索两个词</p><p>示例：精准搜索含有“搜索引擎”关键字的网页，<strong>注意引号为英文引号</strong></p><blockquote><p>“搜索引擎”</p></blockquote><p><img src="https://codestar.top/note-image/image-20230820231242007.png" alt="image-20230820231242007"></p><h3 id="2-2、排除关键词"><a href="#2-2、排除关键词" class="headerlink" title="2.2、排除关键词"></a>2.2、排除关键词</h3><p>使用 <em>-</em> 这个减号对指定内容进行排除：</p><p>示例：查找苹果，但过滤掉与iPhone相关的内容</p><blockquote><p>苹果 -iPhone</p></blockquote><p><img src="https://codestar.top/note-image/image-20231116232810623.png" alt="image-20231116232810623"></p><p>过滤多个关键字可以叠加使用”减号”，示例：</p><blockquote><p>苹果 -iPhone -ipad</p></blockquote><p>**注：**需要注意的是，搜索引擎会尽可能的排除特定页面中的关键字，但无法完全排除相关主题的搜索结果。</p><h3 id="2-3、用-OR-或-逻辑进行搜索"><a href="#2-3、用-OR-或-逻辑进行搜索" class="headerlink" title="2.3、用 OR (或)逻辑进行搜索"></a>2.3、用 OR (或)逻辑进行搜索</h3><p>默认搜索下, 搜索引擎会反馈所有和查询词汇相关的结果, 如果通过<em>OR</em> 搜索, 可以得到和两个关键词<strong>分别相关</strong>的结果, 而不仅仅是和两个关键词都同时相关的结果</p><p>示例：</p><blockquote><p>“baidu” or “google”</p></blockquote><h3 id="2-4、同义词搜索"><a href="#2-4、同义词搜索" class="headerlink" title="2.4、同义词搜索~"></a>2.4、同义词搜索~</h3><p>有时，搜索不太具体的术语很有用。如果您不确定将使用哪个术语，您可以使用同义词搜索。在未能准确判断关键词的情况下，你可以通过 <em>~</em> 进行同义词搜索</p><p>示例：</p><blockquote><p>浙江~大学、javascript-声波图</p></blockquote><h3 id="2-5、站内搜索"><a href="#2-5、站内搜索" class="headerlink" title="2.5、站内搜索"></a>2.5、站内搜索</h3><p>在输入框输入<em>site: 网址 关键字</em>，就会在输入的网址内进行站内关键字搜索</p><p>示例：</p><blockquote><p>site: imooc.com Google</p></blockquote><p><strong>优先展示制定站点内的搜索结果，展示完全之后会列出其他网站搜索结果：</strong></p><p><img src="https://codestar.top/note-image/image-20230820231936293.png" alt="image-20230820231936293"></p><h3 id="2-6、使用-星号替代缺失内容"><a href="#2-6、使用-星号替代缺失内容" class="headerlink" title="2.6、使用*星号替代缺失内容"></a>2.6、使用*星号替代缺失内容</h3><p>使用*星号，在特定的位置替代确实的内容</p><p>示例：</p><blockquote><p>site:quora.com *baidu</p></blockquote><p><img src="https://codestar.top/note-image/image-20230820232714938.png" alt="image-20230820232714938"></p><h3 id="2-7、使用-搜索数字范围"><a href="#2-7、使用-搜索数字范围" class="headerlink" title="2.7、使用..搜索数字范围"></a>2.7、使用<code>..</code>搜索数字范围</h3><p>使用..搜索特定范围的内容。</p><p>例如：搜索UML在2020~2023年的相关信息</p><blockquote><p>UML 2020.. 2023</p></blockquote><p>会返回两个数值之间的结果</p><p><img src="https://codestar.top/note-image/image-20230820233133301.png" alt="image-20230820233133301"></p><h3 id="2-8、在网页标题中链接搜索关键词"><a href="#2-8、在网页标题中链接搜索关键词" class="headerlink" title="2.8、在网页标题中链接搜索关键词"></a>2.8、在网页标题中链接搜索关键词</h3><p>通过intitle关键字，可以在网页链接中链接到与关键字一致的网页。</p><p>**示例：**在网页title中，链接与“后台登录”相关的网页</p><blockquote><p>intitle 后台登录</p></blockquote><p><img src="https://codestar.top/note-image/image-20231116233609311.png" alt="image-20231116233609311"></p><h3 id="2-9、搜索相关网站"><a href="#2-9、搜索相关网站" class="headerlink" title="2.9、搜索相关网站"></a>2.9、搜索相关网站</h3><p>使用<em>related: 网址</em> 就会得到这个网址相关的结果</p><p><strong>示例：</strong></p><blockquote><p>related:github.com ~ big-data</p></blockquote><p>查找与github.com相关联的网站</p><p><img src="https://codestar.top/note-image/image-20231116231946738.png" alt="image-20231116231946738"></p><h3 id="2-10、index-of-查找特定类型页面或文件"><a href="#2-10、index-of-查找特定类型页面或文件" class="headerlink" title="2.10、index of 查找特定类型页面或文件"></a>2.10、index of 查找特定类型页面或文件</h3><p>“index of” 可以用来在搜索引擎中查找特定类型页面或文件，可以用来突破一些网站的下载限制。与第13条有点类似，但区别在于这一项搜索出的为一个特定文件的清单，而不是指定的一个文件。</p><p>示例：</p><blockquote><p>index of &#x2F;电子书</p><p>index of &#x2F;mp3</p></blockquote><p><img src="https://codestar.top/note-image/image-20231116234602381.png" alt="image-20231116234602381"></p><h3 id="2-11、and同时基于多个条件搜索"><a href="#2-11、and同时基于多个条件搜索" class="headerlink" title="2.11、and同时基于多个条件搜索"></a>2.11、and同时基于多个条件搜索</h3><p>使用and关键字，可以基于多个条件同时进行搜索</p><p><strong>示例：</strong></p><blockquote><p>inurl:login and intitle:后台登录</p></blockquote><p><img src="https://codestar.top/note-image/image-20230820235521766.png" alt="image-20230820235521766"></p><h3 id="2-12、link将查找链接到另一个指定页面"><a href="#2-12、link将查找链接到另一个指定页面" class="headerlink" title="2.12、link将查找链接到另一个指定页面"></a>2.12、link将查找链接到另一个指定页面</h3><p>通过在搜索内容中加入link，可以将搜索内容链接到一个指定的页面</p><p><strong>示例：</strong></p><blockquote><p>link:github.com</p></blockquote><p><img src="https://codestar.top/note-image/image-20231116233936812.png" alt="image-20231116233936812"></p><h3 id="2-13、针对文件类型搜索"><a href="#2-13、针对文件类型搜索" class="headerlink" title="2.13、针对文件类型搜索"></a>2.13、针对文件类型搜索</h3><p>使用filetype关键字来指定搜索到的结果中的文件类型。</p><p>示例：只查找pdf类型的文档</p><blockquote><p>filetype:PDF you don’t know JavaScript</p></blockquote><p><img src="https://codestar.top/note-image/image-20230820235922393.png" alt="image-20230820235922393"></p><p>Google所支持的索引文件类型可以参考官方：<a href="https://developers.google.com/search/docs/crawling-indexing/indexable-file-types?hl=zh-cn">https://developers.google.com/search/docs/crawling-indexing/indexable-file-types?hl=zh-cn</a></p><p>截个图~</p><p><img src="https://codestar.top/note-image/image-20231116234923549.png" alt="image-20231116234923549"></p><h3 id="2-14、查找您的-IP-地址"><a href="#2-14、查找您的-IP-地址" class="headerlink" title="2.14、查找您的 IP 地址"></a>2.14、查找您的 IP 地址</h3><p>当想查询本机的公共IP地址时，可以使用<code>my ip address</code>这一条指令，搜索之后结果会显示自己的公共IP地址：</p><p><img src="https://codestar.top/note-image/image-20231116235106955.png" alt="image-20231116235106955"></p><h3 id="2-15、其他"><a href="#2-15、其他" class="headerlink" title="2.15、其他"></a>2.15、其他</h3><p>另外还有许多的搜索技巧，可以查看下面的图，截取了部分供查阅：</p><p><img src="https://codestar.top/note-image/image-20230821000940395.png" alt="image-20230821000940395"></p><p><strong>上面的搜索技巧，可以混合在一起使用，熟练运用之后，搜索功能将会变得更加强，并且更加准确，而不再是只查找一个关键字。</strong></p><p>参考文档：</p><p><a href="https://blog.csdn.net/qq_34033853/article/details/79311303">https://blog.csdn.net/qq_34033853/article/details/79311303</a></p><p><a href="https://blog.csdn.net/huang714/article/details/119914060">https://blog.csdn.net/huang714/article/details/119914060</a></p>]]></content>
    
    
    <categories>
      
      <category>搜索引擎</category>
      
      <category>Google</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搜索引擎技巧</tag>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网卡修复程序执行出现0x80004005错误代码问题解决</title>
    <link href="/windows/network-card-fix-program-error-0x80004005.html"/>
    <url>/windows/network-card-fix-program-error-0x80004005.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、初步修复指令"><a href="#1、初步修复指令" class="headerlink" title="1、初步修复指令"></a>1、初步修复指令</h2><p>参考：<a href="https://baijiahao.baidu.com/s?id=1715556202388908891&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1715556202388908891&amp;wfr=spider&amp;for=pc</a></p><p>以管理员身份运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">regsvr32 softpub.dll<br>regsvr32 wintrust.dll<br>regsvr32 initpki.dll<br></code></pre></td></tr></table></figure><h2 id="2、regsvr32-initpki-dll执行报错问题解决"><a href="#2、regsvr32-initpki-dll执行报错问题解决" class="headerlink" title="2、regsvr32 initpki.dll执行报错问题解决"></a>2、regsvr32 initpki.dll执行报错问题解决</h2><p>参考：<a href="https://blog.csdn.net/qq_41943240/article/details/115220254">https://blog.csdn.net/qq_41943240/article/details/115220254</a></p><p>执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">arch</span> = Get-WMIObject -Class Win32_Processor -ComputerName LocalHost | Select-Object AddressWidth</span> <br>Write-Host &quot;1. Stopping Windows Update Services...&quot; <br>Stop-Service -Name BITS <br>Stop-Service -Name wuauserv <br>Stop-Service -Name appidsvc <br>Stop-Service -Name cryptsvc <br>Write-Host &quot;2. Remove QMGR Data file...&quot; <br>Remove-Item &quot;$env:allusersprofile\Application Data\Microsoft\Network\Downloader\qmgr*.dat&quot; -ErrorAction SilentlyContinue <br>Write-Host &quot;3. Renaming the Software Distribution and CatRoot Folder...&quot; <br>Rename-Item $env:systemroot\SoftwareDistribution SoftwareDistribution.bak -ErrorAction SilentlyContinue <br>Rename-Item $env:systemroot\System32\Catroot2 catroot2.bak -ErrorAction SilentlyContinue <br>Write-Host &quot;4. Removing old Windows Update log...&quot; <br>Remove-Item $env:systemroot\WindowsUpdate.log -ErrorAction SilentlyContinue <br>Write-Host &quot;5. Resetting the Windows Update Services to defualt settings...&quot; <br>&quot;sc.exe sdset bits D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;AU)(A;;CCLCSWRPWPDTLOCRRC;;;PU)&quot; <br>&quot;sc.exe sdset wuauserv D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;AU)(A;;CCLCSWRPWPDTLOCRRC;;;PU)&quot; <br>Set-Location $env:systemroot\system32 <br>Write-Host &quot;6. Registering some DLLs...&quot; <br>regsvr32.exe /s atl.dll <br>regsvr32.exe /s urlmon.dll <br>regsvr32.exe /s mshtml.dll <br>regsvr32.exe /s shdocvw.dll <br>regsvr32.exe /s browseui.dll <br>regsvr32.exe /s jscript.dll <br>regsvr32.exe /s vbscript.dll <br>regsvr32.exe /s scrrun.dll <br>regsvr32.exe /s msxml.dll <br>regsvr32.exe /s msxml3.dll <br>regsvr32.exe /s msxml6.dll <br>regsvr32.exe /s actxprxy.dll <br>regsvr32.exe /s softpub.dll <br>regsvr32.exe /s wintrust.dll <br>regsvr32.exe /s dssenh.dll <br>regsvr32.exe /s rsaenh.dll <br>regsvr32.exe /s gpkcsp.dll <br>regsvr32.exe /s sccbase.dll <br>regsvr32.exe /s slbcsp.dll <br>regsvr32.exe /s cryptdlg.dll <br>regsvr32.exe /s oleaut32.dll <br>regsvr32.exe /s ole32.dll <br>regsvr32.exe /s shell32.dll <br>regsvr32.exe /s initpki.dll <br>regsvr32.exe /s wuapi.dll <br>regsvr32.exe /s wuaueng.dll <br>regsvr32.exe /s wuaueng1.dll <br>regsvr32.exe /s wucltui.dll <br>regsvr32.exe /s wups.dll <br>regsvr32.exe /s wups2.dll <br>regsvr32.exe /s wuweb.dll <br>regsvr32.exe /s qmgr.dll <br>regsvr32.exe /s qmgrprxy.dll <br>regsvr32.exe /s wucltux.dll <br>regsvr32.exe /s muweb.dll <br>regsvr32.exe /s wuwebv.dll <br>Write-Host &quot;7) Removing WSUS client settings...&quot; <br>REG DELETE &quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate&quot; /v AccountDomainSid /f <br>REG DELETE &quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate&quot; /v PingID /f <br>REG DELETE &quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate&quot; /v SusClientId /f <br>Write-Host &quot;8) Resetting the WinSock...&quot; <br>netsh winsock reset <br>netsh winhttp reset proxy <br>Write-Host &quot;9) Delete all BITS jobs...&quot; <br>Get-BitsTransfer | Remove-BitsTransfer <br>Write-Host &quot;10) Attempting to install the Windows Update Agent...&quot; <br><span class="hljs-meta prompt_">if($</span><span class="language-bash"><span class="hljs-built_in">arch</span> -eq 64)&#123;</span> <br>wusa Windows8-RT-KB2937636-x64 /quiet <br>&#125; <br>else&#123; <br>wusa Windows8-RT-KB2937636-x86 /quiet <br>&#125; <br>Write-Host &quot;11) Starting Windows Update Services...&quot; <br>Start-Service -Name BITS <br>Start-Service -Name wuauserv <br>Start-Service -Name appidsvc <br>Start-Service -Name cryptsvc <br>Write-Host &quot;12) Forcing discovery...&quot; <br>wuauclt /resetauthorization /detectnow <br>Write-Host &quot;Process complete. Please reboot your computer.&quot; <br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221212104125540.png" alt="image-20221212104125540"></p><p><img src="https://codestar.top/note-image/image-20221212104125540.png" alt="image-20221212104125540"></p><p><img src="https://codestar.top/note-image/image-20221212104112299.png" alt="image-20221212104112299"></p><p>直接补齐对应dll文件：</p><p>参考：<a href="http://www.dllzj.com/initpki.dll/">http://www.dllzj.com/initpki.dll/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝到一下文件夹</span><br>C:\Windows\SysWOW64<br>C:\Windows\System32<br></code></pre></td></tr></table></figure><h2 id="3、换个方法–清除网卡旧配置"><a href="#3、换个方法–清除网卡旧配置" class="headerlink" title="3、换个方法–清除网卡旧配置"></a>3、换个方法–清除网卡旧配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重置网卡</span><br>netsh winsock reset catalog<br>netsh int ip reset reset.log<br></code></pre></td></tr></table></figure><p>重启系统后检查网卡配置，恢复为默认状态：</p><p><img src="https://codestar.top/note-image/image-20221212120334898.png" alt="image-20221212120334898"></p><p>删除对应子项注册表：</p><p><img src="https://codestar.top/note-image/image-20221212140333170.png" alt="image-20221212140333170"></p><h2 id="4、诊断服务开启"><a href="#4、诊断服务开启" class="headerlink" title="4、诊断服务开启"></a>4、诊断服务开启</h2><p><kbd>win</kbd>+<kbd>r</kbd>打开运行窗口，运行services.msc，进入服务面板，检查以下项是否开启：</p><p><img src="https://codestar.top/note-image/image-20221212122316122.png" alt="image-20221212122316122"></p><h2 id="5、网卡驱动重置"><a href="#5、网卡驱动重置" class="headerlink" title="5、网卡驱动重置"></a>5、网卡驱动重置</h2><p><kbd>win</kbd>+<kbd>r</kbd>打开运行窗口，输入devmgmt.msc，进入设备管理器。</p><p><img src="https://codestar.top/note-image/image-20221212122508987.png" alt="image-20221212122508987"></p><p>网络适配器，卸载对应设备：</p><p><img src="https://codestar.top/note-image/image-20221212122532652.png" alt="image-20221212122532652"></p><p>之后重新连接网卡即可：</p><p><img src="https://codestar.top/note-image/image-20221212140525730.png" alt="image-20221212140525730"></p><h2 id="6、参考方法"><a href="#6、参考方法" class="headerlink" title="6、参考方法"></a>6、参考方法</h2><p><a href="https://zhidao.baidu.com/question/2148256226206548268.html">https://zhidao.baidu.com/question/2148256226206548268.html</a></p><p><a href="https://wenku.baidu.com/view/a1cbed5fbb4ae45c3b3567ec102de2bd9705de5d.html?_wkts_=1670816062878&bdQuery=%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE%E7%9A%84%E5%86%85%E5%AE%B9%E6%B8%85%E9%99%A4">https://wenku.baidu.com/view/a1cbed5fbb4ae45c3b3567ec102de2bd9705de5d.html?_wkts_=1670816062878&amp;bdQuery=%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE%E7%9A%84%E5%86%85%E5%AE%B9%E6%B8%85%E9%99%A4</a></p><p><a href="https://www.zizhi888.cn/itbaike/31328.html">https://www.zizhi888.cn/itbaike/31328.html</a></p><p><a href="http://t.zoukankan.com/fulse-p-6276858.html">http://t.zoukankan.com/fulse-p-6276858.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>设备管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>网卡设备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins操作指导1：jenkins安装</title>
    <link href="/cicd/jenkins-installation.html"/>
    <url>/cicd/jenkins-installation.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、Java11配置安装"><a href="#1、Java11配置安装" class="headerlink" title="1、Java11配置安装"></a>1、Java11配置安装</h2><p>**Tips：**新版Jenkins要求系统安装的Java版本至少为Java11，在安装Jenkins之前，先配置一下本地的java环境，适配新版Jenkins。</p><p>下载java11安装包：<a href="https://www.techspot.com/downloads/5553-java-jdk.html">https://www.techspot.com/downloads/5553-java-jdk.html</a></p><p>选择下面Windows类型，进入下载页面：</p><p><img src="https://codestar.top/note-image/image-20230815095841852.png" alt="image-20230815095841852"></p><p>在执行前，需要配置一下java11的环境变量：<kbd>win</kbd>+<kbd>r</kbd>打开执行面板，输入<code>sysdm.cpl</code>进入系统属性面板，切换至“高级”页签，点击环境变量：</p><p><img src="https://codestar.top/note-image/image-20230815101418996.png" alt="image-20230815101418996"></p><p>要配置的环境变量有3个，在系统变量中配置，分别是下面这几项：</p><p>1、JAVA_HOME：把java安装根路径填入</p><p><img src="https://codestar.top/note-image/image-20230815101230726.png" alt="image-20230815101230726"></p><p>2、CLASS_PATH:输入<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; </code></p><p><img src="https://codestar.top/note-image/image-20230815101629462.png" alt="image-20230815101629462"></p><p>3、path：添加可执行文件路径，填入<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code></p><p><img src="https://codestar.top/note-image/image-20230815101905409.png" alt="image-20230815101905409"></p><p>修改完了，点击确认即可。之前打开的运行面板需要关闭重新打开。</p><p>运行面板输入<code>java -version</code>，出现下面执行结果，说明配置正常。</p><p><img src="https://codestar.top/note-image/image-20230815102117537.png" alt="image-20230815102117537"></p><h2 id="2、Jenkins下载"><a href="#2、Jenkins下载" class="headerlink" title="2、Jenkins下载"></a>2、Jenkins下载</h2><p>在配置完成java环境之后，从官网下载Windows安装包，官网：<a href="https://www.jenkins.io/zh/download/">https://www.jenkins.io/zh/download/</a></p><p>选择下面的类型：</p><p><img src="https://codestar.top/note-image/image-20230815094803461.png" alt="image-20230815094803461"></p><p>下载完成之后，双击应用程序，跟随指导安装即可：</p><p>端口默认8080</p><p><img src="https://codestar.top/note-image/image-20230815095201603.png" alt="image-20230815095201603"></p><p>配置java，最新版本jenkins只支持java11或java17：</p><p><img src="https://codestar.top/note-image/image-20230815095336909.png" alt="image-20230815095336909"></p><p>在参考第一节配置完Java11后，进入下一步：</p><p><img src="https://codestar.top/note-image/image-20230815100153469.png" alt="image-20230815100153469"></p><p><img src="https://codestar.top/note-image/image-20230815100219161.png" alt="image-20230815100219161"></p><p>一路到底，出现下面页面则安装完成：</p><p><img src="https://codestar.top/note-image/image-20230815100513334.png" alt="image-20230815100513334"></p><p>安装完成之后，<strong>PC不会展示可执行图标</strong>，jenkins通过指令来打开。</p><h2 id="3、启动jenkins服务"><a href="#3、启动jenkins服务" class="headerlink" title="3、启动jenkins服务"></a>3、启动jenkins服务</h2><p>要启动jenkins需要进入到其安装路径下，执行相应指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar jenkins.war --httpPort=8080<br></code></pre></td></tr></table></figure><p>启动完成之后，在浏览器打开控制页面地址：<a href="http://localhost:8080/">http://localhost:8080</a></p><p><img src="https://codestar.top/note-image/image-20230815102836219.png" alt="image-20230815102836219"></p><p>首次安装启动，会出现管理员密码校验：</p><p>从下面路径查看密码填到下面的页面，解锁权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\ProgramData\Jenkins\.jenkins\secrets\initialAdminPassword<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230815102907208.png" alt="image-20230815102907208"></p><p>进入之后，会出现插件引导页面，我这里选择“安装推荐的插件”：</p><p><img src="https://codestar.top/note-image/image-20230815103121109.png" alt="image-20230815103121109"></p><p>之后进入插件下载页面，等待插件安装完成即可开始使用了：</p><p><img src="https://codestar.top/note-image/image-20230815103212930.png" alt="image-20230815103212930"></p><p>创建账户：下面的信息填完，均为<strong>必填</strong></p><p><img src="https://codestar.top/note-image/image-20230815103641757.png" alt="image-20230815103641757"></p><p>设置URL，这里我保持了默认：</p><p><img src="https://codestar.top/note-image/image-20230815103748752.png" alt="image-20230815103748752"></p><p>配置完毕：</p><p><img src="https://codestar.top/note-image/image-20230815103813581.png" alt="image-20230815103813581"></p><h2 id="4、其他Jenkins操作"><a href="#4、其他Jenkins操作" class="headerlink" title="4、其他Jenkins操作"></a>4、其他Jenkins操作</h2><h3 id="4-1、关闭Jenkins服务"><a href="#4-1、关闭Jenkins服务" class="headerlink" title="4.1、关闭Jenkins服务"></a>4.1、关闭Jenkins服务</h3><p>在Jenkins服务器的网址url地址后加上<strong>exit</strong>：</p><p><a href="http://localhost:8080/exit">http://localhost:8080/exit</a></p><h3 id="4-2、重启Jenkies服务"><a href="#4-2、重启Jenkies服务" class="headerlink" title="4.2、重启Jenkies服务"></a>4.2、重启Jenkies服务</h3><p>在Jenkins服务器URL地址后加内容<strong>restart</strong></p><p>  <a href="http://localhost:8080/restart">http://localhost:8080/restart</a></p><h3 id="4-3、重新加载配置信息"><a href="#4-3、重新加载配置信息" class="headerlink" title="4.3、重新加载配置信息"></a>4.3、重新加载配置信息</h3><p>在Jenkins服务器URL地址后加内容<strong>reload</strong></p><p>  <a href="http://localhost:8080/reload">http://localhost:8080/reload</a></p>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
      <tag>持续集成</tag>
      
      <tag>CICD工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA新建maven项目出现x图标，运行报错解决方法</title>
    <link href="/java/idea-new-maven-project-x-icon-solution.html"/>
    <url>/java/idea-new-maven-project-x-icon-solution.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、问题现象"><a href="#1、问题现象" class="headerlink" title="1、问题现象"></a>1、问题现象</h2><p>IDEA2022.3.3，新建maven-archetype项目后，出现图标异常问题，左上角会显示x图标。并且无法执行程序：</p><p><img src="https://codestar.top/note-image/image-20230524094939415.png" alt="image-20230524094939415"></p><p><img src="https://codestar.top/note-image/image-20230524094913810.png" alt="image-20230524094913810"></p><p>**问题原因分析：**判断为文件路径结构异常，未识别到以下路径的文件，导致执行异常。尝试删除<code>package $org.example;</code>，依旧提示找不到对应类：</p><p><img src="https://codestar.top/note-image/image-20230524094757419.png" alt="image-20230524094757419"></p><p>问题原因：</p><p>选择的项目为maven archetype项目构建，此项目生成的目录结构不同于maven项目。如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">archetype<br>|-- pom.xml<br>`-- src<br>    `-- main<br>        `-- resources<br>            |-- META-INF<br>            |   `-- maven<br>            |       `--archetype-metadata.xml<br>            `-- archetype-resources<br>                |-- pom.xml<br>                `-- src<br>                    |-- main<br>                    |   `-- java<br>                    |       `-- App.java<br>                    `-- test<br>                        `-- java<br>                            `-- AppTest.java<br></code></pre></td></tr></table></figure><p>而此项目生成对应的Module结构体为maven项目结构，如下：</p><p><img src="https://codestar.top/note-image/image-20230524150755533.png" alt="image-20230524150755533"></p><p>因而，导致除resources路径能识别之外，其他路径均无法识别，导致找不到对应的packages和class。因而执行之后程序报错。</p><p>解决方法：使用maven-quickstart快速创建项目。</p><p><img src="https://codestar.top/note-image/image-20230524155451915.png" alt="image-20230524155451915"></p><p>依据电脑性能生成时间长短不一，出现BUILD SUCCESS即生成成功：</p><p><img src="https://codestar.top/note-image/image-20230524160602362.png" alt="image-20230524160602362"></p><p>创建完成的路径结构如下：</p><p><img src="https://codestar.top/note-image/image-20230524160707938.png" alt="image-20230524160707938"></p><p>缺少的resources路径可自行创建。</p><h2 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h2><p>修改启动配置：</p><p>点击窗口右上角运行配置图标，选择<code>Edit Configurations...</code></p><p><img src="https://codestar.top/note-image/image-20230524095259624.png" alt="image-20230524095259624"></p><p><img src="https://codestar.top/note-image/image-20230524110142397.png" alt="image-20230524110142397"></p><h2 id="3、创建maven项目"><a href="#3、创建maven项目" class="headerlink" title="3、创建maven项目"></a>3、创建maven项目</h2><p>选择创建一个快速maven项目：</p><p><img src="https://codestar.top/note-image/image-20230524154307157.png" alt="image-20230524154307157"></p><p><img src="https://codestar.top/note-image/image-20230524114708392.png" alt="image-20230524114708392"></p><p>加载本地maven骨架：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-DarchetypeCatalog=local<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230524114845490.png" alt="image-20230524114845490"></p><h2 id="4、创建maven-archetype"><a href="#4、创建maven-archetype" class="headerlink" title="4、创建maven archetype"></a>4、创建maven archetype</h2><h3 id="4-1、配置maven"><a href="#4-1、配置maven" class="headerlink" title="4.1、配置maven"></a>4.1、配置maven</h3><p>IDEA中，使用<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd>快捷键，打开设置页面，搜索maven进入maven配置页面，具体设置如下：</p><p><img src="https://codestar.top/note-image/image-20230524141943170.png" alt="image-20230524141943170"></p><p>修改完成后apply应用，点击OK即可。</p><h3 id="4-2、修改配置文件"><a href="#4-2、修改配置文件" class="headerlink" title="4.2、修改配置文件"></a>4.2、修改配置文件</h3><p>编辑器打开setting配置文件修改：</p><h4 id="1）maven镜像源修改"><a href="#1）maven镜像源修改" class="headerlink" title="1）maven镜像源修改"></a>1）maven镜像源修改</h4><p>此处用的是阿里源：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- mirror</span><br><span class="hljs-comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="hljs-comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span><br><span class="hljs-comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">  &lt;mirror&gt;</span><br><span class="hljs-comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span><br><span class="hljs-comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span><br><span class="hljs-comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class="hljs-comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span><br><span class="hljs-comment">  &lt;/mirror&gt;</span><br><span class="hljs-comment">   --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blocked</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">blocked</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2）配置本地仓库路径："><a href="#2）配置本地仓库路径：" class="headerlink" title="2）配置本地仓库路径："></a>2）配置本地仓库路径：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- localRepository</span><br><span class="hljs-comment">   | The path to the local repository maven will use to store artifacts.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="hljs-comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\codefiles\MavenRepo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-3、创建maven-archetype项目"><a href="#4-3、创建maven-archetype项目" class="headerlink" title="4.3、创建maven archetype项目"></a>4.3、创建maven archetype项目</h3><p>新建项目：</p><p><img src="https://codestar.top/note-image/image-20230524122435042.png" alt="image-20230524122435042"></p><p>使用Maven archetype模板新建（相较于maven，提高了加载速度），参考以下配置：</p><p><img src="https://codestar.top/note-image/image-20230524143314409.png" alt="image-20230524143314409"></p><h2 id="5、maven及maven-archetype对比"><a href="#5、maven及maven-archetype对比" class="headerlink" title="5、maven及maven archetype对比"></a>5、maven及maven archetype对比</h2><p>maven archetype目录结构：</p><p><img src="https://codestar.top/note-image/image-20230524150553771.png" alt="image-20230524150553771"></p><p>maven 标准目录结构：</p><p><img src="https://codestar.top/note-image/image-20230524150755533.png" alt="image-20230524150755533"></p><p>maven-quick-start目录结构：</p><p><img src="https://codestar.top/note-image/image-20230524152123543.png" alt="image-20230524152123543"></p><p>参考文档：</p><p><a href="https://maven.apache.org/guides/mini/guide-creating-archetypes.html">Apache官方文档</a></p><p><a href="https://blog.csdn.net/zzvar/article/details/114879815">https://blog.csdn.net/zzvar/article/details/114879815</a></p><p><a href="https://juejin.cn/s/maven%20archetype%E5%92%8Cmaven%E7%9A%84%E5%8C%BA%E5%88%AB">https://juejin.cn/s/maven%20archetype%E5%92%8Cmaven%E7%9A%84%E5%8C%BA%E5%88%AB</a></p><p><a href="https://juejin.cn/post/7052210790748651551">https://juejin.cn/post/7052210790748651551</a></p><p><a href="https://blog.csdn.net/anddyhua/article/details/88548791">https://blog.csdn.net/anddyhua/article/details/88548791</a></p><p><a href="https://www.jianshu.com/p/03b41d172e5e">https://www.jianshu.com/p/03b41d172e5e</a></p><p><a href="https://blog.csdn.net/qq_42490075/article/details/106957579">https://blog.csdn.net/qq_42490075/article/details/106957579</a></p><p><a href="https://blog.csdn.net/hgnuxc_1993/article/details/125427590">https://blog.csdn.net/hgnuxc_1993/article/details/125427590</a></p>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Maven项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用IDEA编译封装Android APK操作方法</title>
    <link href="/java/idea-compile-android-apk.html"/>
    <url>/java/idea-compile-android-apk.html</url>
    
    <content type="html"><![CDATA[<p>**&#x3D;&#x3D;注：&#x3D;&#x3D;**以下步骤基于IDEA Community 2023.1.1版本操作。</p><p><img src="https://codestar.top/note-image/image-20231110003802687.png" alt="image-20231110003802687"></p><h2 id="1、安装Android-SDK"><a href="#1、安装Android-SDK" class="headerlink" title="1、安装Android SDK"></a>1、安装Android SDK</h2><p><img src="https://codestar.top/note-image/image-20230516182304899.png" alt="image-20230516182304899"></p><p>一开始检查无SDK安装，点击next进行安装：</p><p><img src="https://codestar.top/note-image/image-20230516182512814.png" alt="image-20230516182512814"></p><p>修改安装的内容，默认安装SDK即可，修改安装位置，点击next继续安装：</p><p><img src="https://codestar.top/note-image/image-20230516182440374.png" alt="image-20230516182440374"></p><p>继续next：</p><p><img src="https://codestar.top/note-image/image-20230516182649248.png" alt="image-20230516182649248"></p><p>同意协议，点击finish：</p><p><img src="https://codestar.top/note-image/image-20230516182757532.png" alt="image-20230516182757532"></p><p>之后会进入安装过程：</p><p><img src="https://codestar.top/note-image/image-20230516182846165.png" alt="image-20230516182846165"></p><p>最后下载完成finish即可。</p><h2 id="2、创建Android项目"><a href="#2、创建Android项目" class="headerlink" title="2、创建Android项目"></a>2、创建Android项目</h2><p>安装完SDK之后，next继续创建模板：</p><p><img src="https://codestar.top/note-image/image-20230516183928652.png" alt="image-20230516183928652"></p><p>选择Empty Activity模板：</p><p><img src="https://codestar.top/note-image/image-20230516184345674.png" alt="image-20230516184345674"></p><p><img src="https://codestar.top/note-image/image-20230516184801891.png" alt="image-20230516184801891"></p><p><img src="https://codestar.top/note-image/image-20230516185015732.png" alt="image-20230516185015732"></p><p><img src="https://codestar.top/note-image/image-20230517091251806.png" alt="image-20230517091251806"></p><h2 id="3、项目结构"><a href="#3、项目结构" class="headerlink" title="3、项目结构"></a>3、项目结构</h2><p>生成项目后，主要的结构如下：</p><p><img src="https://codestar.top/note-image/image-20230517141803431.png" alt="image-20230517141803431"></p><p>项目默认创建了主活动文件，目录为src&#x2F;main&#x2F;java&#x2F;com.*.*下面的MainActivity.kt，并且创建对应的主页面res&#x2F;layout&#x2F;activity_main.xml，<TextView>中默认写入了Hello World。</p><h2 id="4、运行环境准备"><a href="#4、运行环境准备" class="headerlink" title="4、运行环境准备"></a>4、运行环境准备</h2><p>在run窗口配置，进入Device Manager中新建虚拟设备：</p><p><img src="https://codestar.top/note-image/image-20230517142157196.png" alt="image-20230517142157196"></p><p><img src="https://codestar.top/note-image/image-20230517142311897.png" alt="image-20230517142311897"></p><p>选择任意一种phone设备，之后next进入下一步：</p><p><img src="https://codestar.top/note-image/image-20230517142510075.png" alt="image-20230517142510075"></p><p>获取手机镜像：</p><ul><li>选择镜像：</li></ul><p><img src="https://codestar.top/note-image/image-20230517142708298.png" alt="image-20230517142708298"></p><ul><li>同意协议之后，下载镜像：</li></ul><p><img src="https://codestar.top/note-image/image-20230517142737944.png" alt="image-20230517142737944"></p><p>等待下载完成：</p><p><img src="https://codestar.top/note-image/image-20230517143012763.png" alt="image-20230517143012763"></p><p>安装完成：</p><p><img src="https://codestar.top/note-image/image-20230517150615464.png" alt="image-20230517150615464"></p><ul><li>安装HAXM</li></ul><p><img src="https://codestar.top/note-image/image-20230517150721174.png" alt="image-20230517150721174"></p><p><img src="https://codestar.top/note-image/image-20230517150745014.png" alt="image-20230517150745014"></p><p>选则安装程序，同意协议，点击next继续（安装过程弹出需要管理员权限，同意安装即可）：</p><p><img src="https://codestar.top/note-image/image-20230517150820053.png" alt="image-20230517150820053"></p><p>安装完成，finish结束：</p><p><img src="https://codestar.top/note-image/image-20230517150930328.png" alt="image-20230517150930328"></p><p>安装结束后，此提示依旧存在，可忽略，此页面为静态页面，后续重新打开页面会修复：</p><p><img src="https://codestar.top/note-image/image-20230517151154107.png" alt="image-20230517151154107"></p><ul><li>选中镜像，继续下一步创建：</li></ul><p><img src="https://codestar.top/note-image/image-20230517151139175.png" alt="image-20230517151139175"></p><p>finish完成创建：</p><p><img src="https://codestar.top/note-image/image-20230517151448373.png" alt="image-20230517151448373"></p><p>创建完成之后会出现在虚拟设备列表中：</p><p><img src="https://codestar.top/note-image/image-20230517151405917.png" alt="image-20230517151405917"></p><h2 id="5、安卓虚拟机运行APP"><a href="#5、安卓虚拟机运行APP" class="headerlink" title="5、安卓虚拟机运行APP"></a>5、安卓虚拟机运行APP</h2><p>选择虚拟机直接点击右上角运行图标运行APP</p><p><img src="https://codestar.top/note-image/image-20230517154808072.png" alt="image-20230517154808072"></p><p>运行后如下：</p><p><img src="https://codestar.top/note-image/image-20230517154646772.png" alt="image-20230517154646772"></p><p>缩小虚拟设备列表：</p><p><img src="https://codestar.top/note-image/Snipaste_2023-05-17_15-52-20.png" alt="Snipaste_2023-05-17_15-52-20"></p><p>截图：</p><p><img src="https://codestar.top/note-image/image-20230517154622689.png" alt="image-20230517154622689"></p><p>将HelloWrord字样修改成其他，然后点击运行按钮旁的第二个重启按钮，更新的代码会即时生效而不用重启<a href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E6%9C%BA&spm=1001.2101.3001.7020">虚拟机</a>，开发过程中便于我们调试。</p><ul><li>修改布局内容</li></ul><p>选中元素，右击进入Go to XML：</p><p><img src="https://codestar.top/note-image/image-20230517155853605.png" alt="image-20230517155853605"></p><p>或点击页面右上角Code进入编辑：</p><p><img src="https://codestar.top/note-image/image-20230517160041903.png" alt="image-20230517160041903"></p><p>XML页面可以修改页面布局，点击右上角design切换至原来页面：</p><p><img src="https://codestar.top/note-image/image-20230517155757627.png" alt="image-20230517155757627"></p><h2 id="6、发布APK"><a href="#6、发布APK" class="headerlink" title="6、发布APK"></a>6、发布APK</h2><p>开发完应用app后，我们就可以发布成apk，提供他人下载安装。</p><p>发布方法：</p><p>点击Build—》Generate Signed Bundle &#x2F; APK</p><p><img src="https://codestar.top/note-image/image-20230517161604019.png" alt="image-20230517161604019"></p><p>选择APK，next：</p><p><img src="https://codestar.top/note-image/image-20230517161627540.png" alt="image-20230517161627540"></p><p>Key store path，选择新建key文件</p><p><img src="https://codestar.top/note-image/image-20230517161717098.png" alt="image-20230517161717098"></p><p>按照提示填写key存放路径和Password以及名称和组织，点击OK继续下一步：</p><p>**注：**后续每一轮打包发布APK都需要此key文件和Password，很重要，记好谨防丢失。</p><p><img src="https://codestar.top/note-image/image-20230517162141618.png" alt="image-20230517162141618"></p><p>记住密码，进入下一步：</p><p><img src="https://codestar.top/note-image/image-20230517163133491.png" alt="image-20230517163133491"></p><p>选择发布版本有debug和release两种，选择其中一个进行打包：debug是内测版文件比较大，用于开发调试。release是发行版比较小，运行也快。</p><p><img src="https://codestar.top/note-image/image-20230517163442348.png" alt="image-20230517163442348"></p><p><img src="https://codestar.top/note-image/image-20230517165038317.png" alt="image-20230517165038317"></p><p>打包完成apk的输出目录默认会在app下如目标路径下如AndroidAPP\app\release，确认完成后，该目录下就生成了apk文件，发到手机上就能安装运行了。</p><p>至此整个APK封装发布流程完成了。</p>]]></content>
    
    
    <categories>
      
      <category>Android技术</category>
      
      <category>Android-APK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>apk包编译</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android adb 利用wlan局域网进行无线调试方法</title>
    <link href="/android/adb-wireless-debugging.html"/>
    <url>/android/adb-wireless-debugging.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、基本原理"><a href="#1、基本原理" class="headerlink" title="1、基本原理"></a>1、基本原理</h2><p>类似于网络热点共享文件，利用两端设备处于同一个局域网，能够实现数据共享，通过adb来建立tcp连接实现连接adb调试设备，数据通过无线局域网进行传输。使用wlan的便利在于省去了usb线的连接，没有线束的困扰，也方便部分场景下USB端口被禁用但需要进行调试的情况。</p><p><strong>连接前准备：</strong></p><blockquote><p>1、PC与待连设备处于同一个局域网，即连接同一个wifi、AP热点、以太网。</p><p>2、PC与待连设备间可正常PING通网络。</p></blockquote><p><strong>注：</strong> 原则上第一点满足，第二点自动满足，如遇无法连接可通过第二点来检查网络环境问题。</p><h2 id="2、启用开发者模式"><a href="#2、启用开发者模式" class="headerlink" title="2、启用开发者模式"></a>2、启用开发者模式</h2><p>后续的操作需要打开开发者模式来进行，Android设备中通用开启开发者模式的步骤：<code>设置-关于设备-点击&#39;版本号&#39;7次</code>进入开发者模式。</p><p>打开后，在<code>设置-系统</code>中会存在‘开发者选项’菜单，在其中操作调试配置：</p><p><img src="https://codestar.top/note-image/202502072253660.png" alt="image-20250206100500533"></p><h2 id="3、方法一：通过开发者设置启用无线调试"><a href="#3、方法一：通过开发者设置启用无线调试" class="headerlink" title="3、方法一：通过开发者设置启用无线调试"></a>3、方法一：通过开发者设置启用无线调试</h2><h3 id="3-1-启用无线调试"><a href="#3-1-启用无线调试" class="headerlink" title="3.1 启用无线调试"></a>3.1 启用无线调试</h3><p>在打开开发者模式后，进入到开发者选项，下拉至调试配置菜单，打开无线调试：</p><p><img src="https://codestar.top/note-image/202502072253627.png" alt="image-20250206100620811"></p><p><strong>注：</strong> 在启用前，需确保连接wifi网络，否则无法开启无线调试。</p><h3 id="3-2-查询无线调试IP地址"><a href="#3-2-查询无线调试IP地址" class="headerlink" title="3.2 查询无线调试IP地址"></a>3.2 查询无线调试IP地址</h3><p>开启后，进入到‘无线调试’页面：使用当前页面的IP和端口进行连接</p><p><img src="https://codestar.top/note-image/202502072254907.png" alt="image-20250206100830754"></p><h3 id="3-3-连接adb设备"><a href="#3-3-连接adb设备" class="headerlink" title="3.3 连接adb设备"></a>3.3 连接adb设备</h3><p>使用adb指令连接无线调试设备：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb connect IP:PORT<br></code></pre></td></tr></table></figure><p>示例如下：</p><p><img src="https://codestar.top/note-image/202502072254794.png" alt="image-20250206101120782"></p><p>连接成功后，设备会出现弹窗提示：</p><p><img src="https://codestar.top/note-image/202502072254380.png" alt="image-20250206101051913"></p><p>之后就可通过<code>adb devices</code>查询到对应的设备，正常的进行调试了：</p><p><img src="https://codestar.top/note-image/202502072254570.png" alt="image-20250206110653612"></p><p>无线adb与USB adb功能完全相同，区别在于设备IP改为了[IP:端口]的形式。</p><h2 id="4、方法二：通过USB启用无线adb调试"><a href="#4、方法二：通过USB启用无线adb调试" class="headerlink" title="4、方法二：通过USB启用无线adb调试"></a>4、方法二：通过USB启用无线adb调试</h2><p>首次连接，PC需使用USB连接到对应设备，USB连接的目的在于第一次连接会出现adb授权弹窗，需要提前允许，否则无线调试无法使用。确保此时<strong>开发者选项</strong>中<strong>USB调试</strong>已打开：</p><p><img src="https://codestar.top/note-image/202502072255257.png" alt="image-20250206105821151"></p><p>此方法适用于无wifi网络，通过android设备自带热点进行调试的场景。</p><h3 id="4-1-Android设备启用热点"><a href="#4-1-Android设备启用热点" class="headerlink" title="4.1 Android设备启用热点"></a>4.1 Android设备启用热点</h3><p>待连Android设备开启无线热点，之后检查对应WLAN网卡IP地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell ifconfig<br></code></pre></td></tr></table></figure><p>检查wlan2 IP地址：</p><p><img src="https://codestar.top/note-image/image-20230411200715363.png" alt="image-20230411200715363"></p><h3 id="4-2-TCP端口启用"><a href="#4-2-TCP端口启用" class="headerlink" title="4.2 TCP端口启用"></a>4.2 TCP端口启用</h3><p>待连Android设备，开启tcp连接，放开5555端口（可自定义1023-65535都可以用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">以5555端口开启TCP连接</span><br>adb tcpid 5555<br></code></pre></td></tr></table></figure><p>执行无报错即可：</p><p><img src="https://codestar.top/note-image/image-20230804111208300.png" alt="image-20230804111208300"></p><p>此时已经开启了无线调试，使用WLAN网络IP及端口进行连接。</p><h3 id="4-3-连接adb设备"><a href="#4-3-连接adb设备" class="headerlink" title="4.3 连接adb设备"></a>4.3 连接adb设备</h3><p><strong>PC连接Android设备热点，确保PC与待连设备在同一个局域网中</strong>。PC指定5555端口（4-2节配置的端口）连接设备：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb connect 192.168.46.1:5555<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230804111304500.png" alt="image-20230804111304500"></p><p>出现connected表示已连接adb设备。</p><h3 id="4-4-检查设备连接"><a href="#4-4-检查设备连接" class="headerlink" title="4.4 检查设备连接"></a>4.4 检查设备连接</h3><p>检查设备连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb devices -l<br></code></pre></td></tr></table></figure><p>已连接的设备展示如下：</p><p><img src="https://codestar.top/note-image/image-20231031002843478.png" alt="image-20231031002843478"></p><p>后续可以正常的执行所有支持的adb指令：</p><p><img src="https://codestar.top/note-image/image-20230804111451998.png" alt="image-20230804111451998"></p><h3 id="4-5-断开无线设备"><a href="#4-5-断开无线设备" class="headerlink" title="4.5 断开无线设备"></a>4.5 断开无线设备</h3><p>通过disconnect参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">断开指定的无线设备</span><br>adb disconnect 192.168.46.1:5555<br></code></pre></td></tr></table></figure><p>单独执行<code>adb disconnect</code>断开所有的设备。</p>]]></content>
    
    
    <categories>
      
      <category>Android技术</category>
      
      <category>Android调试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm下载源如何修改为其他源地址</title>
    <link href="/webtech/npm-source-change.html"/>
    <url>/webtech/npm-source-change.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、国内源地址清单"><a href="#1、国内源地址清单" class="headerlink" title="1、国内源地址清单"></a>1、国内源地址清单</h2><p>官方的源地址： <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></p><p>由于服务器在海外，国内访问速度会慢很多。下面是我搜集的一些npm国内的镜像源</p><table><thead><tr><th align="center">源名称</th><th align="center">npm源地址</th><th align="center">推荐指数</th></tr></thead><tbody><tr><td align="center">淘宝新镜像源</td><td align="center"><a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></td><td align="center">★★★★</td></tr><tr><td align="center">腾讯云镜像源</td><td align="center"><a href="http://mirrors.cloud.tencent.com/npm/">http://mirrors.cloud.tencent.com/npm/</a></td><td align="center">★★★</td></tr><tr><td align="center">华为云镜像源</td><td align="center"><a href="https://mirrors.huaweicloud.com/repository/npm/">https://mirrors.huaweicloud.com/repository/npm/</a></td><td align="center">★★★</td></tr><tr><td align="center">cnpm镜像地址</td><td align="center"><a href="http://registry.cnpmjs.org/">http://registry.cnpmjs.org</a></td><td align="center">★★</td></tr><tr><td align="center">淘宝旧源镜像</td><td align="center"><a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></td><td align="center">★</td></tr></tbody></table><p>其中淘宝旧镜像源在2022年5月31日废弃，不过至今（2023年10月29日）还是能正常使用，建议是使用新版镜像源。</p><h2 id="2、修改npm源"><a href="#2、修改npm源" class="headerlink" title="2、修改npm源"></a>2、修改npm源</h2><h3 id="2-1、临时修改"><a href="#2-1、临时修改" class="headerlink" title="2.1、临时修改"></a>2.1、临时修改</h3><p>如果只是在某一次使用源，可以临时修改，通过在install命令前加上<code>--registry 源地址</code>即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：使用淘宝npm源下载cnpm</span><br>npm --registry https://registry.npm.taobao.org install cnpm<br></code></pre></td></tr></table></figure><h3 id="2-2、永久修改"><a href="#2-2、永久修改" class="headerlink" title="2.2、永久修改"></a>2.2、永久修改</h3><h4 id="方法一：使用命令行修改"><a href="#方法一：使用命令行修改" class="headerlink" title="方法一：使用命令行修改"></a>方法一：使用命令行修改</h4><p>永久配置，直接使用指令修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>修改之后生效如下，查询npm配置的源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config get registry<br></code></pre></td></tr></table></figure><p>返回淘宝镜像源说明配置已经生效了：</p><p><img src="https://codestar.top/note-image/image-20231029161636529.png" alt="image-20231029161636529"></p><p>按照个人喜好配置相应的镜像源即可。</p><h4 id="方法二：直接修改配置文件"><a href="#方法二：直接修改配置文件" class="headerlink" title="方法二：直接修改配置文件"></a>方法二：直接修改配置文件</h4><p>在自己的电脑<code>C:\Users\username</code>上修改<code>.npmrc</code>文件，如没有则新建txt文件，把名称和后缀改成一样即可。</p><p>然后将其中的内容修改如下：[D:\Node.js]替换成自己的安装路径，registry改为镜像源地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">prefix=D:\Node.js\node_global<br>cache=D:\Node.js\node_cache<br>registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231029163854250.png" alt="image-20231029163854250"></p><h2 id="3、npm仓库管理工具"><a href="#3、npm仓库管理工具" class="headerlink" title="3、npm仓库管理工具"></a>3、npm仓库管理工具</h2><p>使用<code>nrm</code>来进行仓库管理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g nrm<br></code></pre></td></tr></table></figure><p>通过工具查看可配置的镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nrm ls<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231029162829130.png" alt="image-20231029162829130"></p><p>其他更多的使用方法，可以查看官方说明：<a href="https://github.com/Pana/nrm">https://github.com/Pana/nrm</a></p>]]></content>
    
    
    <categories>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux中的COREDUMP基础知识及配置方法</title>
    <link href="/linux/coredump-knowledge-and-config.html"/>
    <url>/linux/coredump-knowledge-and-config.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、coredump简介"><a href="#1、coredump简介" class="headerlink" title="1、coredump简介"></a>1、coredump简介</h2><p>​在系统的运行过程中，有许多时候会出现程序运行不正常的情况，进而产生崩溃现象，而为了方便记录和追溯问题的发生进程和或相关的线程信息，亦或是崩溃时间等，有了coredump这种文件。</p><ul><li><p>Linux中的dump文件为core文件，以core开头，类似如下：</p><p><img src="https://codestar.top/note-image/image-20230112112849208.png" alt="image-20230112112849208"></p></li><li><p>Windows中dump文件为dmp文件，类似如下：</p><p><img src="https://codestar.top/note-image/image-20230112112958003.png" alt="image-20230112112958003"></p></li></ul><h2 id="2、core生成限制"><a href="#2、core生成限制" class="headerlink" title="2、core生成限制"></a>2、core生成限制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查core生成大小限制</span><br>ulimit -c<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查文件大小限制</span><br>ulimit<br><span class="hljs-meta prompt_"># </span><span class="language-bash">限制大小不超过1024KB</span><br>ulimit -c 1024<br></code></pre></td></tr></table></figure><p>返回值含义：</p><ul><li>0—-禁止生成core文件</li><li>ulimited—-未限制core大小</li><li>数值—-限制大小不超过该设定值KB</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设定为无限制</span><br>ulimit -c unlimited<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230112105439700.png" alt="image-20230112105439700"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查所有的用户配置，各项返回值含义同上</span><br>ulimit -a<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230112113607292.png" alt="image-20230112113607292"></p><p>设定单一用户程序上限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设定单个用户程序上限为3：限制生成的dump数量</span><br>ulimit -u 3<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230112114526249.png" alt="image-20230112114526249"></p><p>设定之后，会将单个程序的core数量限制在设定值之内：</p><p><img src="https://codestar.top/note-image/image-20231024014749829.png" alt="image-20231024014749829"></p><h2 id="3、core相关配置"><a href="#3、core相关配置" class="headerlink" title="3、core相关配置"></a>3、core相关配置</h2><h3 id="3-1、配置文件"><a href="#3-1、配置文件" class="headerlink" title="3-1、配置文件"></a>3-1、配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置文件</span><br>/proc/sys/kernel/core_pattern<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询结果为执行core生成的程序路径，及生成格式</span><br>cat /proc/sys/kernel/core_pattern<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230112105615231.png" alt="image-20230112105615231"></p><p>程序段中记录着详细的core生成路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /bin/coredump-handler.sh<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231024014844990.png" alt="image-20231024014844990"></p><h3 id="3-2、配置文件格式"><a href="#3-2、配置文件格式" class="headerlink" title="3-2、配置文件格式"></a>3-2、配置文件格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">％p 转储过程的PID<br>％u （数字）转储进程的实际UID<br>％G （数字）转储过程的实际GID<br>％s 引起转储的信号数<br>％t 转储时间，表示为自1970年1月1日00:00:00 +0000（UTC）以来的秒数<br>％H 主机名（与uname（2）返回的节点名相同）<br>％e 可执行文件名（无路径前缀）<br>％E 可执行文件的路径名，用斜杠（’/’）替换为感叹号（’！’）。<br>％C 崩溃过程的核心文件大小软资源限制（自Linux 2.6.24开始）<br></code></pre></td></tr></table></figure><h2 id="4、core生成验证"><a href="#4、core生成验证" class="headerlink" title="4、core生成验证"></a>4、core生成验证</h2><p>使用kill指令或pkill指令来验证core生成逻辑：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">根据进程名来abort进程并生成core文件</span><br>pkill -6 proc_name<br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据PID来abort进程并生成core文件</span><br>ps -aux | grep proc_name<br>kill -6 [PID]<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231024014918951.png" alt="image-20231024014918951"></p><p><strong>拓展：</strong><code>kill -l</code>查看kill对应的信号量列表</p><p><img src="https://codestar.top/note-image/image-20230112142536039.png" alt="image-20230112142536039"></p><h2 id="5、core调试"><a href="#5、core调试" class="headerlink" title="5、core调试"></a>5、core调试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">gdb 程序名称 core名称</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：</span><br>gdb someip_manager core_someip_manager__6609_1672103695<br></code></pre></td></tr></table></figure><p>gdb面板输入<code>where</code>或者<code>bt</code>查找出错的那一行或函数，具体错误信息可以在<code>#0~#05</code>中查看：</p><p><img src="https://codestar.top/note-image/image-20230112142121648.png" alt="image-20230112142121648"></p><p><img src="https://codestar.top/note-image/image-20230112162822742.png" alt="image-20230112162822742"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>调试技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>COREDUMP</tag>
      
      <tag>调试技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下如何开启允许root用户远程登录</title>
    <link href="/linux/enable-root-ssh-login.html"/>
    <url>/linux/enable-root-ssh-login.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h2><p>在很多时候，远程登录使用的是用户身份登录，在系统路径下的文件无法通过用户角色直接下载。下载的话，需要将文件移动到当前用户有权限的路径下才能下载，比较麻烦。而另一种下载方法是以root用户的身份登录系统进行原路径下载，但多数SSH为了提高系统安全性，<strong>默认关闭了root远程登录的权限</strong>，需手动配置SSH，使其能够允许root远程登录，以Ubuntu系统为参考，具体操作如下。</p><h2 id="2、配置SSH"><a href="#2、配置SSH" class="headerlink" title="2、配置SSH"></a>2、配置SSH</h2><ul><li>查找配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">一般为这个路径：</span><br>/etc/ssh/sshd_config<br><span class="hljs-meta prompt_"># </span><span class="language-bash">无此路径的情况下直接查找配置文件</span><br>find / -name *sshd_config<br></code></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/ssh/sshd_config<br><span class="hljs-meta prompt_"># </span><span class="language-bash">键入i进入编辑模式，加入以下内容。wq保存</span><br>PermitRootLogin yes<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230530115045644.png" alt="image-20230530115045644"></p><h2 id="3、重启服务进程"><a href="#3、重启服务进程" class="headerlink" title="3、重启服务进程"></a>3、重启服务进程</h2><h3 id="3-1、SSH与SSHD进程的区别"><a href="#3-1、SSH与SSHD进程的区别" class="headerlink" title="3-1、SSH与SSHD进程的区别"></a>3-1、SSH与SSHD进程的区别</h3><p>SSH与SSHD主要区别在于主动或被动连接：</p><ul><li>SSH为<strong>客户端</strong>主动远程其他设备即服务端；</li><li>SSHD为<strong>服务端</strong>被动接收来其他设备的SSH请求。</li></ul><p>具体差异点总结如下：</p><table><thead><tr><th>类别</th><th align="left">SSH</th><th>SSHD</th></tr></thead><tbody><tr><td>定义</td><td align="left">SSH是Secure Shell的缩写，它是一种加密网络协议，用于远程登录和安全文件传输。</td><td>SSHD是SSH Daemon的缩写，是运行在服务器端的SSH软件守护进程。</td></tr><tr><td>作用</td><td align="left">用来进行远程连接、远程管理和传输文件等操作。</td><td>作为服务器端软件，接收来自客户端的连接请求，并为其提供安全的远程登录和文件传输功能。</td></tr><tr><td>运行位置</td><td align="left">运行在<strong>客户端</strong>上。</td><td>运行在<strong>服务端</strong>上。</td></tr><tr><td>端口号</td><td align="left">默认使用22端口。</td><td>默认使用22端口。</td></tr><tr><td>用户验证</td><td align="left">通过用户名和密码进行验证。</td><td>支持多种用户验证方式，包括用户名和密码、公钥认证、Kerberos身份验证等。</td></tr><tr><td>安全性</td><td align="left">基于公开密钥加密技术，采用对称加密和非对称加密相结合的方式保证数据传输的安全性。</td><td>通过数字证书和加密算法保障通信过程中数据的安全性和完整性。</td></tr><tr><td>使用范围</td><td align="left">适用于Linux、Unix、Mac OS等操作系统。</td><td>适用于Linux、Unix、Mac OS等操作系统。</td></tr></tbody></table><h3 id="3-2、重启SSHD生效配置"><a href="#3-2、重启SSHD生效配置" class="headerlink" title="3-2、重启SSHD生效配置"></a>3-2、重启SSHD生效配置</h3><p>以下指令重启SSHD服务，两条指令等价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart sshd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>service sshd restart<br></code></pre></td></tr></table></figure><p>执行上述指令会重启SSHD服务，也就是重启整个SSH<strong>服务器进程</strong>，同时也会<strong>重新加载配置文件</strong>。这个命令通常用于对SSH服务器进行设置和调试时，或者在修改SSH服务配置后使其生效。执行该命令不会影响其他正在运行的进程，只会重启SSH服务进程。</p><h2 id="4、root用户下载文件"><a href="#4、root用户下载文件" class="headerlink" title="4、root用户下载文件"></a>4、root用户下载文件</h2><h3 id="4-1、root用户远程登录"><a href="#4-1、root用户远程登录" class="headerlink" title="4-1、root用户远程登录"></a>4-1、root用户远程登录</h3><p>使用远程登录软件或平台填入root名称及Linux设备IP，这里我使用的是<strong>MobaXterm</strong>，之后会认证要求输入root密码，登入即可：</p><p><img src="https://codestar.top/note-image/image-20230530120223288.png" alt="image-20230530120223288"></p><p>登录成功如下，进入Linux服务器shell面板：</p><p><img src="https://codestar.top/note-image/image-20230530120301175.png" alt="image-20230530120301175"></p><h3 id="4-2、下载文件"><a href="#4-2、下载文件" class="headerlink" title="4-2、下载文件"></a>4-2、下载文件</h3><p>使用ftp下载工具：如FileZilla，xftp、MobaXterm（集成到软件内部），同样输入Linux端IP、用户名（root）、密码及端口（22）登录远程设备，进入需要下载的文件路径，拖动文件至本地路径下载即可：</p><p><img src="https://codestar.top/note-image/image-20230530120934802.png" alt="image-20230530120934802"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>SSH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSH远程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python安装报错之0x80072f7d错误解决方法</title>
    <link href="/python/python-install-error-0x80072f7d-solution.html"/>
    <url>/python/python-install-error-0x80072f7d-solution.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、问题现象"><a href="#一、问题现象" class="headerlink" title="一、问题现象"></a>一、问题现象</h2><p>安装过程中出现报错：0x80072f7d - 未指定的错误</p><p><img src="https://codestar.top/note-image/image-20231022234449760.png" alt="image-20231022234449760"></p><p>这个问题发生，导致后续无法配置Python环境，必须要解决掉它。</p><h2 id="二、问题原因"><a href="#二、问题原因" class="headerlink" title="二、问题原因"></a>二、问题原因</h2><p>为了弄清是什么原因导致出现这种致命性问题，去找了一下”度娘”，发现原因如下：</p><blockquote><p>在Python的安装过程中，会涉及到数据传输，其中会涉及到一个协议TLS，安全传输层协议，安装Python的过程中必须要TLS协议的支持，我本机没有开启TLS协议导致出错。目前TLS1.2是常见传输协议版本，不过有的网站还是TLS1.1。所以得同时开启两个协议，TLS1.1、TLS1.2，具体操作来看解决方法。</p></blockquote><h2 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h2><p>1、<kbd>win</kbd>+<kbd>r</kbd>打开运行界面，输入<code>control</code>，打开控制面板：</p><p>2、进入“网络和Internet”：</p><p><img src="https://codestar.top/note-image/image-20231022234509493.png" alt="image-20231022234509493"></p><p>2、点击“Internet选项”：</p><p><img src="https://codestar.top/note-image/image-20231022234640504.png" alt="image-20231022234640504"></p><p>3、“Internet属性”中进入“高级”，勾选“使用TLS1.1”、“使用TLS1.2”：</p><p><img src="https://codestar.top/note-image/image-20231022234803305.png" alt="image-20231022234803305"></p><p>点击应用，重新安装Python。</p><h2 id="四、重新安装Python"><a href="#四、重新安装Python" class="headerlink" title="四、重新安装Python"></a>四、重新安装Python</h2><p>重新安装，选择对应的安装路径和安装选项，一路下一步安装即可，中间安装各类包需要费些时间，等待安装成功即可：</p><p><img src="https://codestar.top/note-image/image-20231022234824356.png" alt="image-20231022234824356"></p><p>大功告成，安装成功~</p><p><img src="https://codestar.top/note-image/image-20231022234840585.png" alt="image-20231022234840585"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows中Java安装及环境变量配置</title>
    <link href="/windows/windows-install-java-environment-variables.html"/>
    <url>/windows/windows-install-java-environment-variables.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、下载jdk安装包"><a href="#1、下载jdk安装包" class="headerlink" title="1、下载jdk安装包"></a>1、下载jdk安装包</h2><p>通过以下镜像站下载jdk安装包：<a href="https://www.techspot.com/downloads/5553-java-jdk.html">https://www.techspot.com/downloads/5553-java-jdk.html</a></p><p>这里我选择的是Java11，选择对应的平台下载即可：</p><p><img src="https://codestar.top/note-image/image-20230820212852255.png" alt="image-20230820212852255"></p><p>在该页面下，还有Java其他的版本提供下载，需要的可以进入对应页面用同样的方式下载：</p><p><img src="https://codestar.top/note-image/image-20230820212953315.png" alt="image-20230820212953315"></p><h2 id="2、安装JDK"><a href="#2、安装JDK" class="headerlink" title="2、安装JDK"></a>2、安装JDK</h2><p>下载完成之后，双击安装包：</p><p><img src="https://codestar.top/note-image/image-20230820213208823.png" alt="image-20230820213208823"></p><p>根据安装向导，自定义安装路径，一路安装完成即可。安装完成了之后，还无法使用，需要配置环境变量才能在PC中各环境下使用。</p><h2 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h2><h3 id="3-1、环境变量配置页进入"><a href="#3-1、环境变量配置页进入" class="headerlink" title="3.1、环境变量配置页进入"></a>3.1、环境变量配置页进入</h3><p>环境变量需要配置的内容有三点，分别是JAVA_HOME、CLASSPATH、path。Windows中<kbd>win</kbd>+<kbd>r</kbd>打开运行面板，输入<code>sysdm.cpl</code>，进入<strong>系统属性</strong>页面：</p><p><img src="https://codestar.top/note-image/image-20230820213715533.png" alt="image-20230820213715533"></p><p>之后切到<strong>高级</strong>页签，点击<strong>环境变量</strong>进入环境变量配置页面，进入之后就开始配置具体的变量名了：</p><p><img src="https://codestar.top/note-image/image-20230820213825582.png" alt="image-20230820213825582"></p><h3 id="3-2、环境变量1：JAVA-HOME"><a href="#3-2、环境变量1：JAVA-HOME" class="headerlink" title="3.2、环境变量1：JAVA_HOME"></a>3.2、环境变量1：JAVA_HOME</h3><p>在系统变量中，<strong>新建</strong>环境变量，变量名给”JAVA_HOME”，变量值<strong>填入JAVA的安装根目录</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">根据实际情况填入</span><br>D:\JDK11<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230820214141226.png" alt="image-20230820214141226"></p><h3 id="3-3、环境变量2：CLASSPATH"><a href="#3-3、环境变量2：CLASSPATH" class="headerlink" title="3.3、环境变量2：CLASSPATH"></a>3.3、环境变量2：CLASSPATH</h3><p>这个环境变量配置的为<strong>JAVA所有依赖的包路径</strong>。</p><p>同样，在系统变量中<strong>新建</strong>环境变量，变量名给”CLASSPATH”，变量值填入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">注意，最前面有个.</span><br>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230820214359184.png" alt="image-20230820214359184"></p><p>%JAVA_HOME%意思为取<strong>名称为”JAVA_HOME”的环境变量</strong>的值，即写成这样也可以，两者等价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">.;D:\JDK11\lib\dt.jar;D:\JDK11\lib\tools.jar;<br></code></pre></td></tr></table></figure><p>推荐上面的写法，方便管理。</p><h3 id="3-4、环境变量3：Path"><a href="#3-4、环境变量3：Path" class="headerlink" title="3.4、环境变量3：Path"></a>3.4、环境变量3：Path</h3><p>这个环境变量配置的为<strong>Java中jdk和jre的可执行bin文件</strong>。</p><p>找到Path环境变量，新建两条，填入以下内容：Windows10中建议分开写，不然会出现无法识别。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">合并写法</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">分开写法</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">JAVA_HOME%\bin</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">JAVA_HOME%\jre\bin</span><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230820215621671.png" alt="image-20230820215621671"></p><h2 id="4、验证安装"><a href="#4、验证安装" class="headerlink" title="4、验证安装"></a>4、验证安装</h2><p>进入powershell面板，输入<code>java --version</code>验证配置，如果正常返回版本号，则环境配置成功：</p><p><img src="https://codestar.top/note-image/image-20230820215906035.png" alt="image-20230820215906035"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>环境变量</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Windows</tag>
      
      <tag>JAVA环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记本安装纯净Ubuntu 22.04 LTS系统全流程</title>
    <link href="/linux/install-ubuntu-22.04-lts.html"/>
    <url>/linux/install-ubuntu-22.04-lts.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、镜像下载"><a href="#1、镜像下载" class="headerlink" title="1、镜像下载"></a>1、镜像下载</h2><p>阿里云镜像站下载Ubuntu 22.04 LTS系统镜像：<a href="https://mirrors.aliyun.com/ubuntu-releases/22.04/">https://mirrors.aliyun.com/ubuntu-releases/22.04/</a></p><p><img src="https://codestar.top/note-image/image-20221103221343334.png" alt="image-20221103221343334"></p><h2 id="2、启动盘制作"><a href="#2、启动盘制作" class="headerlink" title="2、启动盘制作"></a>2、启动盘制作</h2><p><img src="https://codestar.top/note-image/image-20221031235342705.png" alt="image-20221031235342705"></p><p>打开后的镜像在这里：</p><p><img src="https://codestar.top/note-image/image-20221031235414003.png" alt="image-20221031235414003"></p><p>点击启动-写入硬盘映像，该步骤<strong>需要管理员</strong>权限：</p><p><img src="https://codestar.top/note-image/image-20221031235725870.png" alt="image-20221031235725870"></p><p>镜像文件会自动同步：</p><p>选择对应的磁盘驱动器和写入方式：注意别选错盘，该步骤会对选中盘先进行格式化。</p><p><img src="https://codestar.top/note-image/image-20221031235652288.png" alt="image-20221031235652288"></p><p>点击写入，开始制作。大约3-5分钟：</p><p><img src="https://codestar.top/note-image/image-20221101201949072.png" alt="image-20221101201949072"></p><p>刻录成功：</p><p><img src="https://codestar.top/note-image/image-20221101202254151.png" alt="image-20221101202254151"></p><h2 id="3、系统安装"><a href="#3、系统安装" class="headerlink" title="3、系统安装"></a>3、系统安装</h2><h3 id="3-1、BIOS设置"><a href="#3-1、BIOS设置" class="headerlink" title="3-1、BIOS设置"></a>3-1、BIOS设置</h3><ul><li>SATA工作方式确认</li></ul><p>笔记本开启按<strong>F2</strong>进入BIOS，确保为AHCI模式，之后保存配置重启。</p><p>&#x3D;&#x3D;注：&#x3D;&#x3D;不同品牌笔记本进入BIOS不太一样，本文以戴尔笔记本为例。</p><p><img src="https://codestar.top/note-image/image-20221103221825965.png" alt="image-20221103221825965"></p><ul><li>切换U盘启动</li></ul><p>重启按<strong>F12</strong>进入启动方式选择，在UEFI选项中选择USB设备，选中后回车，启动安装。</p><p><img src="https://codestar.top/note-image/image-20221103222031067.png" alt="image-20221103222031067"></p><h3 id="3-2、Ubuntu安装引导"><a href="#3-2、Ubuntu安装引导" class="headerlink" title="3-2、Ubuntu安装引导"></a>3-2、Ubuntu安装引导</h3><ul><li>安装界面</li></ul><p>选择***Try or Install Ubuntu**</p><p><img src="https://codestar.top/note-image/image-20221103222341452.png" alt="image-20221103222341452"></p><p>进入启动页面</p><p><img src="https://codestar.top/note-image/image-20221103222459925.png" alt="image-20221103222459925"></p><ul><li>安装引导</li></ul><p>语言下拉到列表最下方，选择<strong>中文(简体)</strong>，点击<strong>安装Ubuntu</strong></p><p><img src="https://codestar.top/note-image/image-20221103222550069.png" alt="image-20221103222550069"></p><ul><li>键盘布局</li></ul><p>两项均选择Chinese，点击继续</p><p><img src="https://codestar.top/note-image/image-20221103222703887.png" alt="image-20221103222703887"></p><ul><li>软件安装</li></ul><p>选中正常安装，想节省安装时间，可以取消勾选”<strong>安装Ubuntu时下载更新</strong>“，点击继续</p><p><img src="https://codestar.top/note-image/image-20221103222819398.png" alt="image-20221103222819398"></p><ul><li>安装类型</li></ul><p>如果想同Windows共存，选择第一项。此处我需要安装纯Ubuntu系统，选择第二项。点击继续</p><p><img src="https://codestar.top/note-image/image-20221103223137388.png" alt="image-20221103223137388"></p><p>**注：**如果需要ZFS文件系统，可以在高级特性中选择，添加。</p><p><img src="https://codestar.top/note-image/image-20221103223320624.png" alt="image-20221103223320624"></p><ul><li>选择安装盘</li></ul><p>选择需要清除并安装的系统盘，点击继续安装</p><p><img src="https://codestar.top/note-image/image-20221103223203877.png" alt="image-20221103223203877"></p><p>提示写入确定弹窗，会进行格式化，点击继续即可：</p><p><img src="https://codestar.top/note-image/image-20221103223420973.png" alt="image-20221103223420973"></p><ul><li>时区选择</li></ul><p>搜索选择，上海时区，点击继续</p><p><img src="https://codestar.top/note-image/image-20221103223420973.png" alt="image-20221103223420973"></p><ul><li>设置用户名</li></ul><p><img src="https://codestar.top/note-image/image-20221103223645533.png" alt="image-20221103223645533"></p><ul><li>进入安装过程</li></ul><p><img src="https://codestar.top/note-image/image-20221103223714202.png" alt="image-20221103223714202"></p><p><img src="https://codestar.top/note-image/image-20221103223721816.png" alt="image-20221103223721816"></p><ul><li>安装完成启动</li></ul><p>安装完成后需要移除U盘，再启动。</p><p><img src="https://codestar.top/note-image/image-20221103223747669.png" alt="image-20221103223747669"></p><p>启动完成，就大功告成啦：</p><p><img src="https://codestar.top/note-image/image-20221103223839534.png" alt="image-20221103223839534"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 22.04 LTS静态IP配置及源更新</title>
    <link href="/linux/static-ip-config-and-source-update.html"/>
    <url>/linux/static-ip-config-and-source-update.html</url>
    
    <content type="html"><![CDATA[<h2 id="1、网络模式确认"><a href="#1、网络模式确认" class="headerlink" title="1、网络模式确认"></a>1、网络模式确认</h2><p>**注：**以下操作均基于VMWARE虚拟环境，需要确认虚拟网络配置为NAT模式。</p><p>检查方式：编辑——&gt;虚拟网络编辑器，进入到以下页面。配置和记住当前设置的<strong>网关IP、子网掩码、IP段</strong></p><p><img src="https://codestar.top/note-image/image-20221007114038651.png" alt="image-20221007114038651"></p><h2 id="2、静态IP配置"><a href="#2、静态IP配置" class="headerlink" title="2、静态IP配置"></a>2、静态IP配置</h2><h3 id="2-1、切换管理员权限"><a href="#2-1、切换管理员权限" class="headerlink" title="2-1、切换管理员权限"></a>2-1、切换管理员权限</h3><p>开启虚拟机，进入到terminal，切换到管理员模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">执行后输入登录用户密码</span><br>sudo -i<br><span class="hljs-meta prompt_"># </span><span class="language-bash">初装系统root密码为随机密码，需要自行更改</span><br>passwd root<br><span class="hljs-meta prompt_"># </span><span class="language-bash">按照提示之后输入命令更改密码，提示successful为更新成功</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">之后登录执行以下指令直接进入管理员模式</span><br>su<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007144407345.png" alt="image-20221007144407345"></p><h3 id="2-2、修改网络配置"><a href="#2-2、修改网络配置" class="headerlink" title="2-2、修改网络配置"></a>2-2、修改网络配置</h3><p>Ubuntu自17.10版本以来，引入了Netplan网络配置工具，通过netplan进行管理，对应的配置文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新安装的系统建议使用vi或nano编辑器修改文件内容，不支持vim</span><br>vi /etc/netplan/01-network-manager-all.yaml<br>nano /etc/netplan/01-network-manager-all.yaml<br></code></pre></td></tr></table></figure><p>配置内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Let NetworkManager manage all devices on this system</span><br>network:<br>  ethernets:<br>    ens33:<br>      dhcp4: no<br>      dhcp6: no<br>      # 该项可选，不加也可行<br>      optional: true<br>      addresses:<br>      # 静态IP，需要在第一节配置的IP段内<br>       - 192.168.31.103/24<br>      routes:<br>       - to: default<br>       # 网关设置，需要和第一节检查的网关一致<br>         via: 192.168.31.2<br>      nameservers:<br>      # 网关配置格式还可采用该格式，多个地址采用英文逗号相隔<br>      # addresses: [114.114.114.114,8.8.8.8]<br>        addresses:<br>          - 114.114.114.114<br>          - 8.8.8.8<br>        search:<br>          - localhost<br>          - local<br>  version: 2<br>  renderer: NetworkManager<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007153350141.png" alt="image-20221007153350141"></p><h3 id="2-3、生效配置"><a href="#2-3、生效配置" class="headerlink" title="2-3、生效配置"></a>2-3、生效配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">测试配置；正常如下</span><br>sudo netplan try<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007154513775.png" alt="image-20221007154513775"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">应用配置：不报错即可</span><br>sudo netplan apply<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007151929466.png" alt="image-20221007151929466"></p><p>检查是否生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ip addr<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007151023164.png" alt="image-20221007151023164"></p><p>连通性检查：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007151121767.png" alt="image-20221007151121767"></p><h3 id="2-4、常用工具安装"><a href="#2-4、常用工具安装" class="headerlink" title="2-4、常用工具安装"></a>2-4、常用工具安装</h3><p>在系统使用过程中有一些工具为常用工具，建议安装，如vim、net-tools（对应ifconfig指令）、curl。该部分内容自行参考安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim编辑器，vi的升级版</span><br>apt install vim -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ifconfig、netstat命令工具</span><br>apt install net-tools -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">web服务器请求工具</span><br>apt install curl -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行以下指令一键安装</span><br>apt install vim -y;apt install net-tools -y;apt install curl -y<br></code></pre></td></tr></table></figure><h2 id="3、镜像源更新"><a href="#3、镜像源更新" class="headerlink" title="3、镜像源更新"></a>3、镜像源更新</h2><h3 id="3-1、可用源列表"><a href="#3-1、可用源列表" class="headerlink" title="3-1、可用源列表"></a>3-1、可用源列表</h3><p>**注：**不同系统版本设定的源不同，以下针对22.04版本。</p><h4 id="1）清华源"><a href="#1）清华源" class="headerlink" title="1）清华源"></a>1）清华源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span><br></code></pre></td></tr></table></figure><h4 id="2）阿里源"><a href="#2）阿里源" class="headerlink" title="2）阿里源"></a>2）阿里源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><h4 id="3）中科大源"><a href="#3）中科大源" class="headerlink" title="3）中科大源"></a>3）中科大源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse<br></code></pre></td></tr></table></figure><h4 id="4）网易源"><a href="#4）网易源" class="headerlink" title="4）网易源"></a>4）网易源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.163.com/ubuntu/ jammy main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ jammy-backports main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><h3 id="3-2、更新源"><a href="#3-2、更新源" class="headerlink" title="3-2、更新源"></a>3-2、更新源</h3><p>将原来的源文件进行备份：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /etc/apt/sources.list /etc/apt/sources.list.bak<br></code></pre></td></tr></table></figure><p>新建源文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">填入上一节的任意一项可用源，之后执行Esc : 输入wq保存退出</span><br>vi /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007150111288.png" alt="image-20221007150111288"></p><p>更新软件源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt update -y<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007145149148.png" alt="image-20221007145149148"></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>系统安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Linux系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下通过纯指令进行CPU压测</title>
    <link href="/linux/cpu-stress-test.html"/>
    <url>/linux/cpu-stress-test.html</url>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>拉起两个进程，执行文件拷贝，输出空文件。可压测到100%，持续执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in `seq 1 $(cat /proc/cpuinfo |grep &quot;physical id&quot; |wc -l)`; do dd if=/dev/zero of=/dev/null &amp; done<br></code></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>持续计算圆周率，bc命令。可压测到100</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">计算小数点后5000位</span><br>echo &quot;scale=5000; 4*a(1)&quot; | bc -l -q<br></code></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>编写一个循环，可压测到65%左右，持续执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">编写一个脚本文件，持续执行该循环，往空文件中写入1。实际不会生成新文件。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">filename=cputest.sh</span><br>while [ 1 ]<br>do<br>echo 1 &gt;&gt; /dev/null<br>done<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加执行权限</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或执行<span class="hljs-built_in">chmod</span> +x cputest.sh</span><br>chmod 777 cputest.sh<br></code></pre></td></tr></table></figure><h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><p>模拟用户不断地访问，并发进程，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">************常规执行*************</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不会占用过多资源</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">!/bin/bash</span><br>Njob=15    #任务总数<br>for ((i=0; i&lt;$Njob; i++)); do<br>&#123;<br>          echo  &quot;progress $i is sleeping for 3 seconds zzz…&quot;<br>          sleep  3<br>&#125;<br>done<br>echo -e &quot;time-consuming: $SECONDS    seconds&quot;    #显示脚本执行耗时<br><span class="hljs-meta prompt_"># </span><span class="language-bash">************并发执行*************</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">!/bin/bash</span><br>Njob=15<br>for ((i=0; i&lt;$Njob; i++)); do<br>          echo  &quot;progress $i is sleeping for 3 seconds zzz…&quot;<br>          sleep  3 &amp;       #循环内容放到后台执行<br>done<br>wait      #等待循环结束再执行wait后面的内容<br>echo -e &quot;time-consuming: $SECONDS    seconds&quot;    #显示脚本执行耗时<br></code></pre></td></tr></table></figure><h2 id="压测脚本"><a href="#压测脚本" class="headerlink" title="压测脚本"></a>压测脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">并发运行的最佳实践</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">总进程数</span><br>Sp=2500<br><span class="hljs-meta prompt_"># </span><span class="language-bash">并发数,并发数过大可能造成系统崩溃</span><br>Qp=250<br><span class="hljs-meta prompt_"># </span><span class="language-bash">存放进程的队列</span><br>Qarr=();<br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行进程数</span><br>run=0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将进程的添加到队列里的函数</span><br>function push() &#123;<br>Qarr=($&#123;Qarr[@]&#125; $1)<br>run=$&#123;#Qarr[@]&#125;<br>&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检测队列里的进程是否运行完毕</span><br>function check() &#123;<br>oldQ=($&#123;Qarr[@]&#125;)<br>Qarr=()<br>for p in &quot;$&#123;oldQ[@]&#125;&quot;;do<br>if [[ -d &quot;/proc/$p&quot; ]];then<br>Qarr=($&#123;Qarr[@]&#125; $p)<br>fi<br>done<br>run=$&#123;#Qarr[@]&#125;<br>&#125;<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">main</span><br>for((i=0; i&lt;$Sp; i++));do<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 500000`; <span class="hljs-keyword">do</span> curl -o /dev/null -s -w %&#123;http_code&#125;:%&#123;time_total&#125; http://www.baidu.com ;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-keyword">done</span></span><br>echo &quot;running $i &quot;<br>sleep 3 &amp;<br>push $!<br>while [[ $run -gt $Qp ]];do<br>check<br>sleep 0.1<br>done<br>done<br>echo -e &quot;time-consuming: $SECONDS seconds&quot; #显示脚本执行耗时<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>压力测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPU压力测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
