<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HEXO：子域名的配置及如何绑定到个人网站</title>
    <link href="/2024/01/21/HexoblogGuide/HEXO%EF%BC%9A%E5%AD%90%E5%9F%9F%E5%90%8D%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E5%88%B0%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <url>/2024/01/21/HexoblogGuide/HEXO%EF%BC%9A%E5%AD%90%E5%9F%9F%E5%90%8D%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E5%88%B0%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>当我们购买了顶级域名时，期望其不只是在www前缀使用，可以扩展到多个不同的子域名。子域名可以用来关联到不同的站点，同时根据子域名的名称，也能够明显的区分不同站点的类型和作用，那么配置子域名的方法可以参考下面的过程来执行。按照域名的结构来说[www].[domain].[com]，[www]为一级域名即子域名我们下面配置的修改点就在这，[domain]为二级域名也称为根域名，[com]为顶级域名。结构从左往右<strong>路由范围逐级递增</strong>，域名”&#x2F;“后接对应站点的资源。</p><h2 id="2、配置子域名"><a href="#2、配置子域名" class="headerlink" title="2、配置子域名"></a>2、配置子域名</h2><h3 id="2-1、域名由namesoli托管"><a href="#2-1、域名由namesoli托管" class="headerlink" title="2.1、域名由namesoli托管"></a>2.1、域名由namesoli托管</h3><p>因为我的域名服务商为namesoli，在这以此为例进行说明：</p><ul><li>进入<a href="https://www.namesilo.com/account_domains.php">个人域名管理(Domain manage)</a>，点击蓝球球：</li></ul><p><img src="https://codestar.top/note-image/202401211042149.png" alt="image-20240121104203077"></p><ul><li>进入”Manage DNS”，添加路由，类型为CNAME，添加或删除一级子域名：如添加为[info.domain.com]、[blog.domain.com]，后面配置的”TARGET HOSTNAME”为目标源地址</li></ul><p><img src="https://codestar.top/note-image/202401211354124.png" alt="image-20240121135411052"></p><h3 id="2-2、域名由CloudFlare托管"><a href="#2-2、域名由CloudFlare托管" class="headerlink" title="2.2、域名由CloudFlare托管"></a>2.2、域名由CloudFlare托管</h3><p>在使用CloudFlare对域名进行代理托管时，按照类似的步骤操作如下：</p><ul><li>进入域名管理：</li></ul><p><img src="https://codestar.top/note-image/202401211025649.png" alt="image-20240121102539592"></p><ul><li>配置路由规则（子域名），类型配置为CNAME，Content为源目标地址，同namesoli中的”TARGET HOSTNAME”：每添加一条，即可增加一个子域名，最大数量上限为50条。</li></ul><p><img src="https://codestar.top/note-image/202401210927072.png" alt="image-20240121092700008"></p><p><strong>注：</strong>这里的配置的”Name”不可重复，否则会添加失败。</p><p>其他域名服务提供上，均可按上述类似操作进行配置，均为配置DNS路由即可。</p><h2 id="3、子域名绑定"><a href="#3、子域名绑定" class="headerlink" title="3、子域名绑定"></a>3、子域名绑定</h2><p>这里以网站部署到github上为例：</p><ul><li>进入github “Setting”–“Pages”页面，在“Custome domain”处填写子域名再”Save”进行解析：</li></ul><p><img src="https://codestar.top/note-image/202401211029950.png" alt="image-20240121102909890"></p><p>待github部署完成之后就能够正常通过子域名访问网站了：</p><p><img src="https://codestar.top/note-image/202401211028326.png" alt="image-20240121102806285"></p><h2 id="4、配置子域名转发重定向"><a href="#4、配置子域名转发重定向" class="headerlink" title="4、配置子域名转发重定向"></a>4、配置子域名转发重定向</h2><ul><li><p>进入域名管理页面，点击单个顶级域名：</p></li><li><p>进入“Sub-Domain Forwarding”，管理子域名重定向：</p></li></ul><p><img src="https://codestar.top/note-image/202401210005890.png" alt="image-20240121000556854"></p><ul><li>添加重定向子域名：</li></ul><p><img src="https://codestar.top/note-image/202401210008867.png" alt="image-20240121000813813"></p><ul><li>配置子域名前缀：</li></ul><p><img src="https://codestar.top/note-image/202401210009623.png" alt="image-20240121000927567"></p><p>配置完成后，即可对指定的域名进行重定向。</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HEXO</tag>
      
      <tag>建站指南</tag>
      
      <tag>子域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python实现shell指令执行</title>
    <link href="/2024/01/16/Coding/Python/Python%E5%AE%9E%E7%8E%B0shell%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2024/01/16/Coding/Python/Python%E5%AE%9E%E7%8E%B0shell%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>实现在shell中执行指令，在Python中可以有两种方法实现，一种是通过Python内置的os库，另一种是通过subprocess库。在os库中，有popen()方法可以执行指令，而subprocess中有Popen()方法，两者名称一样，需要注意大小写。下面是具体的使用示例。</p><h2 id="2、os-popen方法"><a href="#2、os-popen方法" class="headerlink" title="2、os.popen方法"></a>2、os.popen方法</h2><h3 id="2-1、非阻塞命令执行"><a href="#2-1、非阻塞命令执行" class="headerlink" title="2.1、非阻塞命令执行"></a>2.1、非阻塞命令执行</h3><p>内置os库的popen方法，<strong>非阻塞</strong>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">print</span>(os.popen(<span class="hljs-string">&quot;adb devices&quot;</span>))<br></code></pre></td></tr></table></figure><p>正常执行，会返回执行结果的内存值，这里不会展示命令执行的结果：</p><p><img src="https://codestar.top/note-image/202401162219634.png" alt="image-20240116105825860"></p><p>如果只是想在代码中增加一个命令执行，可以使用这个方法，通过这种方式增加的命令执行为<strong>非阻塞的</strong>。缺点在于不会打印命令执行的结果。</p><p>验证阻塞：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># 此命令会一直执行</span><br><span class="hljs-built_in">print</span>(os.popen(<span class="hljs-string">&#x27;adb shell &quot;ping 127.0.0.1&quot;&#x27;</span>))<br><span class="hljs-comment"># 正常打印下面内容</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;阻塞验证&quot;</span>)<br></code></pre></td></tr></table></figure><p>Tips：在Python中实现多行输入，键入\即可换行继续输入。</p><h3 id="2-2、阻塞式命令执行"><a href="#2-2、阻塞式命令执行" class="headerlink" title="2.2、阻塞式命令执行"></a>2.2、阻塞式命令执行</h3><p>在上述方法中，os.popen()本质上是不阻塞的，那为了实现阻塞功能，可以增加一个<code>read()</code>或<code>readlines()</code>方法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://blog.51cto.com/u_2681882/2317053">[1]</span></a></sup>。当前命令未执行完毕不会进入下一步的代码执行，除非使用<kbd>Ctrl</kbd>+<kbd>C</kbd>关闭程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">print</span>(os.popen(<span class="hljs-string">&quot;adb devices&quot;</span>).read())<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/202401162220704.png" alt="image-20240116110623924"></p><p>执行过程，会读取内存值，并将其返回。这里会返回命令执行的结果，但其会阻塞下一步代码的执行。</p><p>验证阻塞：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">print</span>(os.popen(<span class="hljs-string">&#x27;adb shell &quot;ping 127.0.0.1&quot;&#x27;</span>).read())<br><span class="hljs-comment"># 不会打印下面内容</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;阻塞验证&quot;</span>)<br></code></pre></td></tr></table></figure><p>当我们指令的执行存在前后依赖关系，这时候可使用阻塞式执行方法了。</p><h2 id="3、subprocess-Popen方法"><a href="#3、subprocess-Popen方法" class="headerlink" title="3、subprocess.Popen方法"></a>3、subprocess.Popen方法</h2><h3 id="3-1、非阻塞命令执行"><a href="#3-1、非阻塞命令执行" class="headerlink" title="3.1、非阻塞命令执行"></a>3.1、非阻塞命令执行</h3><p>使用subprocess库中的Popen()方法，同样可以执行shell命令，其本质是新开一个线程，来异步执行命令，使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-comment"># print(subprocess.Popen(“xxx”))会打印执行指令内存地址</span><br>subprocess.Popen(<span class="hljs-string">&#x27;adb shell &quot;ping 127.0.0.1&quot;&#x27;</span>)<br>subprocess.Popen(<span class="hljs-string">&quot;adb devices&quot;</span>)<br></code></pre></td></tr></table></figure><p>上述示例，两个指令执行不会受顺序的影响，是非阻塞的关系：</p><p><img src="https://codestar.top/note-image/202401162220409.png" alt="image-20240116115511724"></p><h3 id="3-2、阻塞命令执行"><a href="#3-2、阻塞命令执行" class="headerlink" title="3.2、阻塞命令执行"></a>3.2、阻塞命令执行</h3><p>使用<code>wait()</code>或<code>communicate()</code>方法<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://blog.csdn.net/huakai_sun/article/details/79682172">[2]</span></a></sup>，使其阻塞下一条指令的执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br>sprocess1 = subprocess.Popen(<span class="hljs-string">&#x27;adb shell &quot;ping 127.0.0.1&quot;&#x27;</span>)<br><span class="hljs-comment"># sprocess1.communicate()</span><br>sprocess1.wait()<br>subprocess.Popen(<span class="hljs-string">&quot;adb devices&quot;</span>)<br></code></pre></td></tr></table></figure><p>两种类型执行结果如下，后面的<code>adb devices</code>指令不会继续执行：</p><p><img src="https://codestar.top/note-image/202401162220427.png" alt="image-20240116121452020"></p><p>如果想定时阻塞，可以使用<code>Popen.wait(timeout=0)</code>增加<code>timeout</code>超时时间，到达时间后会执行下一步指令。</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>上述的方法，可以方便我们在外部（PC）实现shell指令的一些自动化，其中的一些阻塞关系可以交叉使用，以适配进程之间的同步、异步等关系，无论是阻塞亦或是非阻塞，两者的选用需要根据实际场景中指令见的依赖关系来选择。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.51cto.com/u_2681882/2317053">https://blog.51cto.com/u_2681882/2317053</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/huakai_sun/article/details/79682172">https://blog.csdn.net/huakai_sun/article/details/79682172</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>cmd指令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows：通过指令进行用户管理</title>
    <link href="/2024/01/16/System/Windows/Windows%EF%BC%9A%E9%80%9A%E8%BF%87%E6%8C%87%E4%BB%A4%E8%BF%9B%E8%A1%8C%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <url>/2024/01/16/System/Windows/Windows%EF%BC%9A%E9%80%9A%E8%BF%87%E6%8C%87%E4%BB%A4%E8%BF%9B%E8%A1%8C%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>在很多场景下，通过Windows图形界面管理用户相对较为繁琐，因此可以通过使用cmd指令来简化管理步骤。以下所有操作可在管理员权限下使用。需要注意的是，在<strong>操作之前确保进行数据备份，或谨记修改内容</strong>，防止出现账户无法登录等异常。</p><h2 id="2、net-user指令介绍"><a href="#2、net-user指令介绍" class="headerlink" title="2、net user指令介绍"></a>2、net user指令介绍</h2><p>net user指令是Windows系统命令行中用于创建、修改和管理用户账户的命令。其指令格式如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user [username [password [options]]]<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><strong>username</strong>：用户帐户名</li><li><strong>password</strong>：用户帐户密码</li><li><strong>options</strong>：可选参数，用于指定用户帐户的属性</li></ul><p><strong>常用选项</strong></p><ul><li><strong>&#x2F;add</strong>：创建新用户帐户</li><li><strong>&#x2F;delete</strong>：删除用户帐户</li><li><strong>&#x2F;mod</strong>：修改用户帐户属性</li><li><strong>&#x2F;domain</strong>：指定用户帐户所在的域</li><li><strong>&#x2F;local</strong>：指定用户帐户为本地帐户</li></ul><h2 id="3、用户查询"><a href="#3、用户查询" class="headerlink" title="3、用户查询"></a>3、用户查询</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 查询当前所有权限用户<br><span class="hljs-built_in">net</span> user<br></code></pre></td></tr></table></figure><p>结果中，<strong>每一列为一个权限类型</strong>，列下<strong>每一行表示一个用户</strong>：如TF为Administrator账户</p><p><img src="https://codestar.top/note-image/202401162253359.png" alt="image-20240116152326904"></p><h2 id="4、用户创建"><a href="#4、用户创建" class="headerlink" title="4、用户创建"></a>4、用户创建</h2><p>创建账户Test1，并设置密码123456：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user Test1 <span class="hljs-number">123456</span> /add<br></code></pre></td></tr></table></figure><p>创建无密码账户Test2：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user Test2 /add<br></code></pre></td></tr></table></figure><h2 id="5、用户信息修改"><a href="#5、用户信息修改" class="headerlink" title="5、用户信息修改"></a>5、用户信息修改</h2><h3 id="5-1、修改用户名"><a href="#5-1、修改用户名" class="headerlink" title="5.1、修改用户名"></a>5.1、修改用户名</h3><p><code>net user</code>指令本身无法直接修改用户名，可以使用其他指令来实现：</p><p><strong>方法一：</strong><code>wmic</code>指令实现</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">wmic computersystem where name=&#x27;<span class="hljs-variable">%computername%</span>&#x27; <span class="hljs-keyword">call</span> <span class="hljs-built_in">rename</span>=&#x27;YOUR-NEW-NAME&#x27;<br></code></pre></td></tr></table></figure><p><strong>方法二：</strong>使用<code>Netplwiz</code>控制</p><p><code>Netplwiz</code>是Windows操作系统中的一个命令行工具，用于管理计算机上的用户账户。<kbd>Win</kbd>+<kbd>R</kbd>，打开运行窗口，输入<code>Netplwiz</code>：</p><p><img src="https://codestar.top/note-image/202401162254698.png" alt="image-20240116155154395"></p><p>进入控制台，修改特定账户的名称，修改完成之后“应用”即可：</p><p><img src="https://codestar.top/note-image/202401162254425.png" alt="image-20240116155336433"></p><p>通过<code>Netplwiz</code>命令行工具，还可以做其他的用户操作，如添加&#x2F;删除账户等，这里只说明账户名称修改的操作方法。</p><h3 id="5-2、修改用户密码"><a href="#5-2、修改用户密码" class="headerlink" title="5.2、修改用户密码"></a>5.2、修改用户密码</h3><h4 id="1）添加账户密码"><a href="#1）添加账户密码" class="headerlink" title="1）添加账户密码"></a>1）添加账户密码</h4><p>对无密码账户 Test2 设置密码“123456”：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user Test2 <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h4 id="2）修改账户密码"><a href="#2）修改账户密码" class="headerlink" title="2）修改账户密码"></a>2）修改账户密码</h4><p>对已设置密码的账户Test1，修改密码为“123”：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user Test1 <span class="hljs-number">123</span> /mod<br><span class="hljs-built_in">net</span> user Test1 <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h4 id="3）删除账户密码"><a href="#3）删除账户密码" class="headerlink" title="3）删除账户密码"></a>3）删除账户密码</h4><p>删除账户Test1的密码，回车之后生效：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user Test1 &quot;&quot;<br></code></pre></td></tr></table></figure><h3 id="5-3、修改账户状态"><a href="#5-3、修改账户状态" class="headerlink" title="5.3、修改账户状态"></a>5.3、修改账户状态</h3><p>修改账户（administrator）为启用状态：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user administrator /active:yes<br></code></pre></td></tr></table></figure><p>修改账户（administrator）为禁用状态：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user administrator /active:no<br></code></pre></td></tr></table></figure><p>上述指令，执行成功会提示禁用&#x2F;启用成功。</p><h2 id="6、用户删除"><a href="#6、用户删除" class="headerlink" title="6、用户删除"></a>6、用户删除</h2><p>将名为Test1的账户删除：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> user Test1 /delete<br></code></pre></td></tr></table></figure><h2 id="7、扩展操作"><a href="#7、扩展操作" class="headerlink" title="7、扩展操作"></a>7、扩展操作</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>&#x2F;expires</strong></td><td align="left">指定用户帐户的过期时间</td></tr><tr><td align="left"><strong>&#x2F;fullname</strong></td><td align="left">指定用户帐户的全名</td></tr><tr><td align="left"><strong>&#x2F;groups</strong></td><td align="left">指定用户帐户所属的组</td></tr><tr><td align="left"><strong>&#x2F;homedir</strong></td><td align="left">指定用户帐户的主目录</td></tr><tr><td align="left"><strong>&#x2F;passwordchg</strong></td><td align="left">指定用户帐户密码的过期时间</td></tr><tr><td align="left"><strong>&#x2F;passwordneverexpires</strong></td><td align="left">指定用户帐户的密码永不过期</td></tr><tr><td align="left"><strong>&#x2F;profilepath</strong></td><td align="left">指定用户帐户的配置文件路径</td></tr><tr><td align="left"><strong>&#x2F;scriptpath</strong></td><td align="left">指定用户帐户的登录脚本路径</td></tr><tr><td align="left"><strong>&#x2F;systemaccount</strong></td><td align="left">指定用户帐户为系统帐户</td></tr><tr><td align="left"><strong>&#x2F;userclass</strong></td><td align="left">指定用户帐户的用户类别</td></tr><tr><td align="left"><strong>&#x2F;workstations</strong></td><td align="left">指定用户帐户可以登录的计算机</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>用户管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO：首页Slogon调用API定期更新</title>
    <link href="/2024/01/09/HexoblogGuide/HEXO%EF%BC%9A%E9%A6%96%E9%A1%B5Slogon%E8%B0%83%E7%94%A8API%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/"/>
    <url>/2024/01/09/HexoblogGuide/HEXO%EF%BC%9A%E9%A6%96%E9%A1%B5Slogon%E8%B0%83%E7%94%A8API%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1、每日一言API"><a href="#1、每日一言API" class="headerlink" title="1、每日一言API"></a>1、每日一言API</h2><h3 id="1-1、API接口"><a href="#1-1、API接口" class="headerlink" title="1.1、API接口"></a>1.1、API接口</h3><p>想要调用API更新Slogon，首先得有免费可用的API，我这边使用的是hitokoto的每日一言接口，请求地址如下：<a href="https://v1.hitokoto.cn/">https://v1.hitokoto.cn/</a></p><p>使用<code>get</code>方式请求，无需传递参数，无使用限制。</p><p>对应官方网址：<a href="https://developer.hitokoto.cn/sentence/">https://developer.hitokoto.cn/sentence/</a></p><h3 id="1-2、测试接口"><a href="#1-2、测试接口" class="headerlink" title="1.2、测试接口"></a>1.2、测试接口</h3><p>我这里使用的是postman来进行调用API测试，检查接口是否可正常使用：</p><p><img src="https://codestar.top/note-image/202401090016953.png" alt="image-20240109001629872"></p><p>可以看到，能够正常返回正确的json数据，我们要取的是其中的”hitokoto”字段值，在后续的配置文件中会用到这个字段。</p><h2 id="2、站点配置"><a href="#2、站点配置" class="headerlink" title="2、站点配置"></a>2、站点配置</h2><p>在找到可以使用的API之后，我们需要将其配置到站点中，定期更新。修改站点配置文件<code>_config.yml</code>，其中有一段slogon配置：</p><p><img src="https://codestar.top/note-image/202401090019455.png" alt="image-20240109001947396"></p><p>将API的地址填入上面的url，将开关enable置为<code>true</code>即可，其中<code>keys</code>填入需要获取值的字段名称。请求方式这个接口使用GET类型，按需配置。</p><p><strong>注：</strong>这里有一个要求，需要将打字机的效果打开才能正常的生效API，将下面的配置改为true：</p><p><img src="https://codestar.top/note-image/202401080032091.png" alt="image-20240108003221050"></p><h2 id="3、部署到网站"><a href="#3、部署到网站" class="headerlink" title="3、部署到网站"></a>3、部署到网站</h2><p>配置完成之后，执行下面指令，重新生成网页：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>可以通过<code>http://localhost:4000/</code>检查是否生效，我配置完能够正常访问如下：</p><p><img src="https://codestar.top/note-image/202401090021637.png" alt="image-20240109002159286"></p><p>之后，将博客部署到服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HEXO</tag>
      
      <tag>建站指南</tag>
      
      <tag>首页优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode：vscode插件首次使用报错问题解决</title>
    <link href="/2024/01/08/Coding/leetcode/LeetCode%EF%BC%9Avscode%E6%8F%92%E4%BB%B6%E9%A6%96%E6%AC%A1%E4%BD%BF%E7%94%A8%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2024/01/08/Coding/leetcode/LeetCode%EF%BC%9Avscode%E6%8F%92%E4%BB%B6%E9%A6%96%E6%AC%A1%E4%BD%BF%E7%94%A8%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="1、错误现象"><a href="#1、错误现象" class="headerlink" title="1、错误现象"></a>1、错误现象</h2><p>无论是使用Leetcode官方插件，还是使用labuladong优化后的插件，首次使用时均会出现下面的报错：</p><p><img src="https://codestar.top/note-image/202401082344984.png" alt="image-20240108153854843"></p><p>根据提示，发现没有配置Node.js的环境：</p><ul><li>找到插件的配置文件，添加Node.js的执行文件的源路径（如果PC没有安装Node.js，参考第2节安装过程）：</li></ul><p><img src="https://codestar.top/note-image/202401082344759.png" alt="image-20240108155801217"></p><ul><li>之后重启vscode，插件初始化激活时会打印下面内容：</li></ul><p><img src="https://codestar.top/note-image/202401082344272.png" alt="image-20240108155931056"></p><h2 id="2、Node-js安装"><a href="#2、Node-js安装" class="headerlink" title="2、Node.js安装"></a>2、Node.js安装</h2><p>官网：<a href="https://nodejs.org/en/download">https://nodejs.org/en/download</a></p><p>下载选择最新的长期支持版本：</p><p><img src="https://codestar.top/note-image/202401082344517.png" alt="image-20240108154938555"></p><p>下载完成后，双击exe安装文件，根据向导一路安装即可（除了自定义安装路径，其他无需修改），<strong>安装完成之后会默认添加PATH环境变量</strong>。</p><h2 id="3、登录leetcode插件"><a href="#3、登录leetcode插件" class="headerlink" title="3、登录leetcode插件"></a>3、登录leetcode插件</h2><h3 id="3-1、Cookie获取"><a href="#3-1、Cookie获取" class="headerlink" title="3.1、Cookie获取"></a>3.1、Cookie获取</h3><p>浏览器中登录leetcode之后，F12进入开发者模式，在网络一块中查找POST这一类型的接口请求，如：<a href="https://leetcode.cn/graphql/">https://leetcode.cn/graphql/</a></p><p>在标头（header）位置将其中的cookie后值全部拷贝。</p><p><img src="https://codestar.top/note-image/202401082345545.png" alt="image-20240108162207427"></p><p><strong>注：</strong>使用原始格式更方便查看。</p><h3 id="3-2、登录leetcode"><a href="#3-2、登录leetcode" class="headerlink" title="3.2、登录leetcode"></a>3.2、登录leetcode</h3><p>进入插件，点击Sign in：</p><p><img src="https://codestar.top/note-image/202401082345251.png" alt="image-20240108160438644"></p><p>按照自己账号对应的平台选择，两个站点对应的账号非共享：</p><p><img src="https://codestar.top/note-image/202401082345601.png" alt="image-20240108160456017"></p><p>支持下面两种登录方式：</p><p><img src="https://codestar.top/note-image/202401082345238.png" alt="image-20240108160631444"></p><p>一般情况建议使用Cookie登录。</p><p>之后，获取到cookie，重新登录leetcode：先输入电话号码–》再填入cookie。登录成功之后正常获取到练题数据显示如下：</p><p><img src="https://codestar.top/note-image/202401082346142.png" alt="image-20240108162347421"></p><p>可以正常的刷题啦：</p><p><img src="https://codestar.top/note-image/202401082346977.png" alt="image-20240108200425908"></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>LeetCode</tag>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android fastboot驱动无法安装和识别问题</title>
    <link href="/2023/12/07/System/Android/Android-fastboot%E9%A9%B1%E5%8A%A8%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%E5%92%8C%E8%AF%86%E5%88%AB%E9%97%AE%E9%A2%98/"/>
    <url>/2023/12/07/System/Android/Android-fastboot%E9%A9%B1%E5%8A%A8%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%E5%92%8C%E8%AF%86%E5%88%AB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="1、问题现象及原因"><a href="#1、问题现象及原因" class="headerlink" title="1、问题现象及原因"></a>1、问题现象及原因</h2><p>Android fastboot模式下出现在其他设备中：</p><p><img src="https://codestar.top/note-image/image-20231108102720963.png" alt="image-20231108102720963"></p><p>指令也不生效：</p><p><img src="https://codestar.top/note-image/image-20231108102800265.png" alt="image-20231108102800265"></p><p>典型的驱动问题，在此之前已经安装了驱动。出现这个现象，很可能是驱动异常或者不兼容当前的fastboot设备。</p><h2 id="2、Google官网下载驱动包"><a href="#2、Google官网下载驱动包" class="headerlink" title="2、Google官网下载驱动包"></a>2、Google官网下载驱动包</h2><p>进入官方下载页面：<a href="https://developer.android.com/studio/run/win-usb?hl=zh-cn">https://developer.android.com/studio/run/win-usb?hl=zh-cn</a></p><p><img src="https://codestar.top/note-image/image-20231108102942717.png" alt="image-20231108102942717"></p><p>下载下来会是一个压缩包：usb_driver_r13-windows.zip，解压文件后使用。</p><h2 id="3、手动安装fastboot驱动"><a href="#3、手动安装fastboot驱动" class="headerlink" title="3、手动安装fastboot驱动"></a>3、手动安装fastboot驱动</h2><p>直接选择本地路径，进入下一页安装会出现下面的无法安装的情况：</p><p><img src="https://codestar.top/note-image/image-20231108103240406.png" alt="image-20231108103240406"></p><p><img src="https://codestar.top/note-image/image-20231108103222742.png" alt="image-20231108103222742"></p><p>需要手动，在PC本地选取到驱动路径来进行安装：</p><p>直接点击下面的选项，不要点击下一页：</p><p><img src="https://codestar.top/note-image/image-20231108103329623.png" alt="image-20231108103329623"></p><p>双击“显示所有设备”，或选中点击下一页：</p><p><img src="https://codestar.top/note-image/image-20231108103435463.png" alt="image-20231108103435463"></p><p>选择第一个，从磁盘安装：</p><p><img src="https://codestar.top/note-image/image-20231108105025315.png" alt="image-20231108105025315"></p><p>选择本地路径：</p><p><img src="https://codestar.top/note-image/image-20231108105109152.png" alt="image-20231108105109152"></p><p>之后就能成功的看到下面的驱动程序了，下一页安装：</p><p><img src="https://codestar.top/note-image/image-20231108105434813.png" alt="image-20231108105434813"></p><p>会出现一个安装告警弹窗，选择“是”直接安装，之后会开始安装驱动，逐个页面点击安装就行：</p><p><img src="https://codestar.top/note-image/image-20231108110036086.png" alt="image-20231108110036086"></p><p><strong>注：</strong>安装的过程可能会涉及到签名校验无法安装，关闭Windows的三方签名校验即可，参考<strong>4、关闭强制签名校验</strong>一节。</p><p>安装完成：</p><p><img src="https://codestar.top/note-image/image-20231108110147911.png" alt="image-20231108110147911"></p><p>之后就能正常的接入fastboot设备使用了：</p><p><img src="https://codestar.top/note-image/image-20231108110349965.png" alt="image-20231108110349965"></p><p><img src="https://codestar.top/note-image/image-20231108110444773.png" alt="image-20231108110444773"></p><h2 id="4、关闭强制签名校验"><a href="#4、关闭强制签名校验" class="headerlink" title="4、关闭强制签名校验"></a>4、关闭强制签名校验</h2><h3 id="4-1、Windows10配置"><a href="#4-1、Windows10配置" class="headerlink" title="4.1、Windows10配置"></a>4.1、Windows10配置</h3><p>使用<kbd>win</kbd>+<kbd>U</kbd>，打开设置页面，进入“主页”–&gt;“更新和安全”–&gt;“恢复”–&gt;“高级启动”–&gt;“立即重新启动”：</p><p><img src="https://codestar.top/note-image/image-20231207000134224.png" alt="image-20231207000134224"></p><p>之后按下面配置，“疑难解答”—&gt;“高级选项”–&gt;“启动设置”–&gt;“重启”，输入7或者F7禁用强制签名校验：</p><p><img src="https://codestar.top/note-image/image-20231207001231881.png" alt="image-20231207001231881"></p><p><img src="https://codestar.top/note-image/image-20231207001512625.png" alt="image-20231207001512625"></p><p>重启之后，重新安装驱动文件即可，会弹出信任第三方驱动的警告，同意即可。</p><h3 id="4-2、Windows11配置"><a href="#4-2、Windows11配置" class="headerlink" title="4.2、Windows11配置"></a>4.2、Windows11配置</h3><p>使用<kbd>win</kbd>+<kbd>U</kbd>，打开设置页面，进入“系统”–&gt;“恢复”–&gt;“高级启动”–&gt;“立即重新启动”：</p><p><img src="https://codestar.top/note-image/image-20231206235959721.png" alt="image-20231206235959721"></p><p>后续启动配置同上。</p><h3 id="4-3、永久禁用强制签名校验"><a href="#4-3、永久禁用强制签名校验" class="headerlink" title="4.3、永久禁用强制签名校验"></a>4.3、永久禁用强制签名校验</h3><p>之前的两种方法只是临时关闭签名校验，当设备重新开关机之后，又会重新恢复校验签名。为了方便后续更改驱动，可以使用下面的方法来永久禁用签名：</p><ul><li><kbd>win</kbd>+<kbd>X</kbd>打开启动菜单栏，选择“命令提示符（管理员）”，输入下列指令以关闭签名校验：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">bcdedit /<span class="hljs-built_in">set</span> nointegritychecks on<br></code></pre></td></tr></table></figure><ul><li>重新开启签名校验，输入下列指令：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">bcdedit /<span class="hljs-built_in">set</span> nointegritychecks off<br></code></pre></td></tr></table></figure><p><strong>注：</strong>如果未生效，需要在BIOS中关闭Secure Boot。</p>]]></content>
    
    
    <categories>
      
      <category>Android技术</category>
      
      <category>FASTBOOT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>FASTBOOT</tag>
      
      <tag>驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 11安装hexo后，hexo指令无法识别问题</title>
    <link href="/2023/12/02/System/Windows/Windows-11%E5%AE%89%E8%A3%85hexo%E5%90%8E%EF%BC%8Chexo%E6%8C%87%E4%BB%A4%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E9%97%AE%E9%A2%98/"/>
    <url>/2023/12/02/System/Windows/Windows-11%E5%AE%89%E8%A3%85hexo%E5%90%8E%EF%BC%8Chexo%E6%8C%87%E4%BB%A4%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="1、现象"><a href="#1、现象" class="headerlink" title="1、现象"></a>1、现象</h2><p>无论是在Windows terminal中，还是在cmd，以及Node.js prompt中，在<strong>已经安装完成hexo或hexo-cli的情况下，无法识别到hexo指令</strong>，类似如下：</p><p><img src="https://codestar.top/note-image/image-20231009003053103.png" alt="image-20231009003053103"></p><p><img src="https://codestar.top/note-image/image-20231009003245022.png" alt="image-20231009003245022"></p><p>尝试在命令路径下执行，依旧不行。</p><p>查找本地的npm安装路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm root -g<br></code></pre></td></tr></table></figure><p><code>D:\Node.js\node_global\node_modules</code>将其添加到环境变量，发现依旧无效，查询方法</p><h2 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h2><p>上网查阅资料，处理方法为，将下面的路径加入到环境变量path中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">your-user-name 是你自己的电脑用户名</span><br>C:\\Users\\your-user-name\\AppData\\Roaming\\npm<br></code></pre></td></tr></table></figure><p><strong>但是！！！</strong>很奇怪的是，我的APPDATA下没有npm这个路径：</p><p><img src="https://codestar.top/note-image/image-20231009232454879.png" alt="image-20231009232454879"></p><p>在另外一台Windows10上安装就没有出现这种问题，在Windows 11上就有这种奇怪的现象！</p><p><strong>思考：</strong>到底是什么原因导致的，我在Windows terminal中，还是在cmd，以及Node.js prompt中，甚至是进入到<code>D:\Node.js\node_global\node_modules</code>相应的安装路径下执行，都还是找不到hexo这个命令，我重装hexo都不生效。</p><p>而修改环境变量更加不可行，本身我的node.js已经记录在环境变量的path下，原则上来说应该不影响才对。到底是什么原因？继续查找答案。</p><p><img src="https://codestar.top/note-image/image-20231009232908162.png" alt="image-20231009232908162"></p><h2 id="3、另辟蹊径之重装Node-js"><a href="#3、另辟蹊径之重装Node-js" class="headerlink" title="3、另辟蹊径之重装Node.js"></a>3、另辟蹊径之重装Node.js</h2><p>尝试重装Node.js</p><p><img src="https://codestar.top/note-image/image-20231009221659111.png" alt="image-20231009221659111"></p><p>安装额外的工具，安装完成之后，重新执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>依旧无法识别到hexo指令。。</p><p>之后又尝试重启电脑，然而，也并不管用。</p><p>检查本地是否已经安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm list -g<br></code></pre></td></tr></table></figure><p>很明显，我是已经安装的，但就是无法执行。。。</p><p><img src="https://codestar.top/note-image/image-20231010001701220.png" alt="image-20231010001701220"></p><h2 id="4、问题解决方法的探索"><a href="#4、问题解决方法的探索" class="headerlink" title="4、问题解决方法的探索"></a>4、问题解决方法的探索</h2><p>前面几种思路，查阅到的网上的处理方法也不管用，去官网看一下文档，尝试能否找到答案。</p><p>通过查阅<a href="https://hexo.io/docs/">hexo官方文档</a>，找到一种替代的方法可以执行hexo指令：</p><p><img src="https://codestar.top/note-image/image-20231009233558162.png" alt="image-20231009233558162"></p><p>使用npx来间接性的调用hexo指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx hexo &lt;command&gt;<br></code></pre></td></tr></table></figure><p>这个是可行的：</p><p><img src="https://codestar.top/note-image/image-20231009233633976.png" alt="image-20231009233633976"></p><p>基本的指令都是可以执行的：</p><p><img src="https://codestar.top/note-image/image-20231009234944537.png" alt="image-20231009234944537"></p><p>但是这种使用方式是在不配置环境变量的情况下才用，在实际的使用过程中会很不方便。</p><p>那接下来如何将我的PC本地的环境配置上hexo的bin路径？我继续查找方法。</p><p>我的PC使用<code>npx hexo</code>能够正常的执行，那么PC上肯定有可执行的同名文件，利用everything一搜索，果然找到了如下的文件，没错就是这个hexo.cmd文件：</p><p><img src="https://codestar.top/note-image/image-20231010001928018.png" alt="image-20231010001928018"></p><p>进入到这个路径下，检查文件，文件夹结构和我们的<code>C:\\Users\\your-user-name\\AppData\\Roaming\\npm</code>目录是一样的，全局安装路径。</p><p><img src="https://codestar.top/note-image/image-20231010001547905.png" alt="image-20231010001547905"></p><p>知道了之后，再将这个路径添加到系统path环境变量中试一试：</p><p><kbd>win</kbd>+<kbd>R</kbd>打开运行窗口，输入<code>sysdm.cpl</code>，高级</p><p><img src="https://codestar.top/note-image/image-20231010002214974.png" alt="image-20231010002214974"></p><p><img src="https://codestar.top/note-image/image-20231010002250920.png" alt="image-20231010002250920"></p><p>找到系统变量Path，编辑内容，<strong>新建</strong>一列，将这个路径拷贝进去：</p><p><img src="https://codestar.top/note-image/image-20231010002402709.png" alt="image-20231010002402709"></p><p>之后点击确定，关闭之前的运行窗口，重新打开，再尝试执行&#96;&#96;hexo&#96;指令，就大功告成了：</p><p><img src="https://codestar.top/note-image/image-20231010002546570.png" alt="image-20231010002546570"></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HEXO</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode调整窗口缩放级别来调整侧边栏大小</title>
    <link href="/2023/12/02/Coding/IDE/VSCODE/vscode%E8%B0%83%E6%95%B4%E7%AA%97%E5%8F%A3%E7%BC%A9%E6%94%BE%E7%BA%A7%E5%88%AB%E6%9D%A5%E8%B0%83%E6%95%B4%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%A7%E5%B0%8F/"/>
    <url>/2023/12/02/Coding/IDE/VSCODE/vscode%E8%B0%83%E6%95%B4%E7%AA%97%E5%8F%A3%E7%BC%A9%E6%94%BE%E7%BA%A7%E5%88%AB%E6%9D%A5%E8%B0%83%E6%95%B4%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A4%A7%E5%B0%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1、解决思路"><a href="#1、解决思路" class="headerlink" title="1、解决思路"></a>1、解决思路</h2><p>想要调整侧边栏，可以通过调整页面的缩放级别来实现。</p><h2 id="2、vscode配置"><a href="#2、vscode配置" class="headerlink" title="2、vscode配置"></a>2、vscode配置</h2><p><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>p</kbd>打开选项栏，选择”首选项：打开用户设置”：</p><p><img src="https://codestar.top/note-image/image-20231202112048982.png" alt="image-20231202112048982"></p><p>进入设置页面后，搜索<code>window.zoomlevel</code>：</p><p><img src="https://codestar.top/note-image/image-20231202111921382.png" alt="image-20231202111921382"></p><p>放大窗口，设置值大于1即可，缩小窗口即设置为0-1之间的值即可。</p><p>设置完后，整体页面大小会进行变化。</p>]]></content>
    
    
    <categories>
      
      <category>IDE</category>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>IDE</tag>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO：github+hexo搭建个人博客流程</title>
    <link href="/2023/12/02/HexoblogGuide/HEXO%EF%BC%9Agithub+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/12/02/HexoblogGuide/HEXO%EF%BC%9Agithub+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="HEXO-github-hexo搭建个人博客流程"><a href="#HEXO-github-hexo搭建个人博客流程" class="headerlink" title="HEXO : github+hexo搭建个人博客流程"></a>HEXO : github+hexo搭建个人博客流程</h1><h2 id="1、github建库"><a href="#1、github建库" class="headerlink" title="1、github建库"></a>1、github建库</h2><h3 id="1-1、准备github账号"><a href="#1-1、准备github账号" class="headerlink" title="1.1、准备github账号"></a>1.1、准备github账号</h3><p>进入<a href="https://github.com/">GitHub官网</a>，点击右上角<code>Sign up</code>注册账户：</p><p><img src="https://codestar.top/note-image/image-20231202160043674.png" alt="image-20231202160043674"></p><p>填入邮箱，继续：</p><p><img src="https://codestar.top/note-image/image-20231202160203092.png" alt="image-20231202160203092"></p><p>自定义登录密码：</p><p><img src="https://codestar.top/note-image/image-20231202160257867.png" alt="image-20231202160257867"></p><p>之后填写用户名，当出现xxx is available时用户名可用：</p><p><img src="https://codestar.top/note-image/image-20231202160538160.png" alt="image-20231202160538160"></p><p>之后出现订阅栏，可选非必填：</p><p><img src="https://codestar.top/note-image/image-20231202160657226.png" alt="image-20231202160657226"></p><p>之后验证一下账户：</p><p><img src="https://codestar.top/note-image/image-20231202160755159.png" alt="image-20231202160755159"></p><p>完成验证之后，就可以开始创建账户了：</p><p><img src="https://codestar.top/note-image/image-20231202160933793.png" alt="image-20231202160933793"></p><p>之后会验证一下邮箱，填写接收到的验证码，即可成功创建账户。</p><h3 id="1-2、创建xxx-github-io库"><a href="#1-2、创建xxx-github-io库" class="headerlink" title="1.2、创建xxx.github.io库"></a>1.2、创建xxx.github.io库</h3><p>进入个人主页，点击页面右上角“+”，选择 New repository创建仓库：</p><p><img src="https://codestar.top/note-image/image-20231008201212195.png" alt="image-20231008201212195"></p><p>创建github代码仓库。注意，库名一定要为xxx.github.io做结尾，xxx部分可自定义：</p><p><img src="https://codestar.top/note-image/image-20231008200106092.png" alt="image-20231008200106092"></p><p>创建仓库文件：</p><p><img src="https://codestar.top/note-image/image-20231008200326697.png" alt="image-20231008200326697"></p><p>新建文件一定要为index.html文件，且只能有1个html文件：</p><p>加入任意html内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>yaorongke<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>演示页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>codestar！！！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231008202347446.png" alt="image-20231008202347446"></p><p><img src="https://codestar.top/note-image/image-20231008202533883.png" alt="image-20231008202533883"></p><h3 id="1-3、开启github-pages"><a href="#1-3、开启github-pages" class="headerlink" title="1.3、开启github pages"></a>1.3、开启github pages</h3><p>新建好了仓库之后，进入<code>setting</code>开启<code>github pages</code>功能：</p><p><img src="https://codestar.top/note-image/image-20231008203331362.png" alt="image-20231008203331362"></p><p>进入<code>Pages</code>页面：</p><p>在Branch选择main分支，点击save，之后再点击GitHub Pages：</p><p><img src="https://codestar.top/note-image/image-20231008205155447.png" alt="image-20231008205155447"></p><p>完成上面的步骤后，进入新的页面，选择<code>Project site</code>以及<code>Start from scratch</code>再下拉到页面底部，点击done即可：</p><p><img src="https://codestar.top/note-image/image-20231008204951174.png" alt="image-20231008204951174"></p><p><img src="https://codestar.top/note-image/image-20231008203522967.png" alt="image-20231008203522967"></p><p>之后再返回到自己的仓库，查看Pages页面，会查看到对应的网页地址已经启用：</p><p>**&#x3D;&#x3D;注：&#x3D;&#x3D;**由于我这边有两个仓库开放Github Pages，地址会叠加，可忽略。Github Pages功能为统一开启和统一关闭，无法单独为某个仓库开放。</p><p><img src="https://codestar.top/note-image/image-20231008210035443.png" alt="image-20231008210035443"></p><p>然后进入到对应的地址，就可以正常访问了：</p><p><img src="https://codestar.top/note-image/image-20231008210524431.png" alt="image-20231008210524431"></p><h2 id="2、安装Node-js"><a href="#2、安装Node-js" class="headerlink" title="2、安装Node.js"></a>2、安装Node.js</h2><p>进入<a href="https://nodejs.org/zh-tw/download">Node.js官网</a>，下载LTS版本，选择对应的平台下载即可：</p><p><img src="https://codestar.top/note-image/image-20231008211513177.png" alt="image-20231008211513177"></p><p>双击安装程序，选择完安装路径后，根据引导面板一路安装即可：</p><p><img src="https://codestar.top/note-image/image-20231008211831706.png" alt="image-20231008211831706"></p><p>在必要工具安装选框这，勾选上：</p><p><img src="https://codestar.top/note-image/image-20231008212119136.png" alt="image-20231008212119136"></p><p>安装后会新增以下工具：</p><p><img src="https://codestar.top/note-image/image-20231008213430610.png" alt="image-20231008213430610"></p><p>修改npm镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局修改为淘宝镜像源</span><br>npm config set registry https://registry.npm.taobao.org <br>npm config list -l             # 查看所有配置项<br>npm config get [&lt;key&gt;]         # 查看某一项的配置信息<br>npm config set &lt;key&gt; &lt;value&gt;   # 设置某一项的配置信息<br></code></pre></td></tr></table></figure><p>进入<code>Node.js command prompt</code>，检查npm版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm --version<br></code></pre></td></tr></table></figure><p>正常会返回对应的版本号。</p><h2 id="3、安装HEXO工具"><a href="#3、安装HEXO工具" class="headerlink" title="3、安装HEXO工具"></a>3、安装HEXO工具</h2><p>HEXO为基于Node.js的静态网页生成工具，用来搭建个人博客很适合。在安装完了Node.js之后，接下来就是安装HEXO工具了，使用npm指令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在Node.js <span class="hljs-built_in">command</span> prompt中输入</span><br>npm install -g hexo-cli<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者使用下面的指令安装</span><br>npm install hexo -g<br><span class="hljs-meta prompt_"># </span><span class="language-bash">升级</span><br>npm update hexo -g <br></code></pre></td></tr></table></figure><p>正常返回：</p><p><img src="https://codestar.top/note-image/image-20231008214129313.png" alt="image-20231008214129313"></p><p>检查hexo版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo -v<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231008214229734.png" alt="image-20231008214229734"></p><p>新建1个空目录，在shell面板cd到对应路径下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化：需要管理员权限</span><br>hexo init hexo_blog<br></code></pre></td></tr></table></figure><p>初始化完成后会生成以下文件：</p><p><img src="https://codestar.top/note-image/image-20231008215117731.png" alt="image-20231008215117731"></p><p><img src="https://codestar.top/note-image/image-20231008215446588.png" alt="image-20231008215446588"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd hexo_blog<br>npm install<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231008215556478.png" alt="image-20231008215556478"></p><p>本地启动博客：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo server<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231008215758391.png" alt="image-20231008215758391"></p><p>看到这个页面就大功告成了：</p><p><img src="https://codestar.top/note-image/image-20231008215954507.png" alt="image-20231008215954507"></p><h2 id="4、hexo与github仓库关联"><a href="#4、hexo与github仓库关联" class="headerlink" title="4、hexo与github仓库关联"></a>4、hexo与github仓库关联</h2><h3 id="4-1、Git配置"><a href="#4-1、Git配置" class="headerlink" title="4.1、Git配置"></a>4.1、Git配置</h3><p>在博客路径下，右键选择<code>Open Git Bash Here</code>：</p><p><img src="https://codestar.top/note-image/image-20231010204957690.png" alt="image-20231010204957690"></p><p>配置github账号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;minixiaoxin&quot;<br>git config --global user.email &quot;1799258962@qq.com&quot;<br></code></pre></td></tr></table></figure><p>配置完成之后，可以通过<code>git config --list</code>查看配置的内容：</p><p><img src="https://codestar.top/note-image/image-20231010205430422.png" alt="image-20231010205430422"></p><p>生成密钥SSH Key：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;1799258962@qq.com&quot;<br></code></pre></td></tr></table></figure><p>生成的过程中一路<code>enter</code>敲过去就行。</p><p>查看刚才生成的Key，后面需要将它放入github中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>在Github中，点击个人头像，进入<code>setting</code>–》<code>SSH and GPG keys</code>，添加新的ssh key。将刚才查看的key内容复制到下面的key栏中：</p><p><img src="https://codestar.top/note-image/image-20231010205924150.png" alt="image-20231010205924150"></p><p>之后保存即可：</p><p><img src="https://codestar.top/note-image/image-20231010210410735.png" alt="image-20231010210410735"></p><p>在bash面板中输入下面的指令验证key 连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>出现<code>successful authenticated</code>说明连接成功：</p><p><img src="https://codestar.top/note-image/image-20231010210540262.png" alt="image-20231010210540262"></p><h3 id="4-2、修改博客站点配置"><a href="#4-2、修改博客站点配置" class="headerlink" title="4.2、修改博客站点配置"></a>4.2、修改博客站点配置</h3><p>hexo网站建立成功之后，则需要将其与我们GitHub的仓库相关联，进入博客路径，在博客根路径下，<code>_config.yml_</code>为站点配置文件：</p><p><img src="https://codestar.top/note-image/image-20231008235315031.png" alt="image-20231008235315031"></p><p>翻到最后，修改deploy这一段：</p><p><img src="https://codestar.top/note-image/image-20231008235513160.png" alt="image-20231008235513160"></p><p>修改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repo: https://github.com/minixiaoxin/codestar.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>填入的是仓库的地址，进入仓库，直接拷贝这个地址填入就行：</p><p><img src="https://codestar.top/note-image/image-20231008235725193.png" alt="image-20231008235725193"></p><p>改好了之后保存站点文件：</p><p><img src="https://codestar.top/note-image/image-20231008235833034.png" alt="image-20231008235833034"></p><h3 id="4-3、连接github-token"><a href="#4-3、连接github-token" class="headerlink" title="4.3、连接github token"></a>4.3、连接github token</h3><p>进入github，setting，找到<code>Developer Settings</code>，进入<code>Personal access tokens</code>：</p><p>新建一个token，勾选下面的访问权限，开多了不安全，过期时间保持默认就行，不建议开永不过期：</p><p><img src="https://codestar.top/note-image/image-20231010211904548.png" alt="image-20231010211904548"></p><p>下拉到页面最下方，点击<code>Generator token</code>即可。</p><p>在站点配置文件中，deploy改为以下内容，加入了一列token属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs she">deploy:<br>  type: git<br>  repo: https://github.com/minixiaoxin/codestar.github.io.git<br>  branch: master<br>  token: your_token<br></code></pre></td></tr></table></figure><p>然后部署网站：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br></code></pre></td></tr></table></figure><h3 id="4-4、博客部署"><a href="#4-4、博客部署" class="headerlink" title="4.4、博客部署"></a>4.4、博客部署</h3><p>安装git部署插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或执行</span><br>npm i hexo-deployer-git<br></code></pre></td></tr></table></figure><p>正常执行返回如下：</p><p><img src="https://codestar.top/note-image/image-20231009000428664.png" alt="image-20231009000428664"></p><p>之后，再分别输入三条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">等价于:hexo cl</span><br>hexo clean<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231009103530211.png" alt="image-20231009103530211"></p><p>生成静态网页：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">等价于:hexo generate</span><br>hexo g<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231009103615664.png" alt="image-20231009103615664"></p><p>本地预览：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">等价于:hexo server</span><br>hexo s<br></code></pre></td></tr></table></figure><p>部署网站：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">等价于:hexo deploy</span><br>hexo d<br></code></pre></td></tr></table></figure><p>成功如下：</p><p><img src="https://codestar.top/note-image/image-20231010220157027.png" alt="image-20231010220157027"></p><p>后面就可以直接在github上看到文件提交了，在我们的网站上看到自己的博客：</p><p><img src="https://codestar.top/note-image/image-20231010224142330.png" alt="image-20231010224142330"></p><p><img src="https://codestar.top/note-image/image-20231010224803391.png" alt="image-20231010224803391"></p><h2 id="5、关联个人域名"><a href="#5、关联个人域名" class="headerlink" title="5、关联个人域名"></a>5、关联个人域名</h2><p>如果有自己的域名，可以将其关联上。我这使用的是namesoli的域名：</p><p>在namesoli控制后台添加一个解析，类型为CNAME:</p><p><img src="https://codestar.top/note-image/image-20231010225429266.png" alt="image-20231010225429266"></p><p>点击蓝球球：</p><p><img src="https://codestar.top/note-image/image-20231010225457731.png" alt="image-20231010225457731"></p><p><img src="https://codestar.top/note-image/image-20231010225645462.png" alt="image-20231010225645462"></p><p>之后在github中添加自定义域名：</p><p><img src="https://codestar.top/note-image/image-20231010225155405.png" alt="image-20231010225155405"></p><p>这样就完成了域名配置，访问域名可以直接跳转到我们的博客了。</p><h2 id="6、修改站点显示语言"><a href="#6、修改站点显示语言" class="headerlink" title="6、修改站点显示语言"></a>6、修改站点显示语言</h2><p>修改站点路径下的<code>_config.yml</code>文件来配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 显示中文</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-comment"># 显示英文</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">en</span><br></code></pre></td></tr></table></figure><h2 id="7、更换HEXO博客主题"><a href="#7、更换HEXO博客主题" class="headerlink" title="7、更换HEXO博客主题"></a>7、更换HEXO博客主题</h2><p>这里我以fluid主题来演示：</p><h3 id="7-1、下载主题源码"><a href="#7-1、下载主题源码" class="headerlink" title="7.1、下载主题源码"></a>7.1、下载主题源码</h3><p>github官方库：<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">https://github.com/fluid-dev/hexo-theme-fluid/releases</a></p><p>打开发布页，在最新版本下面找到<code>Source code.zip</code>，点击加载到本地：</p><p><img src="https://codestar.top/note-image/image-20231010235532329.png" alt="image-20231010235532329"></p><p>将压缩包解压，文件移动到hexo博客根目录下的theme目录：</p><p><img src="https://codestar.top/note-image/image-20231010235718388.png" alt="image-20231010235718388"></p><p>并将主题目录重新命名为fluid（注意目录层级，主题路径后一定要为css等资源文件，不能嵌套目录）：</p><p><img src="https://codestar.top/note-image/image-20231010235820060.png" alt="image-20231010235820060"></p><p>名称也可以不更改，直接使用<code>hexo-theme-fluid-1.9.5</code>，这样的话在<code>_config.yml</code>配置文件中theme字段也填入这个名称来就行。</p><h3 id="7-2、修改站点配置并部署"><a href="#7-2、修改站点配置并部署" class="headerlink" title="7.2、修改站点配置并部署"></a>7.2、修改站点配置并部署</h3><p>修改站点配置文件<code>_config.yml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">字段theme，没有则手动添加该字段</span><br>theme: fluid<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231011001123205.png" alt="image-20231011001123205"></p><p>完成修改之后，本地预览：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p>成功生成会展示如下页面：</p><p><img src="https://codestar.top/note-image/image-20231012003828038.png" alt="image-20231012003828038"></p><p><img src="https://codestar.top/note-image/image-20231012003858847.png" alt="image-20231012003858847"></p><p>之后，就可以进一步部署到github了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo d<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231012005601022.png" alt="image-20231012005601022"></p><p>把博客页面重新刷新一下就可以啦，so happy。</p><h2 id="8、添加页面"><a href="#8、添加页面" class="headerlink" title="8、添加页面"></a>8、添加页面</h2><h3 id="8-1、添加分类页面"><a href="#8-1、添加分类页面" class="headerlink" title="8.1、添加分类页面"></a>8.1、添加分类页面</h3><p>创建分类页面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page categories<br></code></pre></td></tr></table></figure><p>创建成功如下：</p><p><img src="https://codestar.top/note-image/image-20231012224842751.png" alt="image-20231012224842751"></p><p><img src="https://codestar.top/note-image/image-20231012224951266.png" alt="image-20231012224951266"></p><p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-10-12 22:48:17</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>添加<code>type: &quot;categories&quot;</code>到内容中，添加后是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2017-05-27 13:47:40</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>完成修改之后，后面每创建1篇文章，属性列中，支持”categories”这个属性。</p><h3 id="8-2、添加标签页"><a href="#8-2、添加标签页" class="headerlink" title="8.2、添加标签页"></a>8.2、添加标签页</h3><p>创建<code>标签页</code>与<code>分类页面</code>操作类似，操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page tags<br></code></pre></td></tr></table></figure><p>创建成功如下：</p><p><img src="https://codestar.top/note-image/image-20231012225453438.png" alt="image-20231012225453438"></p><p>然后编辑生成的<code>index.md</code>文件，添加<code>tags属性</code>：</p><p>默认内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">---<br>title: tags<br>date: 2023-10-12 22:54:41<br>---<br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">---<br>title: 标签<br>date: 2023-10-12 22:54:41<br>type: &quot;tags&quot;<br>---<br></code></pre></td></tr></table></figure><p>后面每创建1篇文章，其中的属性列中，支持”tags”这个属性。</p><h3 id="8-3、子导航栏"><a href="#8-3、子导航栏" class="headerlink" title="8.3、子导航栏"></a>8.3、子导航栏</h3><p>使用submenu来录入二级导航栏：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>    <span class="hljs-comment"># 文章归档页--二级菜单：归档、分类、标签</span><br>    <span class="hljs-bullet">-</span> &#123; <br>        <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;文章&quot;</span>,<br>          <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-icon_books&quot;</span>,<br>          <span class="hljs-attr">submenu:</span> [<br>            &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;,<br>            &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;,<br>            &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>          ] &#125;<br>    <span class="hljs-bullet">-</span> &#123; <br>        <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;个人&quot;</span>, <br>          <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span>,<br>          <span class="hljs-attr">submenu:</span> [<br>            &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-info&quot;</span> &#125;<br>          ] &#125;<br></code></pre></td></tr></table></figure><p>实际效果：</p><p><img src="https://codestar.top/note-image/image-20231027235342913.png" alt="image-20231027235342913"></p><h3 id="8-4、添加关于页"><a href="#8-4、添加关于页" class="headerlink" title="8.4、添加关于页"></a>8.4、添加关于页</h3><p><code>关于我</code>页面，需要手动创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page about<br></code></pre></td></tr></table></figure><p>会生成相应的页面：</p><p><img src="https://codestar.top/note-image/image-20231012211032250.png" alt="image-20231012211032250"></p><p>根据自己需求，修改对应的MD文件,，添加layout属性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">---<br>title: MiniXiaoxin<br>date: 2023-10-12 21:09:51<br>layout: about<br>---<br>正文内容：<br>这是MiniXiaoxin的博客，记录在知识的海洋里学习到的每一点小小的知识。<br></code></pre></td></tr></table></figure><p>添加完成后，重新生成页面，并本地预览后可部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br>hexo d<br></code></pre></td></tr></table></figure><h2 id="9、发布新文章"><a href="#9、发布新文章" class="headerlink" title="9、发布新文章"></a>9、发布新文章</h2><h3 id="9-1、markdown新建文章配置"><a href="#9-1、markdown新建文章配置" class="headerlink" title="9.1、markdown新建文章配置"></a>9.1、markdown新建文章配置</h3><p>文章以markdown格式进行存储，可以修改一些配置方便新建文章：</p><p>修改站点文件<code>_config.yml</code>，修改下面的配置可以在新建文章的时候，生成一个同名的资源目录用于存放图片文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">post_asset_folder: true<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231012212413325.png" alt="image-20231012212413325"></p><h3 id="9-2、新建博文"><a href="#9-2、新建博文" class="headerlink" title="9.2、新建博文"></a>9.2、新建博文</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo n &quot;我的第一篇文章&quot;<br></code></pre></td></tr></table></figure><p>执行完成之后，会在<code>source\_posts</code>下生成一个新的md文件和一个同名的资源目录：</p><p><img src="https://codestar.top/note-image/image-20231012213940917.png" alt="image-20231012213940917"></p><p><img src="https://codestar.top/note-image/image-20231012214019324.png" alt="image-20231012214019324"></p><p>打开之后，是下面的这些内容：顶部为文章的一些属性信息，可以方便做文章归类</p><p>**&#x3D;&#x3D;注意：&#x3D;&#x3D;**在属性”:”符号后面，需要添加一个空格，否则文章不生效</p><p><img src="https://codestar.top/note-image/image-20231202171219218.png" alt="image-20231202171219218"></p><p>可以添加的属性有这些：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">title: postName               文章标题<br>date: 2013-12-02 15:30:16     文章编写的时间，这里可以随意修改<br>updated: 2013-12-02 15:30:16  文件的修改日期<br>categories:                   文章分类目录，可以为空<br>tags:                         文章标签，可空，多标签请用格式[tag1,tag2,tag3]<br>author:                       文章作者声明<br>description:                  对本页的描述，相当于是一个简介，如果这个定义了，就会在首页中出现这里的内容而不会出现整个文章详细内容。<br></code></pre></td></tr></table></figure><h3 id="9-3、博文Front-matter配置"><a href="#9-3、博文Front-matter配置" class="headerlink" title="9.3、博文Front-matter配置"></a>9.3、博文Front-matter配置</h3><p>hexo中有Front-matter这个概念，是文件最上方以 — 分隔的区域，用于指定个别文件的变量。配置tags和categories: 示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">---<br>title: 我的博文<br>date: 2023-10-12 21:35:14<br>categories: <br>- 分类一<br>- 子分类<br>tags: <br>- 标签一<br>- 子标签<br>---<br>我的博文<br></code></pre></td></tr></table></figure><p>子标签和子分类<strong>支持多个</strong>，每个标签或分类占一行。</p><h3 id="9-3、删除文章"><a href="#9-3、删除文章" class="headerlink" title="9.3、删除文章"></a>9.3、删除文章</h3><p>如果需要删除一篇历史文章，只需要在<code>source\_posts</code>下，<strong>删除相应的markdown文件和资源目录</strong>就行，然后重新生成静态页面，预览并部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br>hexo s<br>hexo d<br></code></pre></td></tr></table></figure><h3 id="9-5、文章管理"><a href="#9-5、文章管理" class="headerlink" title="9.5、文章管理"></a>9.5、文章管理</h3><h4 id="1）标签及分来管理"><a href="#1）标签及分来管理" class="headerlink" title="1）标签及分来管理"></a>1）标签及分来管理</h4><p>分类及标签管理：</p><p>创建了<strong>分类</strong>和<strong>标签</strong>页面之后，就可以在文章中<strong>配置分类</strong>和<strong>页签属性</strong>了，通过这两个属性来管理发布的文章了：</p><p>对上面的第一篇文章做修改，添加分类和标签如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">---<br>title: 我的第一篇文章<br>date: 2023-10-12 21:35:14<br>categories: <br>- 测试内容<br>tags: <br>- 测试文章<br>---<br>我的第一篇博客文章<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231012230610082.png" alt="image-20231012230610082"></p><p>重新生成静态页面并预览：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231012232517358.png" alt="image-20231012232517358"></p><h4 id="2）源文件夹分类管理"><a href="#2）源文件夹分类管理" class="headerlink" title="2）源文件夹分类管理"></a>2）源文件夹分类管理</h4><p>通过发布文章的资源文件夹来管理文章：</p><p>在hexo中，可以在<code>_post</code>文章源路径下创建不同的路径来标识文章，方便自己管理。在生成页面的时候不会根据这个路径来标识，依旧会通过前面配置的<strong>分类和标签属性来标识</strong>，创建路径示例：</p><p><img src="https://codestar.top/note-image/image-20231110003802687.png" alt="image-20231110003802687"></p><p>之后同样执行<code>hexo g</code>生成静态页面：</p><p><img src="https://codestar.top/note-image/image-20231110003911612.png" alt="image-20231110003911612"></p><p>文章依旧可以正常的访问，但页面URL会有所不同，方便自己本地进行文章管理。</p><h3 id="9-6、新建草稿文章"><a href="#9-6、新建草稿文章" class="headerlink" title="9.6、新建草稿文章"></a>9.6、新建草稿文章</h3><p>如果文章还没写完，或者暂时不想公开，这时候可以将文章保存为草稿。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new draft &quot;new draft&quot;<br></code></pre></td></tr></table></figure><p>执行上面命令，会在 <code>source/_drafts</code> 目录下生成一个 new-draft.md 文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到 <code>_drafts</code> 目录之中。</p><p>如果你希望强行预览草稿，更改配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>或者，如下方式启动 server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo server --drafts<br></code></pre></td></tr></table></figure><p>下面这条命令可以把草稿变成文章，或者页面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo publish [layout]<br></code></pre></td></tr></table></figure><h3 id="9-7、文章属性"><a href="#9-7、文章属性" class="headerlink" title="9.7、文章属性"></a>9.7、文章属性</h3><table><thead><tr><th>属性名称</th><th>作用</th><th>属性名称</th><th>作用</th></tr></thead><tbody><tr><td>layout</td><td>Layout 类型</td><td>excerpt_link</td><td>摘要链接文本</td></tr><tr><td>title</td><td>文章标题</td><td>reward</td><td>是否启用文章打赏功能</td></tr><tr><td>date</td><td>创建日期</td><td>reward_comment</td><td>打赏功能的评论提示文本</td></tr><tr><td>updated</td><td>修改日期</td><td>no_reward</td><td>是否禁用全局的打赏功能</td></tr><tr><td>comments</td><td>是否开启评论</td><td>hide_in_summary</td><td>是否在文章列表中隐藏该文章</td></tr><tr><td>tags</td><td>标签</td><td>password</td><td>访问文章所需密码</td></tr><tr><td>categories</td><td>分类</td><td>Disqus_shortname</td><td>用于集成 Disqus 评论系统的短名称</td></tr><tr><td>permalink</td><td>自定义 URL</td><td>Duoshuo_shortname</td><td>用于集成多说评论系统的短名称</td></tr><tr><td>author</td><td>作者</td><td>Facebook_comments</td><td>是否启用 Facebook 评论插件</td></tr><tr><td>excerpt</td><td>文章摘要</td><td>Instagram</td><td>嵌入 Instagram 相册到文章中</td></tr><tr><td>top_img</td><td>置顶图片</td><td>Weibo_frame</td><td>在文章中嵌入微博帖子</td></tr><tr><td>cover_img</td><td>封面图片</td><td>gitment_owner</td><td>Gitment 评论系统的仓库拥有者</td></tr><tr><td>toc</td><td>是否启用目录</td><td>gitment_repo</td><td>Gitment 评论系统的仓库名称</td></tr></tbody></table><p>示例1：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Hello, Hexo&quot;</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-01-01 10:00:00</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">技术</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Hexo</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">静态网站生成器</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">post</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">John</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">&quot;这是一篇测试文章&quot;</span><br><span class="hljs-attr">top_img:</span> <span class="hljs-string">&quot;/images/top.jpg&quot;</span><br><span class="hljs-attr">cover_img:</span> <span class="hljs-string">&quot;/images/cover.jpg&quot;</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">toc_depth:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">slides:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">excerpt_link:</span> <span class="hljs-string">&quot;继续阅读&quot;</span><br><span class="hljs-attr">reward:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">reward_comment:</span> <span class="hljs-string">&quot;如果觉得本文对您有帮助，欢迎打赏支持！&quot;</span><br><span class="hljs-attr">no_reward:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">hide_in_summary:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Hello, Hexo&quot;</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-01-01 10:00:00</span><br><span class="hljs-attr">updated:</span> <span class="hljs-number">2022-02-15 13:30:00</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Hexo</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">静态网站生成器</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">技术</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">&quot;/hello-hexo/&quot;</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">John</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">&quot;这是一篇测试文章&quot;</span><br><span class="hljs-attr">top_img:</span> <span class="hljs-string">&quot;/images/top.jpg&quot;</span><br><span class="hljs-attr">cover_img:</span> <span class="hljs-string">&quot;/images/cover.jpg&quot;</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">toc_depth:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">post</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>示例3：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Hello, Hexo&quot;</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-01-01 10:00:00</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">技术</span><br><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Hexo</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">静态网站生成器</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">post</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">John</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">&quot;这是一篇测试文章&quot;</span><br><span class="hljs-attr">top_img:</span> <span class="hljs-string">&quot;/images/top.jpg&quot;</span><br><span class="hljs-attr">cover_img:</span> <span class="hljs-string">&quot;/images/cover.jpg&quot;</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">toc_depth:</span> <span class="hljs-number">2</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h3 id="9-8、添加文章脚注"><a href="#9-8、添加文章脚注" class="headerlink" title="9.8、添加文章脚注"></a>9.8、添加文章脚注</h3><p>主题内置了脚注语法支持，可以在文章末尾自动生成带有锚点的脚注，该功能在<strong>主题配置</strong><code>_config.yml</code>中默认开启：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">footnote:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>脚注语法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一句话[^1]<br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">这是对应的脚注</span><br></code></pre></td></tr></table></figure><p>更优雅的使用方式，是将脚注写在文末，比如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">正文<br><br><span class="hljs-section">## 参考</span><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">参考资料1</span><br>[<span class="hljs-symbol">^2</span>]: <span class="hljs-link">参考资料2</span><br></code></pre></td></tr></table></figure><p>当然你也可以通过修改上方配置项 <code>header</code> 来自动加入节标题，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">footnote:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&lt;h2&gt;参考&lt;/h2&gt;&#x27;</span>  <span class="hljs-comment"># 等同于手动写 `## 参考`</span><br></code></pre></td></tr></table></figure><h3 id="9-9、多标签及子分类"><a href="#9-9、多标签及子分类" class="headerlink" title="9.9、多标签及子分类"></a>9.9、多标签及子分类</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 多标签：标签只存在并列关系，无上下级关系</span><br><span class="hljs-attr">tags:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">JAVA</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Windows</span><br><span class="hljs-comment"># 子分类：-Linux即为子分类</span><br><span class="hljs-attr">categories:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">Linux技术</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Linux</span><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231026225821444.png" alt="image-20231026225821444"></p><p><img src="https://codestar.top/note-image/image-20231026225713983.png" alt="image-20231026225713983"></p><h3 id="9-10、文章在首页的封面图"><a href="#9-10、文章在首页的封面图" class="headerlink" title="9.10、文章在首页的封面图"></a>9.10、文章在首页的封面图</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><p>将图片放入到img文件夹中。</p><h3 id="9-11、文章页顶部大图"><a href="#9-11、文章页顶部大图" class="headerlink" title="9.11、文章页顶部大图"></a>9.11、文章页顶部大图</h3><p>默认显示<strong>主题配置</strong>中的 <code>post.banner_img</code>，如需要设置单个文章的 Banner，在 <a href="https://hexo.io/zh-cn/docs/front-matter">front-matter (opens new window)</a>中指定 <code>banner_img</code> 属性。</p><p>本地图片存放位置同上。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/post_banner.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><h2 id="10、删除页面"><a href="#10、删除页面" class="headerlink" title="10、删除页面"></a>10、删除页面</h2><p>直接删除<code>hexo/source</code>路径下的非_post路径即可，删除后，重新生成静态页面部署即可完成页面的删除：</p><p><img src="https://codestar.top/note-image/image-20231027235438283.png" alt="image-20231027235438283"></p><h2 id="11、启用404页面"><a href="#11、启用404页面" class="headerlink" title="11、启用404页面"></a>11、启用404页面</h2><p>通过github配置的站点，不需要额外配置404页面，主题<strong>默认支持</strong>。</p><h2 id="12、修改头像等图片信息"><a href="#12、修改头像等图片信息" class="headerlink" title="12、修改头像等图片信息"></a>12、修改头像等图片信息</h2><p><strong>图像资源路径：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo_blog\themes\fluid\source\img<br></code></pre></td></tr></table></figure><p>修改其中的”default.png”为网站首页背景图、”avatar.png”为头像、”fliud.png”为网页图标、”loading.gif”为加载动图，另外一个为备案图标。</p><p><img src="https://codestar.top/note-image/image-20231018003807575.png" alt="image-20231018003807575"></p><h3 id="12-1、修改网页背景图"><a href="#12-1、修改网页背景图" class="headerlink" title="12.1、修改网页背景图"></a>12.1、修改网页背景图</h3><p>查询替换掉所有的”default.png”</p><p><img src="https://codestar.top/note-image/image-20231018010517213.png" alt="image-20231018010517213"></p><h3 id="12-2、启用头像并修改"><a href="#12-2、启用头像并修改" class="headerlink" title="12.2、启用头像并修改"></a>12.2、启用头像并修改</h3><p>在主题的<code>_config.yml</code>配置文件中，修改<code>about</code>关于页面中<code>avatar</code>属性来配置头像，图源为上面的<code>图源资源路径</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/wall-1.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/mini小新-blackavatar.png</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;mini小新&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;一个追逐知识，记录知识的少年。&quot;</span><br></code></pre></td></tr></table></figure><h3 id="12-3、修改网页图标"><a href="#12-3、修改网页图标" class="headerlink" title="12.3、修改网页图标"></a>12.3、修改网页图标</h3><p>在主题的<code>_config.yml</code>文件中修改下面的内容，j将其中的<code>/img/fluid.png</code>替换为自己的图标：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">用于浏览器标签的图标</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Icon <span class="hljs-keyword">for</span> browser tab</span><br>favicon: /img/web-icon1.png<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">用于苹果设备的图标</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Icon <span class="hljs-keyword">for</span> Apple <span class="hljs-built_in">touch</span></span><br>apple_touch_icon: /img/web-icon1.png<br></code></pre></td></tr></table></figure><h2 id="13、版权声明"><a href="#13、版权声明" class="headerlink" title="13、版权声明"></a>13、版权声明</h2><p>在主题下的<code>_config.yml</code>配置文件下，开启：</p><p>**&#x3D;&#x3D;注：&#x3D;&#x3D;**需要文章设置<code>author</code>字段值。</p><p>配置为’BY-NC-SA’类型：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">copyright:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># CreativeCommons license</span><br>    <span class="hljs-comment"># Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND</span><br>    <span class="hljs-attr">license:</span> <span class="hljs-string">&#x27;BY-NC-SA&#x27;</span><br>    <br><br>    <span class="hljs-comment"># 显示作者</span><br>    <span class="hljs-attr">author:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 显示发布日期</span><br>    <span class="hljs-comment"># Show post date</span><br>    <span class="hljs-attr">post_date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span><br><br>    <span class="hljs-comment"># 显示更新日期</span><br>    <span class="hljs-comment"># Show update date</span><br>    <span class="hljs-attr">update_date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span><br></code></pre></td></tr></table></figure><p>实际效果：</p><p><img src="https://codestar.top/note-image/image-20231024013253080.png" alt="image-20231024013253080"></p><p>关于许可协议，可以学习这篇文章：</p><p><a href="https://kevin-okay.github.io/2019/08/25/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%85%B1%E4%BA%AB%E8%AE%B8%E5%8F%AF%E8%AF%81/">https://kevin-okay.github.io/2019/08/25/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%85%B1%E4%BA%AB%E8%AE%B8%E5%8F%AF%E8%AF%81/</a></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HEXO</tag>
      
      <tag>建站指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows Terminal命令行工具安装过程指导</title>
    <link href="/2023/11/30/System/Windows/Windows%20Terminal%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E6%8C%87%E5%AF%BC/"/>
    <url>/2023/11/30/System/Windows/Windows%20Terminal%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E6%8C%87%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="1、在线安装"><a href="#1、在线安装" class="headerlink" title="1、在线安装"></a>1、在线安装</h2><p>使用Windows自带的应用商店下载：Windows Store直接搜索<code>terminal</code>下载第一个即可</p><p><img src="https://codestar.top/note-image/image-20231130224110717.png" alt="image-20231130224110717"></p><h2 id="2、离线安装"><a href="#2、离线安装" class="headerlink" title="2、离线安装"></a>2、离线安装</h2><p>Windows Terminal 微软官方有相应的Github库来维护和发布：<a href="https://github.com/microsoft/terminal/releases">https://github.com/microsoft/terminal/releases</a></p><p>去到微软官方GitHub仓库Release页面，根据系统对应版本下载安装包：</p><p><img src="https://codestar.top/note-image/image-20230216144337781.png" alt="image-20230216144337781"></p><p>下载完成之后，文件后缀为<code>.msixbundle</code>，直接双击安装包进行安装：</p><p><img src="https://codestar.top/note-image/image-20230216144504874.png" alt="image-20230216144504874"></p><p><img src="https://codestar.top/note-image/image-20230216144528352.png" alt="image-20230216144528352"></p><h2 id="3、问题记录"><a href="#3、问题记录" class="headerlink" title="3、问题记录"></a>3、问题记录</h2><p>出现<strong>应用安装程序无法安装应用包相关项。请向开发人员索要  应用包。</strong>的问题：</p><p><img src="https://codestar.top/note-image/image-20230216171030402.png" alt="image-20230216171030402"></p><p>可以尝试下面的方法来解决问题：</p><ul><li>1、启用<code>Microsoft Store Install Service</code>服务</li></ul><blockquote><p><kbd>Win</kbd>+<kbd>R</kbd>打开运行窗口，输入<code>services.msc</code>打开服务页面，找到<code>Microsoft Store Install Service</code>服务项，启动该项服务</p></blockquote><ul><li>2、重装<code>Microsoft Store</code></li></ul><blockquote><p>1）卸载Microsoft Store</p><p>右键 开始 -&gt; Windows PowerShell (Admin) -&gt; 输入下列指令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">get-appxpackage</span> *store* | <span class="hljs-built_in">remove-Appxpackage</span><br></code></pre></td></tr></table></figure><p>2）重启电脑，重新安装Microsoft Store</p><p>右键 开始 -&gt; Windows PowerShell (Admin) -&gt; 输入下列指令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">add-appxpackage</span> <span class="hljs-literal">-register</span> <span class="hljs-string">&quot;C:\Program Files\WindowsApps\*Store*\AppxManifest.xml&quot;</span> <span class="hljs-literal">-disabledevelopmentmode</span><br></code></pre></td></tr></table></figure></blockquote><ul><li>3、修改支持TLS协议</li></ul><blockquote><p><kbd>Win</kbd>+<kbd>R</kbd>打开运行窗口，输入<code>inetcpl.cpl </code>，“高级”，勾选<code>SSL 3.0 、TLS 1.0 、TLS 1.1 、TLS 1.2、TLS1.3</code>，应用后重启电脑</p></blockquote><p>之后重新运行离线安装包，即可正常安装。</p><p>参考：<a href="https://answers.microsoft.com/zh-hans/windows/forum/all/%E6%88%91%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85/c5ac1083-da00-4df8-940a-ca626267da3d">https://answers.microsoft.com/zh-hans/windows/forum/all/%E6%88%91%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85/c5ac1083-da00-4df8-940a-ca626267da3d</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>Windows Terminal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>工具</tag>
      
      <tag>Windows Terminal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM笔记5：大模型开发的迭代验证</title>
    <link href="/2023/11/23/AI_ML/DatawhaleLearn/LLM%E7%AC%94%E8%AE%B05%EF%BC%9A%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91%E7%9A%84%E8%BF%AD%E4%BB%A3%E9%AA%8C%E8%AF%81/"/>
    <url>/2023/11/23/AI_ML/DatawhaleLearn/LLM%E7%AC%94%E8%AE%B05%EF%BC%9A%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91%E7%9A%84%E8%BF%AD%E4%BB%A3%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h2 id="1、迭代验证的一般思路"><a href="#1、迭代验证的一般思路" class="headerlink" title="1、迭代验证的一般思路"></a>1、迭代验证的一般思路</h2><p>参考：</p><p><a href="https://datawhalechina.github.io/llm-universe/#/C6/1.%20%E9%AA%8C%E8%AF%81%E8%BF%AD%E4%BB%A3%E7%9A%84%E4%B8%80%E8%88%AC%E6%80%9D%E8%B7%AF">https://datawhalechina.github.io/llm-universe/#/C6/1.%20%E9%AA%8C%E8%AF%81%E8%BF%AD%E4%BB%A3%E7%9A%84%E4%B8%80%E8%88%AC%E6%80%9D%E8%B7%AF</a></p><p>占坑，待完善</p><h2 id="2、Bad-Case优化"><a href="#2、Bad-Case优化" class="headerlink" title="2、Bad Case优化"></a>2、Bad Case优化</h2><p>参考：</p><p><a href="https://datawhalechina.github.io/llm-universe/#/C6/2.%20%E8%A7%A3%E5%86%B3Bad%20Case">https://datawhalechina.github.io/llm-universe/#/C6/2.%20%E8%A7%A3%E5%86%B3Bad%20Case</a></p><p>占坑，待完善</p><h2 id="3、大模型评估方法"><a href="#3、大模型评估方法" class="headerlink" title="3、大模型评估方法"></a>3、大模型评估方法</h2><p>参考：</p><p><a href="https://datawhalechina.github.io/llm-universe/#/C6/3.%20%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95">https://datawhalechina.github.io/llm-universe/#/C6/3.%20%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95</a></p><p>占坑，待完善</p>]]></content>
    
    
    <categories>
      
      <category>AI&amp;ML</category>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datawhale</tag>
      
      <tag>LLM</tag>
      
      <tag>AI&amp;ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM笔记4：LLM向量数据库构建</title>
    <link href="/2023/11/21/AI_ML/DatawhaleLearn/LLM%E7%AC%94%E8%AE%B04%EF%BC%9ALLM%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA/"/>
    <url>/2023/11/21/AI_ML/DatawhaleLearn/LLM%E7%AC%94%E8%AE%B04%EF%BC%9ALLM%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="1、知识库的数据"><a href="#1、知识库的数据" class="headerlink" title="1、知识库的数据"></a>1、知识库的数据</h2><h3 id="1-1、需要什么数据库？"><a href="#1-1、需要什么数据库？" class="headerlink" title="1.1、需要什么数据库？"></a>1.1、需要什么数据库？</h3><p>如何来构建一个适用于LLM的数据库，不同于传统的关系型数据库SQL那些，LLM中所存储的数据均为向量格式，在LLM中进行运算的也是以向量作为语料。也正是这个特殊点，LLM的数据库也称之为向量数据库。当前的方案是使用LangChain架构来构建出一个向量数据库，在LangChain中已经集成了30多个向量数据库工具，考虑到轻巧加载快捷的特点，这里使用<strong>Chroma向量数据库</strong>作为首选。</p><h3 id="1-2、数据的处理过程"><a href="#1-2、数据的处理过程" class="headerlink" title="1.2、数据的处理过程"></a>1.2、数据的处理过程</h3><p>明确了构建工具，接下来是构建流程。构建的过程，首先是语料收集和处理：</p><blockquote><p>数据语料，可以使用不同类型的格式文件，常见的如PDF文本文件、MP4视频文件、MD文本文件等。</p></blockquote><p>将这些文件经过处理之后，可以存储到向量数据库中，最终目的是要将这些数据转换为向量的格式。具体要经过下面的一些处理过程：</p><p><img src="https://codestar.top/note-image/image-20231121231529369.png" alt="image-20231121231529369"></p><p>方便处理的是文本类型的结构化数据，非结构化数据需要经过转化处理才能使用。</p><h2 id="2、向量数据库构建"><a href="#2、向量数据库构建" class="headerlink" title="2、向量数据库构建"></a>2、向量数据库构建</h2><h3 id="2-1、Chroma认识"><a href="#2-1、Chroma认识" class="headerlink" title="2.1、Chroma认识"></a>2.1、Chroma认识</h3><p>Chroma向量数据库，用来专门检索<strong>向量数据</strong>即<strong>Embedding</strong>的一种数据库系统，在LangChain集成，这里涉及到embedding一些知识点，参考下面的内容，暂时不做梳理：</p><blockquote><p>embedding的认识：</p><p><a href="https://datawhalechina.github.io/llm-universe/#/C2/%E9%99%843.LangChain%20%E8%87%AA%E5%AE%9A%E4%B9%89%20LLM%20embedding">https://datawhalechina.github.io/llm-universe/#/C2/%E9%99%843.LangChain%20%E8%87%AA%E5%AE%9A%E4%B9%89%20LLM%20embedding</a></p><p>调用智谱embedding：</p><p><a href="https://datawhalechina.github.io/llm-universe/#/C2/6.%20%E8%B0%83%E7%94%A8%E6%99%BA%E8%B0%B1%20AI(ChatGLM)%E7%94%9F%E6%88%90%20embedding">https://datawhalechina.github.io/llm-universe/#/C2/6.%20%E8%B0%83%E7%94%A8%E6%99%BA%E8%B0%B1%20AI(ChatGLM)%E7%94%9F%E6%88%90%20embedding</a></p></blockquote><p>向量数据库中的数据形式，其中每个向量代表一个数据项，每个向量，可以是文本、数字、或者图像亦或是视频等其他格式的数据类型。通过建立向量数据库，能够对其中的数据建立高效的索引，加速检索过程和存储过程的效率。</p><h3 id="2-2、通过向量数据库进行检索"><a href="#2-2、通过向量数据库进行检索" class="headerlink" title="2.2、通过向量数据库进行检索"></a>2.2、通过向量数据库进行检索</h3><p>在向量数据库中可以使用多种检索方式，有几个典型的检索：<br>1）相似度检索：以相似度即词的相关性进行检索</p><p>2）MMR检索：最大边际相关性（MMR，Maximum marginal relevance）。主要目的是在进行相似度检索的同时，增加内容的丰富度。</p><p>后续还有<strong>链锁式问答</strong>、<strong>结合Prompt提问过程</strong>处理，后续进行扩展。</p><h2 id="3、项目数据库构建"><a href="#3、项目数据库构建" class="headerlink" title="3、项目数据库构建"></a>3、项目数据库构建</h2><p>实践流程，将具体的文件处理成文档词向量化，存储到Chroma向量数据库中，从而建立我们的LLM应用数据源。按照第一章流程来建立项目数据库。</p><p><strong>注：</strong>Embedding的类型有许多，根据使用的LLM大模型来实践。</p>]]></content>
    
    
    <categories>
      
      <category>AI&amp;ML</category>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datawhale</tag>
      
      <tag>LLM</tag>
      
      <tag>AI&amp;ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM笔记3：LLM项目设计及开发流程</title>
    <link href="/2023/11/20/AI_ML/DatawhaleLearn/LLM%E7%AC%94%E8%AE%B03%EF%BC%9ALLM%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1%E5%8F%8A%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/11/20/AI_ML/DatawhaleLearn/LLM%E7%AC%94%E8%AE%B03%EF%BC%9ALLM%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1%E5%8F%8A%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1、大模型开发"><a href="#1、大模型开发" class="headerlink" title="1、大模型开发"></a>1、大模型开发</h2><h3 id="1-1、大模型开发概念"><a href="#1-1、大模型开发概念" class="headerlink" title="1.1、大模型开发概念"></a>1.1、大模型开发概念</h3><p>初级大模型的开发，一般是将LLM作为一个调用工具，通过 <strong>Prompt Engineering、数据工程、业务逻辑分解</strong>等手段来发挥大模型的能力，一般不会去大幅度改动模型本身。通过调用LLM来适配不同的任务，之后在应用场景中去优化。</p><p>由于不需要对模型进行训练，无需构造类似于传统AI开发需要用到的训练集等内容，可以直接从我们所处的业务中自行构造出一小批特定场景的小验证集，重点工作主要还是在Prompt的设计上，以此来验证llm开发的效果是否达标。在开发过程中，尝试用 <strong>Prompt Engineering 来替代子模型的训练调优</strong>，通过 Prompt 链路组合来实现业务逻辑，用一个通用大模型 + 若干业务 Prompt 来解决任务</p><p>在实际的业务中，收集Bad Case，再通过这些Bad Case针对性优化Prompt，从而实现较好的泛化效果。相较于传统 AI 的评估过程，需要构造训练集、测试集、验证集，在训练集上训练模型、在测试集上调优模型、在验证集上最终验证模型效果，整个开发链路相对简化了一些。</p><h3 id="1-2、LLM项目开发的整理流程"><a href="#1-2、LLM项目开发的整理流程" class="headerlink" title="1.2、LLM项目开发的整理流程"></a>1.2、LLM项目开发的整理流程</h3><p>LLM项目的开发流程，整体上包含8个过程项，顺序如下图：</p><p><img src="https://codestar.top/note-image/image-20231121224818691.png" alt="image-20231121224818691"></p><ul><li>确定目标：需要明确出开发所针对的应用场景、目标人群和核心价值</li><li>功能设计：从业务逻辑中提炼出应用所应该要提供的功能，设计出一个完整的适配LLM场景的功能逻辑。</li><li>整体框架搭建：在明确好功能之后，需要对功能进行规划，明确好设计框架，当前通用的框架是 <strong>特定数据库（向量数据库）+ Prompt + 通用大模型</strong>。推荐使用LangChain框架来进行开发，其提供了Chain、Tool 等架构的实现，可以基于 LangChain 框架进行LLM的定制化，从而实现从用户输入到数据库再到大模型最后输出的整体架构连接</li><li>搭建数据库(向量)：开发过程需要使用到个性化的数据库进行支撑，由于LLM需要进行向量语义检索，一般使用想chroma的向量数据库。</li><li>Prompt Engineering：Prompt对LLM影响尤为深刻，这一步需要明确出Prompt的设计原则和技巧，一般借助于业务数据中收集到的验证集来设计满足要求、具备基本能力的Prompt。</li><li>验证迭代：模型开发完成之后，还需要对其中发现的Bad Case来进行针对性的改进Prompt，并验证改进，通过这个过程不断迭代不断优化，提升系统效果。</li><li>搭建前端后台：完整迭代优化之后，就已经完成了核心功能，后续可以进行前端后台的搭建。这个领域已经发展的非常成熟，主流的有两种快速开发Demo的框架有<strong>Gradio</strong>和<strong>Streamlit</strong>，可以是开发者迅速搭建可视化页面并实现Demo上线。</li><li>体验优化：到了这一步，基本上已经有了用户开始使用了，这一过程就需要来对用户体验进行跟踪，记录用户反馈及其中出现的Bad Case，从而对应用进行针对性的优化。</li></ul><p>基本的环节如上，其中比较核心的几个环节有，<strong>搭建向量数据库、Prompt Engineering、验证迭代</strong>，这几步对应用影响较大，甚至可以说直接决定了用户体验好坏与否。</p><h2 id="2、LLM项目流程"><a href="#2、LLM项目流程" class="headerlink" title="2、LLM项目流程"></a>2、LLM项目流程</h2><p>下面根据我们所需要实现的个人应用来按照上述的框架，做一些项目流程拆解：</p><h3 id="2-1、项目规划与需求分析"><a href="#2-1、项目规划与需求分析" class="headerlink" title="2.1、项目规划与需求分析"></a>2.1、项目规划与需求分析</h3><p>明确设计需求及应用功能：</p><ul><li>1）项目目标：</li></ul><blockquote><p>基于个人知识库的问答助手</p></blockquote><ul><li>2）<strong>核心功能</strong>：</li></ul><blockquote><ol><li>上传文档、创建知识库；</li><li>选择知识库，检索用户提问的知识片段；</li><li>提供知识片段与提问，获取大模型回答；</li><li>流式回复；</li><li>历史对话记录；</li></ol></blockquote><ul><li>3）确定技术架构和工具</li></ul><blockquote><ol><li>开发框架：LangChain框架</li><li>向量数据库：Chroma知识库</li><li>LLM：GPT、星火大模型、文心一言、GLM 等</li><li>前后端：Gradio 和 Streamlit</li></ol></blockquote><h3 id="2-2、向量数据库构建与数据获取"><a href="#2-2、向量数据库构建与数据获取" class="headerlink" title="2.2、向量数据库构建与数据获取"></a>2.2、向量数据库构建与数据获取</h3><h4 id="1）项目原理"><a href="#1）项目原理" class="headerlink" title="1）项目原理"></a>1）项目原理</h4><p>本项目实现原理如下图所示（<a href="https://github.com/chatchat-space/Langchain-Chatchat/blob/master/img/langchain+chatglm.png">图片来源</a> ）：</p><p><img src="https://codestar.top/note-image/image-20231119235902301.png" alt="image-20231119235902301"></p><p>过程概述如下：</p><blockquote><p>加载本地文档 -&gt; 读取文本 -&gt; 文本分割 -&gt; 文本向量化 -&gt; question向量化 -&gt; 在文本向量中匹配出与问句向量最相似的 top k个 -&gt; 匹配出的文本作为上下文和问题一起添加到 prompt中 -&gt; 提交给 LLM生成回答</p></blockquote><h4 id="2）收集和整理用户提供的文档"><a href="#2）收集和整理用户提供的文档" class="headerlink" title="2）收集和整理用户提供的文档"></a>2）收集和整理用户提供的文档</h4><p>用户常用文档格式有 pdf、txt、doc 等，首先使用工具读取文本，通常使用 langchain 的文档加载器模块可以方便的将用户提供的文档加载进来，也可以使用一些 python 比较成熟的包进行读取。</p><p>由于目前大模型使用 token 的限制，我们需要对读取的文本进行切分，将较长的文本切分为较小的文本，这时一段文本就是一个单位的知识。</p><h4 id="3）将文档词向量化"><a href="#3）将文档词向量化" class="headerlink" title="3）将文档词向量化"></a>3）将文档词向量化</h4><p>使用文本嵌入(Embeddings)对分割后的文档进行向量化，使语义相似的文本片段具有接近的向量表示。然后，存入向量数据库，这个流程正是创建 <code>索引(index)</code> 的过程。</p><p>向量数据库对各文档片段进行索引，支持快速检索。这样，当用户提出问题时，可以先将问题转换为向量，在数据库中快速找到语义最相关的文档片段。然后将这些文档片段与问题一起传递给语言模型，生成回答</p><h4 id="4）将向量化后的文档导入Chroma知识库，建立知识库索引"><a href="#4）将向量化后的文档导入Chroma知识库，建立知识库索引" class="headerlink" title="4）将向量化后的文档导入Chroma知识库，建立知识库索引"></a>4）将向量化后的文档导入Chroma知识库，建立知识库索引</h4><p>Langchain 集成了超过 30 个不同的向量存储库。我们选择 Chroma 向量库是因为它轻量级且数据存储在内存中，这使得它非常容易启动和开始使用。</p><p>将用户知识库内容经过 embedding 存入向量知识库，然后用户每一次提问也会经过 embedding，利用向量相关性算法（例如余弦算法）找到最匹配的几个知识库片段，将这些知识库片段作为上下文，与用户问题一起作为 prompt 提交给 LLM 回答。</p><h3 id="2-3、大模型集成与API连接"><a href="#2-3、大模型集成与API连接" class="headerlink" title="2.3、大模型集成与API连接"></a>2.3、大模型集成与API连接</h3><ol><li>集成GPT、星火、文心、GLM 等大模型，配置 API 连接。</li><li>编写代码，实现与大模型 API 的交互，以便获取问题答案。</li></ol><h3 id="2-4、核心功能实现"><a href="#2-4、核心功能实现" class="headerlink" title="2.4、核心功能实现"></a>2.4、核心功能实现</h3><ol><li>构建 Prompt Engineering，实现大模型回答功能，根据用户提问和知识库内容生成回答。</li><li>实现流式回复，允许用户进行多轮对话。</li><li>添加历史对话记录功能，保存用户与助手的交互历史。</li></ol><h3 id="2-5、核心功能迭代优化"><a href="#2-5、核心功能迭代优化" class="headerlink" title="2.5、核心功能迭代优化"></a>2.5、核心功能迭代优化</h3><ol><li>进行验证评估，收集 Bad Case。</li><li>根据 Bad Case 迭代优化核心功能实现。</li></ol><h3 id="2-6、前端与用户交互界面开发"><a href="#2-6、前端与用户交互界面开发" class="headerlink" title="2.6、前端与用户交互界面开发"></a>2.6、前端与用户交互界面开发</h3><ol><li>使用 Gradio 和 Streamlit 搭建前端界面。</li><li>实现用户上传文档、创建知识库的功能。</li><li>设计用户界面，包括问题输入、知识库选择、历史记录展示等。</li></ol><h3 id="2-7、部署测试与上线"><a href="#2-7、部署测试与上线" class="headerlink" title="2.7、部署测试与上线"></a>2.7、部署测试与上线</h3><ol><li>部署问答助手到服务器或云平台，确保可在互联网上访问。</li><li>进行生产环境测试，确保系统稳定。</li><li>上线并向用户发布。</li></ol><h3 id="2-8、维护与持续改进"><a href="#2-8、维护与持续改进" class="headerlink" title="2.8、维护与持续改进"></a>2.8、维护与持续改进</h3><ol><li>监测系统性能和用户反馈，及时处理问题。</li><li>定期更新知识库，添加新的文档和信息。</li><li>收集用户需求，进行系统改进和功能扩展。</li></ol><p>整个流程将确保项目从规划、开发、测试到上线和维护都能够顺利进行，为用户提供高质量的基于个人知识库的问答助手。</p><h2 id="3、LLM项目开发架构"><a href="#3、LLM项目开发架构" class="headerlink" title="3、LLM项目开发架构"></a>3、LLM项目开发架构</h2><h3 id="3-1、整体架构"><a href="#3-1、整体架构" class="headerlink" title="3.1、整体架构"></a>3.1、整体架构</h3><p>经过上文分析，本项目为搭建一个<strong>基于大模型的个人知识库助手</strong>，基于 LangChain 框架搭建，核心技术包括 <strong>LLM API 调用、向量数据库、检索问答链</strong>等。项目整体架构如下：</p><p><img src="https://codestar.top/note-image/image-20231120001308172.png" alt="image-20231120001308172"></p><p>图来源于：<a href="https://github.com/datawhalechina/llm-universe/blob/main/figures/structure.jpg">https://github.com/datawhalechina/llm-universe/blob/main/figures/structure.jpg</a></p><p>如上，本项目从底向上依次分为 <strong>LLM 层、数据层、数据库层、应用层与服务层</strong>：<br>① <strong>LLM</strong> 层主要基于四种流行 LLM API 进行了 LLM 调用封装，支持用户以统一的入口、方式来访问不同的模型，支持随时进行模型的切换；<br>② <strong>数据层</strong> 主要包括个人知识库的源数据以及 Embedding API，源数据经过 Embedding 处理可以被向量数据库使用；<br>③ <strong>数据库层</strong> 主要为基于个人知识库源数据搭建的向量数据库，在本项目中我们选择了 Chroma；<br>④ <strong>应用层</strong> 为核心功能的最顶层封装，我们基于 LangChain 提供的检索问答链基类进行了进一步封装，从而支持不同模型切换以及便捷实现基于数据库的检索问答；<br>⑤ 最顶层为<strong>服务层</strong>，我们分别实现了 Gradio 搭建 Demo 与 FastAPI 组建 API 两种方式来支持本项目的服务访问。</p><h3 id="3-2、代码结构"><a href="#3-2、代码结构" class="headerlink" title="3.2、代码结构"></a>3.2、代码结构</h3><p>本项目的完整代码存放于 <a href="https://github.com/datawhalechina/llm-universe">project</a> 目录下，实现了项目的全部功能及封装，代码结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs markup">-project<br>    -readme.md 项目说明<br>    -requirements.txt 使用依赖包的版本 <br>    -llm LLM调用封装<br>        -self_llm.py 自定义 LLM 基类<br>        -wenxin_llm.py 自定义百度文心 LLM<br>        -spark_llm.py 自定义讯飞星火 LLM<br>        -zhipuai_llm.py 自定义智谱AI LLM<br>        -call_llm.py 将各个 LLM 的原生接口封装在一起<br>        -test.ipynb 使用示例<br>    -embedding embedding调用封装<br>        -zhipuai_embedding.py 自定义智谱AI embedding<br>        -call_embedding.py 调用 embedding 模型 <br>    -data 源数据路径<br>    -database 数据库层封装<br>        -create_db.py 处理源数据及初始化数据库封装<br>    -qa_chain 应用层封装<br>        -qa_chain.py 封装检索问答链，返回一个检索问答链对象<br>        -chat_qa_chian.py：封装对话检索链，返回一个带有历史记录的对话检索链对象<br>        -get_vectordb.py 返回向量数据库对象<br>        -model_to_llm.py 调用模型<br>        -test.ipynb 使用示例<br>    -serve 服务层封装<br>        -run_gradio.py 启动 Gradio 界面<br>        -api.py 封装 FastAPI<br>        -run_api.sh 启动 API<br>        -test.ipynb 使用示例Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h3 id="3-3、项目逻辑"><a href="#3-3、项目逻辑" class="headerlink" title="3.3、项目逻辑"></a>3.3、项目逻辑</h3><ol><li>用户：可以通过<code> run_gradio</code> 或者 <code>run_api </code>启动整个服务；</li><li>服务层调用 qa_chain.py 或 chat_qa_chain 实例化对话检索链对象，实现全部核心功能；</li><li>服务层和应用层都可以调用、切换 prompt_template.py 中的 prompt 模板来实现 prompt 的迭代；</li><li>也可以直接调用 call_llm 中的 get_completion 函数来实现不使用数据库的 LLM；</li><li>应用层调用已存在的数据库和 llm 中的自定义 LLM 来构建检索链；</li><li>如果数据库不存在，应用层调用 create_db.py 创建数据库，该脚本可以使用 openai embedding 也可以使用 embedding.py 中的自定义 embedding</li></ol><h3 id="3-4、-各层简析"><a href="#3-4、-各层简析" class="headerlink" title="3.4、 各层简析"></a>3.4、 各层简析</h3><h4 id="1）LLM-层"><a href="#1）LLM-层" class="headerlink" title="1）LLM 层"></a>1）LLM 层</h4><p>LLM 层主要功能为将国内外四种知名 LLM API（OpenAI-ChatGPT、百度文心、讯飞星火、智谱GLM）进行封装，隐藏不同 API 的调用差异，实现在同一个对象或函数中通过不同的 model 参数来使用不同来源的 LLM。</p><p>在 LLM 层，我们首先构建了一个 Self_LLM 基类，基类定义了所有 API 的一些共同参数（如 API_Key，temperature 等）；然后我们在该基类基础上继承实现了上述四种 LLM API 的自定义 LLM。同时，我们也将四种 LLM 的原生 API 封装在了统一的 get_completion 函数中。</p><p>在上一章，我们已详细介绍了每一种 LLM 的调用方式、封装方式，项目代码中的 LLM 层封装就是上一章讲解的代码实践。</p><h4 id="2）数据层"><a href="#2）数据层" class="headerlink" title="2）数据层"></a>2）数据层</h4><p>数据层主要包括个人知识库的源数据（包括 pdf、txt、md 等）和 Embedding 对象。源数据需要经过 Embedding 处理才能进入向量数据库，我们在数据层自定义了智谱提供的 Embedding API 的封装，支持上层以统一方式调用智谱 Embedding 或 OpenAI Embedding。</p><p>在上一章，我们也已详细介绍了 Embdding API 的调用及封装方式。</p><h4 id="3）数据库层"><a href="#3）数据库层" class="headerlink" title="3）数据库层"></a>3）数据库层</h4><p>数据库层主要存放了向量数据库文件。同时，我们在该层实现了源数据处理、创建向量数据库的方法。</p><p>我们将在第四章详细介绍向量数据库、源数据处理方法以及构建向量数据库的具体实现。</p><h4 id="4）应用层"><a href="#4）应用层" class="headerlink" title="4）应用层"></a>4）应用层</h4><p>应用层封装了整个项目的全部核心功能。我们基于 LangChain 提供的检索问答链，在 LLM 层、数据库层的基础上，实现了本项目检索问答链的封装。自定义的检索问答链除具备基本的检索问答功能外，也支持通过 model 参数来灵活切换使用的 LLM。我们实现了两个检索问答链，分别是有历史记录的 Chat_QA_Chain 和没有历史记录的 QA_Chain。</p><p>我们将在第五章讲解 Prompt 的构造与检索问答链的构建细节。</p><h4 id="5）服务层"><a href="#5）服务层" class="headerlink" title="5）服务层"></a>5）服务层</h4><p>服务层主要是基于应用层的核心功能封装，实现了 Demo 的搭建或 API 的封装。在本项目中，我们分别实现了通过 Gradio 搭建前端界面与 FastAPI 进行封装，支持多样化的项目调用。</p><p>我们将在第六章详细介绍如何使用 Gradio 以及 FastAPI 来实现服务层的设计。</p><h2 id="4、参考："><a href="#4、参考：" class="headerlink" title="4、参考："></a>4、参考：</h2><p><a href="https://datawhalechina.github.io/llm-universe/#/C3/3.%20%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E7%AE%80%E6%9E%90">https://datawhalechina.github.io/llm-universe/#/C3/3.%20%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E7%AE%80%E6%9E%90</a></p>]]></content>
    
    
    <categories>
      
      <category>AI&amp;ML</category>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datawhale</tag>
      
      <tag>LLM</tag>
      
      <tag>AI&amp;ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python执行websocket连接出现websocket has no attribute enableTrace错误</title>
    <link href="/2023/11/19/Coding/Python/Python%E6%89%A7%E8%A1%8Cwebsocket%E8%BF%9E%E6%8E%A5%E5%87%BA%E7%8E%B0websocket-has-no-attribute-enableTrace%E9%94%99%E8%AF%AF/"/>
    <url>/2023/11/19/Coding/Python/Python%E6%89%A7%E8%A1%8Cwebsocket%E8%BF%9E%E6%8E%A5%E5%87%BA%E7%8E%B0websocket-has-no-attribute-enableTrace%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="1、问题现象"><a href="#1、问题现象" class="headerlink" title="1、问题现象"></a>1、问题现象</h2><p>在websocket同服务器进行连接时，出现没有<code>enableTrace</code>属性：</p><p><img src="https://codestar.top/note-image/image-20231118234948161.png" alt="image-20231118234948161"></p><h2 id="2、问题原因"><a href="#2、问题原因" class="headerlink" title="2、问题原因"></a>2、问题原因</h2><p>检查一下当前安装的库，websocket：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip show websocket<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118234835661.png" alt="image-20231118234835661"></p><p>检查这个库的相关发布信息：已经很久没维护了，早已被弃用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip_search websocket<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118235204165.png" alt="image-20231118235204165"></p><h2 id="3、问题解决方法"><a href="#3、问题解决方法" class="headerlink" title="3、问题解决方法"></a>3、问题解决方法</h2><p>后续Python中websocket库改为使用websocket-client，需要重新安装：</p><p>卸载websocket，这个已弃用，websockets中没有<code>enableTrace</code>模块，还会影响websocket-client，也卸载掉：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip uninstall websocket<br>pip uninstall websockets<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118234913614.png" alt="image-20231118234913614"></p><p>必须要将websocket和websockets这两个库都卸载掉才能修复问题，否则websocket-client不会生效：</p><p><img src="https://codestar.top/note-image/image-20231119000205745.png" alt="image-20231119000205745"></p><p><img src="https://codestar.top/note-image/image-20231119000316817.png" alt="image-20231119000316817"></p><p>重新安装websocket-client：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install websocket-client -i https://pypi.tuna.tsinghua.edu.cn/simple/<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231119001929840.png" alt="image-20231119001929840"></p><p><strong>注意：</strong>由于之前安装的websocket和websockets的影响，websocket-client不会重新安装<code>enableTrace</code>模块，需要卸载再重装才会生效。</p><p><img src="https://codestar.top/note-image/image-20231119002127863.png" alt="image-20231119002127863"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>websocket</tag>
      
      <tag>pip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM笔记2-1：Python实现大模型API的调用</title>
    <link href="/2023/11/19/AI_ML/DatawhaleLearn/LLM%E7%AC%94%E8%AE%B02-1%EF%BC%9APython%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%A8%A1%E5%9E%8BAPI%E7%9A%84%E8%B0%83%E7%94%A8/"/>
    <url>/2023/11/19/AI_ML/DatawhaleLearn/LLM%E7%AC%94%E8%AE%B02-1%EF%BC%9APython%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%A8%A1%E5%9E%8BAPI%E7%9A%84%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1、Prompt认识"><a href="#1、Prompt认识" class="headerlink" title="1、Prompt认识"></a>1、Prompt认识</h2><h3 id="1-1、Prompt基本概念"><a href="#1-1、Prompt基本概念" class="headerlink" title="1.1、Prompt基本概念"></a>1.1、Prompt基本概念</h3><p>关于LLM大模型，在前面已经有了了解，现在来了解一下什么是prompt。在LLM发展早期，prompt是一个被用来给LLM下发任务的模板，每种分类任务或聚类任务对应一种prompt，当然不局限于此。随着LLM技术的发展以及ChatGPT的诞生，prompt已经泛指为给大模型的所有输入内容，不仅限与文字。我们与LLM的每次对话，都可视为一个prompt，而经过LLM输出的结果，称其为<strong>Completion</strong>。简单点理解，输入即为prompt，输出即为completion。</p><p><img src="https://codestar.top/note-image/image-20231118102533309.png" alt="image-20231118102533309"></p><h3 id="1-2、Prompt中的常用参数"><a href="#1-2、Prompt中的常用参数" class="headerlink" title="1.2、Prompt中的常用参数"></a>1.2、Prompt中的常用参数</h3><ul><li><p><strong>Temperature：</strong>生成结果的随机性</p><blockquote><p>参数范围：[0 ,1]</p></blockquote></li></ul><blockquote><p>当temperature &#x3D; 0时，LLM的创造性最低，生成的结果更加的<strong>保守</strong>，可预测，适用于一些对结果准确度或格式要求很高的场景。</p><p>当temperature &#x3D; 1时，LLM的创造性最高，生成的结果更加的<strong>随机</strong>，难以预测，适用于一些更需要创造力的场景，如写作，设计等。</p></blockquote><ul><li><p><strong>system prompt：</strong></p><blockquote><p><strong>prompt中优先级更高的一种prompt，在一次完整的对话中，只会生效一个 system prompt</strong>，如果一个对话中出现两个system prompt，则生效的为后者。system prompt的的主要作用是提前设定好LLM所扮演的角色或者预先的条件，这样在后续的输入中能够按照这个要求来给出更准确或更契合场景的回答。效果主要是用来提升用例体验，ChatGPT API开放后这概念被大量推广。不得不说，效果很好。</p></blockquote></li></ul><p>使用示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;<br>    &quot;system prompt&quot;:&quot;我想让你充当一个花哨的标题生成器。我会用逗号输入关键字，你会用花哨的标题回复。我的第一个关键字是 api、test、automation&quot;,<br>    &quot;user prompt&quot;:&quot;今日天气，很靓&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用效果，确实会生成花里胡哨的标题<img src="https://codestar.top/note-image/0BC47B01.png" alt="0BC47B01">：</p><p><img src="https://codestar.top/note-image/image-20231118104713638.png" alt="image-20231118104713638"></p><p><strong>注：</strong>这里所支持的角色可以根据自己的想法来设定，它所能做的能力范围有多大，全靠你想像有多大，能力不是无限大，<strong>在允许范围内尝试</strong></p><ul><li><p><strong>user prompt：</strong></p><blockquote><p>prompt中的另一种：user prompt，等价于我们正常的输入，它的优先级会比system prompt优先级更低，如上述的示例，其中”今日天气，很靓”便是一个user prompt。区别在于，我们在一段完整对话中，可以迭代很多个user prompt，但system prompt只能有一个。</p></blockquote></li></ul><h2 id="2、环境准备"><a href="#2、环境准备" class="headerlink" title="2、环境准备"></a>2、环境准备</h2><h3 id="2-1、Anaconda安装"><a href="#2-1、Anaconda安装" class="headerlink" title="2.1、Anaconda安装"></a>2.1、Anaconda安装</h3><p><a href="https://www.anaconda.com/download">Anaconda官网</a>下载安装包：</p><p><img src="https://codestar.top/note-image/image-20231118131922857.png" alt="image-20231118131922857"></p><p>之后双击安装程序，修改安装路径之后按照推荐设定安装即可，此处不详述。</p><p>安装完成后，将anaconda中的Python配置到系统环境变量<code>path</code>中：添加两条环境变量路径如下，<code>D:\Anaconda</code>为我本地安装的路径</p><p><img src="https://codestar.top/note-image/image-20231118140057806.png" alt="image-20231118140057806"></p><h3 id="2-2、工具pip-search安装"><a href="#2-2、工具pip-search安装" class="headerlink" title="2.2、工具pip-search安装"></a>2.2、工具pip-search安装</h3><p>pip-search可以用来查找指定的包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install pip-search -i https://pypi.tuna.tsinghua.edu.cn/simple/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">搜索指定包</span><br>pip_search numpy<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看可安装包版本</span><br>pip index vesions numpy<br></code></pre></td></tr></table></figure><h3 id="2-3、pip必要库安装（Windows）"><a href="#2-3、pip必要库安装（Windows）" class="headerlink" title="2.3、pip必要库安装（Windows）"></a>2.3、pip必要库安装（Windows）</h3><p>获取库依赖文件：<a href="https://github.com/datawhalechina/llm-universe">https://github.com/datawhalechina/llm-universe</a></p><p>在仓库根路径下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先<span class="hljs-built_in">cd</span>到仓库根路径</span><br>pip install -r .\requirements_windows.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里可能会涉及到修改pip的情况，使用Python进行安装</span><br>D:\Anaconda\python.exe -m pip install -r .\requirements_windows.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/<br></code></pre></td></tr></table></figure><p>正常执行如下：这里我更改为了国内的清华pip源镜像下载</p><p><img src="https://codestar.top/note-image/image-20231118140655233.png" alt="image-20231118140655233"></p><p>接下来就是等待其安装好，大约需要2-3分钟左右。</p><p>正常情况不会出现其他报错会直接安装成功，如下：</p><p><img src="https://codestar.top/note-image/image-20231118141525471.png" alt="image-20231118141525471"></p><p>我这边安装出现了一些兼容性或缺包问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR: pip&#x27;s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.<br>gensim 4.3.0 requires FuzzyTM&gt;=0.4.0, which is not installed.<br>tables 3.8.0 requires blosc2~=2.0.0, which is not installed.<br>tables 3.8.0 requires cython&gt;=0.29.21, which is not installed.<br>anaconda-cloud-auth 0.1.3 requires pydantic&lt;2.0, but you have pydantic 2.5.1 which is incompatible.<br>numba 0.57.1 requires numpy&lt;1.25,&gt;=1.21, but you have numpy 1.26.2 which is incompatible.<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118141441651.png" alt="image-20231118141441651"></p><p>逐个解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1、缺失FuzzyTM&gt;=0.4.0</span><br>pip install FuzzyTM -i https://pypi.tuna.tsinghua.edu.cn/simple/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2、缺失blosc2~=2.0.0:指定下载2.0.0版本blosc2（先执行3，再执行这一步）</span><br>pip install blosc2==2.0.0 -i https://pypi.tuna.tsinghua.edu.cn/simple/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">3、缺失cython&gt;=0.29.21</span><br>pip install cython -i https://pypi.tuna.tsinghua.edu.cn/simple/<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-comment"># 4、要求pydantic&lt;2.0：安装1.10.3版本--暂不处理，不影响</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">pip install pydantic==1.10.3 -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">5、要求numpy&lt;1.25,&gt;=1.21</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查安装的版本，不满足则仿照步骤2，指定版本重新安装，pip index versions numpy查看可安装的版本</span><br>pip show numpy<br>pip install numba -i https://pypi.tuna.tsinghua.edu.cn/simple/<br></code></pre></td></tr></table></figure><p>FuzzyTM安装：</p><p><img src="https://codestar.top/note-image/image-20231118142225393.png" alt="image-20231118142225393"></p><p>cython安装：</p><p><img src="https://codestar.top/note-image/image-20231118142559351.png" alt="image-20231118142559351"></p><p>blosc2 2.0.0版本安装：</p><p><img src="https://codestar.top/note-image/image-20231118142708681.png" alt="image-20231118142708681"></p><p>pydantic库影响的是anaconda-cloud-auth 0.1.3，anaconda云授权库，可选的库有下面这些：（1.10.13安装后会出现不满足gradio库的现象，暂不处理，不影响后续代码运行）</p><p><img src="https://codestar.top/note-image/image-20231118143403139.png" alt="image-20231118143403139"></p><p>numba安装：</p><p><img src="https://codestar.top/note-image/image-20231118150041170.png" alt="image-20231118150041170"></p><p><img src="https://codestar.top/note-image/image-20231118150103390.png" alt="image-20231118150103390"></p><h3 id="2-4、pycharm创建项目"><a href="#2-4、pycharm创建项目" class="headerlink" title="2.4、pycharm创建项目"></a>2.4、pycharm创建项目</h3><p>打开pycharm，NEW PROJECT，填写项目基本信息，选取本地安装的Anaconda中的Python：</p><p><img src="https://codestar.top/note-image/image-20231118134134734.png" alt="image-20231118134134734"></p><h2 id="3、LLM-API的使用"><a href="#3、LLM-API的使用" class="headerlink" title="3、LLM API的使用"></a>3、LLM API的使用</h2><h3 id="3-1、ChatGPT-API调用"><a href="#3-1、ChatGPT-API调用" class="headerlink" title="3.1、ChatGPT API调用"></a>3.1、ChatGPT API调用</h3><h4 id="1）OpenAI-key生成"><a href="#1）OpenAI-key生成" class="headerlink" title="1）OpenAI key生成"></a>1）OpenAI key生成</h4><p>进入Overview页面：<a href="https://platform.openai.com/docs/overview">https://platform.openai.com/docs/overview</a></p><p><img src="https://codestar.top/note-image/image-20231118110129691.png" alt="image-20231118110129691"></p><p>填写key名称，点击<code>Create secret key</code>之后生成相应的密钥：</p><p><img src="https://codestar.top/note-image/image-20231118110203297.png" alt="image-20231118110203297"></p><p>生成后，拷贝生成的密钥，保存好密钥，后面会使用到它，<strong>注意密钥只会展示1次，关闭弹窗之后不会再显示</strong>。生成成功之后会在API keys页面上展示刚才新建的key。一个<strong>免费账号密钥用量有效期在3个月</strong>，超过这段时间则无效。</p><h4 id="2）配置读取key"><a href="#2）配置读取key" class="headerlink" title="2）配置读取key"></a>2）配置读取key</h4><p>在项目根路径，创建<code>.env</code>文件保存我们的key</p><p><img src="https://codestar.top/note-image/image-20231118171518004.png" alt="image-20231118171518004"></p><p>通过下面的代码来读取<code>.env</code>中的key值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># file:obtain_key.py</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> openai<br><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv, find_dotenv<br><br><span class="hljs-comment"># 封装成get_dotenv()函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dotenv</span>():<br>    <span class="hljs-comment"># 读取本地/项目的环境变量。</span><br>    <span class="hljs-comment"># find_dotenv()寻找并定位.env文件的路径</span><br>    <span class="hljs-comment"># load_dotenv()读取该.env文件，并将其中的环境变量加载到当前的运行环境中</span><br>    <span class="hljs-comment"># 如果你设置的是全局的环境变量，这行代码则没有任何作用。</span><br>    _ = load_dotenv(find_dotenv())<br><br>    <span class="hljs-comment"># 如果你需要通过代理端口访问，你需要如下配置：注意端口是否正确</span><br>    os.environ[<span class="hljs-string">&#x27;HTTPS_PROXY&#x27;</span>] = <span class="hljs-string">&#x27;http://127.0.0.1:9981&#x27;</span><br>    os.environ[<span class="hljs-string">&quot;HTTP_PROXY&quot;</span>] = <span class="hljs-string">&#x27;http://127.0.0.1:9981&#x27;</span><br><br>    <span class="hljs-comment"># 获取环境变量 OPENAI_API_KEY</span><br>    <span class="hljs-comment"># openai.api_key = os.environ[&#x27;OPENAI_API_KEY&#x27;]</span><br>    openai.api_key = os.getenv(<span class="hljs-string">&#x27;OPENAI_API_KEY&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(openai.api_key)<br>    <span class="hljs-comment"># print(type(openai.api_key))</span><br>    <span class="hljs-keyword">return</span> os.getenv(<span class="hljs-string">&#x27;OPENAI_API_KEY&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="3）ChatGPT原生接口调用"><a href="#3）ChatGPT原生接口调用" class="headerlink" title="3）ChatGPT原生接口调用"></a>3）ChatGPT原生接口调用</h4><p>获取到OpenAI官方的key之后，我们来尝试调用ChatGPT，参考<a href="https://platform.openai.com/docs/api-reference/chat/object">官方文档</a>。：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> openai<br><span class="hljs-keyword">from</span> obtain_key <span class="hljs-keyword">import</span> get_dotenv<br><br><br>get_dotenv()<br><span class="hljs-comment"># 导入所需库</span><br><span class="hljs-comment"># 注意，此处我们假设你已根据上文配置了 OpenAI API Key，如没有将访问失败</span><br>completion = openai.ChatCompletion.create(<br>    <span class="hljs-comment"># 创建一个 ChatCompletion</span><br>    <span class="hljs-comment"># 调用模型：ChatGPT-3.5</span><br>    model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>,<br>    <span class="hljs-comment"># message 是你的 prompt</span><br>    messages=[<br>        &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;You are a helpful assistant.&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;Hello!&quot;</span>&#125;<br>    ]<br>)<br><span class="hljs-built_in">print</span>(completion[<span class="hljs-string">&quot;choices&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;message&quot;</span>][<span class="hljs-string">&quot;content&quot;</span>])<br></code></pre></td></tr></table></figure><p>接口会返回一个ChatCompletion对象，包含了回答文本，创建时间等属性内容，我们仅需要content属性内容，返回示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">完整的ChatCompletion对象</span><br>&lt;OpenAIObject chat.completion id=chatcmpl-80QUFny7lXqOcfu5CZMRYhgXqUCv0 at 0x7f1fbc0bd770&gt; JSON: &#123;<br>  &quot;choices&quot;: [<br>    &#123;<br>      &quot;finish_reason&quot;: &quot;stop&quot;,<br>      &quot;index&quot;: 0,<br>      &quot;message&quot;: &#123;<br>        &quot;content&quot;: &quot;Hello! How can I assist you today?&quot;,<br>        &quot;role&quot;: &quot;assistant&quot;<br>      &#125;<br>    &#125;<br>  ],<br>  &quot;created&quot;: 1695112507,<br>  &quot;id&quot;: &quot;chatcmpl-80QUFny7lXqOcfu5CZMRYhgXqUCv0&quot;,<br>  &quot;model&quot;: &quot;gpt-3.5-turbo-0613&quot;,<br>  &quot;object&quot;: &quot;chat.completion&quot;,<br>  &quot;usage&quot;: &#123;<br>    &quot;completion_tokens&quot;: 9,<br>    &quot;prompt_tokens&quot;: 19,<br>    &quot;total_tokens&quot;: 28<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118194351466.png" alt="image-20231118194351466"></p><h4 id="4）封装请求API函数"><a href="#4）封装请求API函数" class="headerlink" title="4）封装请求API函数"></a>4）封装请求API函数</h4><p>将API的调用进行封装：隐去了message的具体细节，并将模型固定，用户只需要传入prompt即user prompt的内容就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个封装 OpenAI 接口的函数，参数为 Prompt，返回对应结果</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_completion</span>(<span class="hljs-params">prompt, model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>, temperature = <span class="hljs-number">0</span></span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    调用CHATGPT</span><br><span class="hljs-string">    prompt: 对应的提示词</span><br><span class="hljs-string">    model: 调用的模型，默认为 gpt-3.5-turbo(ChatGPT)，有内测资格的用户可以选择 gpt-4</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    messages = [&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt&#125;, &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;You are a joyful assistant.&quot;</span>&#125;]<br>    response = openai.ChatCompletion.create(<br>        model=model,<br>        messages=messages,<br>        temperature=temperature, <span class="hljs-comment"># 模型输出的温度系数，控制输出的随机程度</span><br>    )<br>    <span class="hljs-comment"># 调用 OpenAI 的 ChatCompletion 接口</span><br>    <span class="hljs-keyword">return</span> response.choices[<span class="hljs-number">0</span>].message[<span class="hljs-string">&quot;content&quot;</span>]<br></code></pre></td></tr></table></figure><p>调用接口如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 调用get_completion()方法</span><br>completion = get_completion(<span class="hljs-string">&quot;介绍一下广东这个省&quot;</span>)<br><span class="hljs-built_in">print</span>(completion)<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118200354830.png" alt="image-20231118200354830"></p><h4 id="5）使用LangChain调用ChatGPT"><a href="#5）使用LangChain调用ChatGPT" class="headerlink" title="5）使用LangChain调用ChatGPT"></a>5）使用LangChain调用ChatGPT</h4><p>LangChain中已经对ChatGPT进行封装，可以直接在应用中调用。更多细节，参考<a href="https://api.python.langchain.com/en/latest/api_reference.html#module-langchain.chat_models">LangChain官方文档</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">langchain 调用 chatgpt</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 从langchain.chat_models导入OpenAI的对话模型ChatOpenAI</span><br><span class="hljs-keyword">from</span> langchain.chat_models <span class="hljs-keyword">import</span> ChatOpenAI<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> obtain_key <span class="hljs-keyword">import</span> get_dotenv<br>key = get_dotenv()<br><span class="hljs-built_in">print</span>(key)<br><span class="hljs-comment"># 实例化ChatOpenAI 类</span><br><span class="hljs-comment"># 这里我们将参数temperature设置为0.0，从而减少生成答案的随机性。</span><br><span class="hljs-comment"># 如果你想要每次得到不一样的有新意的答案，可以尝试调整该参数。</span><br>chat = ChatOpenAI(temperature=<span class="hljs-number">0.0</span>, openai_api_key=key)<br><span class="hljs-built_in">print</span>(chat)<br></code></pre></td></tr></table></figure><p>正常返回如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cache=None verbose=False callbacks=None callback_manager=None tags=None metadata=None client=&lt;class &#x27;openai.api_resources.chat_completion.ChatCompletion&#x27;&gt; model_name=&#x27;gpt-3.5-turbo&#x27; temperature=0.0 model_kwargs=&#123;&#125; openai_api_key=&#x27;OPENAI_API_KEY&#x27; openai_api_base=&#x27;&#x27; openai_organization=&#x27;&#x27; openai_proxy=&#x27;&#x27; request_timeout=None max_retries=6 streaming=False n=1 max_tokens=None tiktoken_model_name=None<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118180700050.png" alt="image-20231118180700050"></p><p>返回参数说明：</p><blockquote><ul><li><p>model_name：所要使用的模型，默认为 ‘gpt-3.5-turbo’，参数设置与 OpenAI 原生接口参数设置一致。 </p></li><li><p>temperature：温度系数，取值同原生接口。 </p></li><li><p>openai_api_key：OpenAI API key，如果不使用环境变量设置 API Key，也可以在实例化时设置。</p></li><li><p>openai_proxy：设置代理，如果不使用环境变量设置代理，也可以在实例化时设置。 </p></li><li><p>streaming：是否使用流式传输，即逐字输出模型回答，默认为 False。</p></li><li><p>max_tokens：模型输出的最大 token 数，意义及取值同上。</p></li></ul></blockquote><h4 id="6）LangChain-Template配置prompt"><a href="#6）LangChain-Template配置prompt" class="headerlink" title="6）LangChain Template配置prompt"></a>6）LangChain Template配置prompt</h4><p>Template即模板，是LongChain中的一种固定的Prompt格式。可以在Template中填入自定义的任务来便捷的完成个性化任务的Prompt设置。</p><p>1、构造一个个性化 Template：Template写法固定格式，可以较大程度发挥模型性能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain.prompts <span class="hljs-keyword">import</span> ChatPromptTemplate<br><br><span class="hljs-comment"># template内容：这里我们要求模型对给定文本进行中文翻译</span><br><span class="hljs-comment"># 固定写法</span><br>template_string = <span class="hljs-string">&quot;&quot;&quot;Translate the text \</span><br><span class="hljs-string">that is delimited by triple backticks \</span><br><span class="hljs-string">into a Chinses. \</span><br><span class="hljs-string">text: ```&#123;text&#125;```</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 接着将 Template 实例化</span><br>chat_template = ChatPromptTemplate.from_template(template_string)<br></code></pre></td></tr></table></figure><p>2、针对模型调用 format 方法，将 template 转化为模型输入的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 我们首先设置变量值</span><br>input_text = <span class="hljs-string">&quot;Today is a nice day.&quot;</span><br><br><span class="hljs-comment"># 接着调用 format_messages 将 template 转化为 message 格式</span><br>message = chat_template.format_messages(text=input_text)<br><span class="hljs-built_in">print</span>(message)<br></code></pre></td></tr></table></figure><p>转化的格式是<strong>专用于调用类似于 ChatGPT 的模型格式</strong>的数据类型</p><p><img src="https://codestar.top/note-image/image-20231118201822434.png" alt="image-20231118201822434"></p><p>3、使用template格式数据调用chatgpt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将实例化的类型传入设定好的prompt</span><br><span class="hljs-comment"># 此处存在问题--待调试：2 argument were given</span><br>response = ChatOpenAI(message)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><p>参考：<a href="https://python.langchain.com.cn/docs/modules/model_io/prompts/prompt_templates/">提示模板 | 🦜️🔗 Langchain</a></p><h3 id="3-2、文心大模型API调用"><a href="#3-2、文心大模型API调用" class="headerlink" title="3.2、文心大模型API调用"></a>3.2、文心大模型API调用</h3><h4 id="1）文心key获取"><a href="#1）文心key获取" class="headerlink" title="1）文心key获取"></a>1）文心key获取</h4><p>进入<a href="https://console.bce.baidu.com/qianfan/overview">百度云千帆大模型平台</a>，应用接入：</p><p><img src="https://codestar.top/note-image/image-20231118132712169.png" alt="image-20231118132712169"></p><p>创建应用<strong>（需要账号已经实名制）</strong>：</p><p><img src="https://codestar.top/note-image/image-20231118132911933.png" alt="image-20231118132911933"></p><p>填写应用基本信息，确定进入下一页：</p><p><img src="https://codestar.top/note-image/image-20231118133137495.png" alt="image-20231118133137495"></p><p>创建之后就可以在应用页面查看到我们刚建的应用，其中会展示我们想要的AppID<code>、</code>API Key<code>、</code>Secret Key：后续需要使用到API Key<code>、</code>Secret Key。</p><p><img src="https://codestar.top/note-image/image-20231118133314183.png" alt="image-20231118133314183"></p><h4 id="2）API原生调用"><a href="#2）API原生调用" class="headerlink" title="2）API原生调用"></a>2）API原生调用</h4><p>获取access_token：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_access_token</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用 API Key，Secret Key 获取access_token，替换下列示例中的应用API Key、应用Secret Key</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 指定网址</span><br>    <span class="hljs-comment"># 文心模型调用：替换&#123;api_key&#125;和&#123;secret_key&#125;</span><br>    url = <span class="hljs-string">&quot;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=&#123;api_key&#125;&amp;client_secret=&#123;secret_key&#125;&quot;</span><br>    <span class="hljs-comment"># 设置 POST 访问</span><br>    payload = json.dumps(<span class="hljs-string">&quot;&quot;</span>)<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;<br>    <span class="hljs-comment"># 通过 POST 访问获取账户对应的 access_token</span><br>    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, url, headers=headers, data=payload)<br>    <span class="hljs-keyword">return</span> response.json().get(<span class="hljs-string">&quot;access_token&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>正常返回如下，通过access_token访问文心大模型：</p><p><img src="https://codestar.top/note-image/image-20231118154840361.png" alt="image-20231118154840361"></p><p>调用文心原生API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_wenxin</span>(<span class="hljs-params">prompt</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    通过access_token调用文心一言模型</span><br><span class="hljs-string">    :param prompt:用户输入内容</span><br><span class="hljs-string">    :return:输出结果</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 调用接口</span><br>    <span class="hljs-comment"># 将下面&#123;access_token&#125;替换为get_access_token()获取到的access_token</span><br>    url = <span class="hljs-string">&quot;https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/eb-instant?access_token=&#123;access_token&#125;&quot;</span><br>    <span class="hljs-comment"># 配置 POST 参数</span><br>    payload = json.dumps(&#123;<br>        <span class="hljs-string">&quot;messages&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-comment"># user prompt</span><br>                <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(prompt)<span class="hljs-comment"># 输入的 prompt</span><br>            &#125;<br>        ]<br>    &#125;)<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;<br>    <span class="hljs-comment"># 发起请求</span><br>    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, url, headers=headers, data=payload)<br>    <span class="hljs-comment"># 返回的是一个 Json 字符串</span><br>    js = json.loads(response.text)<br>    <span class="hljs-built_in">print</span>(js[<span class="hljs-string">&quot;result&quot;</span>])<br><br></code></pre></td></tr></table></figure><p>调用模型（默认调用的是ERNIE-Bot-turbo模型）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># access_token = get_access_token()</span><br>    <span class="hljs-comment"># print(&quot;access_token is:&quot;, access_token)</span><br>    get_wenxin(<span class="hljs-string">&quot;关于NLP&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>调用正常返回如下：</p><p><img src="https://codestar.top/note-image/image-20231118162155785.png" alt="image-20231118162155785"></p><p>注意：文心大模型，免费用户1天只能调用1次，尝试多次，需购买token。</p><p><img src="https://codestar.top/note-image/image-20231118161157679.png" alt="image-20231118161157679"></p><p>注：文心API调用与OpenAI相似，但没有system prompt的配置，仅支持 user、assistant 。</p><h4 id="3）使用LangChain自定义文心LLM—待完善"><a href="#3）使用LangChain自定义文心LLM—待完善" class="headerlink" title="3）使用LangChain自定义文心LLM—待完善"></a>3）使用LangChain自定义文心LLM—待完善</h4><h3 id="3-3、星火大模型API调用"><a href="#3-3、星火大模型API调用" class="headerlink" title="3.3、星火大模型API调用"></a>3.3、星火大模型API调用</h3><p>科大讯飞旗下的一款大模型产品，侧重于中文内容，是一款典型的中文大模型。在国内与文心一言不分上下。</p><h4 id="1）星火API申请"><a href="#1）星火API申请" class="headerlink" title="1）星火API申请"></a>1）星火API申请</h4><p>进入<a href="https://console.xfyun.cn/app/create?redirect=/services/bm2">讯飞开放平台</a>申请：创建1个新应用，填写应用基本信息</p><p><img src="https://codestar.top/note-image/image-20231118212010453.png" alt="image-20231118212010453"></p><p>创建完了之后会在此处展示我们需要的APPID、APISecret、APIKey：</p><p><img src="https://codestar.top/note-image/image-20231118213029660.png" alt="image-20231118213029660"></p><h4 id="2）领取免费token"><a href="#2）领取免费token" class="headerlink" title="2）领取免费token"></a>2）领取免费token</h4><p>在应用控制台，实时用量，点击<code>立即购买</code>（必须要先实名）：</p><p><img src="https://codestar.top/note-image/image-20231118213414904.png" alt="image-20231118213414904"></p><p>选择”免费包（个人认证）”：</p><p><img src="https://codestar.top/note-image/image-20231118213512966.png" alt="image-20231118213512966"></p><p>选择OK之后，立即下单，就能成功购买了：</p><p><img src="https://codestar.top/note-image/image-20231118213614738.png" alt="image-20231118213614738"></p><p>免费token额度会同步刷新：</p><p><img src="https://codestar.top/note-image/image-20231118213659585.png" alt="image-20231118213659585"></p><h4 id="3）星火API调用"><a href="#3）星火API调用" class="headerlink" title="3）星火API调用"></a>3）星火API调用</h4><h5 id="3-1）Spark相关库配置"><a href="#3-1）Spark相关库配置" class="headerlink" title="3.1）Spark相关库配置"></a>3.1）Spark相关库配置</h5><p>由于星火 API 需要通过 WebSocket 进行连接，相对麻烦，这一步需要将SparkApi.py、SparkApiSelf.py两各个文件放置于项目根目录：</p><p><img src="https://codestar.top/note-image/image-20231118231656262.png" alt="image-20231118231656262"></p><p>源文件，从datawhale仓库路径取：<a href="https://github.com/datawhalechina/llm-universe/tree/main/notebook/C2%20%E8%B0%83%E7%94%A8%E5%A4%A7%E6%A8%A1%E5%9E%8B%20API">https://github.com/datawhalechina/llm-universe/tree/main/notebook/C2%20%E8%B0%83%E7%94%A8%E5%A4%A7%E6%A8%A1%E5%9E%8B%20API</a></p><p><img src="https://codestar.top/note-image/image-20231118232326070.png" alt="image-20231118232326070"></p><h5 id="3-2）Spark-API调用"><a href="#3-2）Spark-API调用" class="headerlink" title="3.2）Spark API调用"></a>3.2）Spark API调用</h5><p>完整调用代码，调用的传参和文心类似，均为列表类型。其中要根据实际申请的星火大模型的版本来配置<code>domain</code>、<code>Spark_url</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> SparkApi<br><br><span class="hljs-comment"># 1、配置密钥信息</span><br>appid = <span class="hljs-string">&quot;APPID&quot;</span>     <span class="hljs-comment">#填写控制台中获取的 APPID 信息</span><br>api_secret = <span class="hljs-string">&quot;APISecret&quot;</span>   <span class="hljs-comment">#填写控制台中获取的 APISecret 信息</span><br>api_key =<span class="hljs-string">&quot;APIKey&quot;</span>    <span class="hljs-comment">#填写控制台中获取的 APIKey 信息</span><br><br><span class="hljs-comment"># 2、配置大模型版本，默认“general/generalv2”：根据实际申请的版本选取</span><br><span class="hljs-comment"># domain = &quot;general&quot;   # v1.5版本</span><br>domain = <span class="hljs-string">&quot;generalv2&quot;</span>    <span class="hljs-comment"># v2.0版本</span><br><br><br><span class="hljs-comment"># 3、配置云端环境的服务地址：根据实际申请的版本选取</span><br><span class="hljs-comment"># Spark_url = &quot;ws://spark-api.xf-yun.com/v1.1/chat&quot;  # v1.5环境的地址</span><br>Spark_url = <span class="hljs-string">&quot;ws://spark-api.xf-yun.com/v2.1/chat&quot;</span>  <span class="hljs-comment"># v2.0环境的地址</span><br><br><span class="hljs-comment"># 4、封装将用户输入的prompt转化为传入参数的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_text</span>(<span class="hljs-params">role, content, text = []</span>):<br>    <span class="hljs-comment"># role 是指定角色，content 是 prompt 内容</span><br>    jsoncon = &#123;&#125;<br>    jsoncon[<span class="hljs-string">&quot;role&quot;</span>] = role<br>    jsoncon[<span class="hljs-string">&quot;content&quot;</span>] = content<br>    text.append(jsoncon)<br>    <span class="hljs-keyword">return</span> text<br><br><span class="hljs-comment"># 5、将用户输入 prompt 封装为传入参数列表</span><br>question = get_text(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;你好&quot;</span>)<br><span class="hljs-built_in">print</span>(question)<br><br><span class="hljs-comment"># 6、调用SparkApi.py 中封装的 main 函数</span><br>response = SparkApi.main(appid,api_key,api_secret,Spark_url,domain,question)<br></code></pre></td></tr></table></figure><p>成功调用如下：</p><p><img src="https://codestar.top/note-image/image-20231119003052282.png" alt="image-20231119003052282"></p><h3 id="3-4、智谱GLM-API调用"><a href="#3-4、智谱GLM-API调用" class="headerlink" title="3.4、智谱GLM API调用"></a>3.4、智谱GLM API调用</h3><p>GLM为智谱AI与清华大学共同合作开发的一款认知大模型，为新一代通用大模型，接下来将展开实现GLM API的调用过程。</p><h4 id="1）GLM-API申请"><a href="#1）GLM-API申请" class="headerlink" title="1）GLM API申请"></a>1）GLM API申请</h4><p>进入<a href="https://open.bigmodel.cn/overview">智谱AI开放平台</a>：</p><p><img src="https://codestar.top/note-image/image-20231118212311798.png" alt="image-20231118212311798"></p><p>进入<code>查看API Key</code>，开始创建API Key：初始账号会存在一个系统默认的key，并且存在赠送的18元token额度</p><p><img src="https://codestar.top/note-image/image-20231118212805541.png" alt="image-20231118212805541"></p><p>新建一个新的Key：</p><p><img src="https://codestar.top/note-image/image-20231118212601456.png" alt="image-20231118212601456"></p><p>之后会存在两个API Key：一个自己新建的Key，一个系统默认的Key</p><p><img src="https://codestar.top/note-image/image-20231118212648942.png" alt="image-20231118212648942"></p><p>API价格：</p><p><img src="https://codestar.top/note-image/image-20231118214001933.png" alt="image-20231118214001933"></p><h4 id="2）调用智谱大模型API"><a href="#2）调用智谱大模型API" class="headerlink" title="2）调用智谱大模型API"></a>2）调用智谱大模型API</h4><p>智谱AI支持SDK 和原生 HTTP来调用模型，本节以SDK为主：</p><p>环境中安装配置示例中的所需第三方库</p><h5 id="2-1）安装zhipu库"><a href="#2-1）安装zhipu库" class="headerlink" title="2.1）安装zhipu库"></a>2.1）安装zhipu库</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install zhipuai -i https://pypi.tuna.tsinghua.edu.cn/simple/<br></code></pre></td></tr></table></figure><p>在第2章中，已经将环境提前准备好了，这里执行指令可以做个检查：</p><p><img src="https://codestar.top/note-image/image-20231118222548647.png" alt="image-20231118222548647"></p><h5 id="2-2）API调用"><a href="#2-2）API调用" class="headerlink" title="2.2）API调用"></a>2.2）API调用</h5><p>分为下面几段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zhipuai<br><br><span class="hljs-comment"># 1、配置key和model</span><br>zhipuai.api_key = <span class="hljs-string">&quot;zhipu_key&quot;</span> <span class="hljs-comment">#填写控制台中获取的 APIKey 信息</span><br>model = <span class="hljs-string">&quot;chatglm_std&quot;</span> <span class="hljs-comment">#用于配置大模型版本</span><br><br><br><span class="hljs-comment"># 2、将用户输入的prompt转化为传入参数，输出的结果为列表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_text</span>(<span class="hljs-params">role, content, text = []</span>):<br>    <span class="hljs-comment"># role 是指定角色，content 是 prompt 内容</span><br>    jsoncon = &#123;&#125;<br>    jsoncon[<span class="hljs-string">&quot;role&quot;</span>] = role<br>    jsoncon[<span class="hljs-string">&quot;content&quot;</span>] = content<br>    text.append(jsoncon)<br>    <span class="hljs-keyword">return</span> text<br><br><br><span class="hljs-comment"># 3、将一个用户输入 prompt 封装为这样一个传入参数列表</span><br>question = get_text(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;你好&quot;</span>)<br><span class="hljs-built_in">print</span>(question)<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231118224838824.png" alt="image-20231118224838824"></p><p>调用AI：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 4、请求模型：调用zhipuai SDK 中封装的 invoke 函数</span><br>response = zhipuai.model_api.invoke(<br>    model=model,<br>    prompt=question<br>)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><p>调用成功结果如下：</p><p><img src="https://codestar.top/note-image/image-20231118225023072.png" alt="image-20231118225023072"></p><p>常用传入参数介绍：</p><blockquote><ul><li><code>prompt (list)</code>: 调用对话模型时，将当前对话信息列表作为提示输入给模型; 按照 {“role”: “user”, “content”: “你好”} 的键值对形式进行传参; 总长度超过模型最长输入限制后会自动截断，需按时间由旧到新排序。</li><li><code>temperature (float)</code>: 采样温度，控制输出的随机性，必须为正数取值范围是：(0.0,1.0]，不能等于 0，默认值为 0.95 值越大，会使输出更随机，更具创造性；值越小，输出会更加稳定或确定。</li><li><code>top_p (float)</code>: 用温度取样的另一种方法，称为核取样。取值范围是：(0.0, 1.0) 开区间，不能等于 0 或 1，默认值为 0.7。模型考虑具有 top_p 概率质量 tokens 的结果。例如：0.1 意味着模型解码器只考虑从前 10% 的概率的候选集中取 tokens。</li><li><code>request_id (string)</code>: 由用户端传参，需保证唯一性；用于区分每次请求的唯一标识，用户端不传时平台会默认生成</li><li><code>return_type (string)</code>: 用于控制每次返回内容的类型，空或者没有此字段时默认按照 json_string 返回。<code>json_string</code> 返回标准的 JSON 字符串。<code>text</code> 返回原始的文本内容</li></ul></blockquote><p><strong>注：</strong>不建议同时调整<code>temperature</code>和 <code>top_p </code>，根据具体场景单独调整1个即可。接口文档：<a href="https://open.bigmodel.cn/dev/api">https://open.bigmodel.cn/dev/api</a></p><p>参考文档：<a href="https://datawhalechina.github.io/llm-universe/#/C2/4.%20%E8%B0%83%E7%94%A8%E8%AE%AF%E9%A3%9E%E6%98%9F%E7%81%AB">https://datawhalechina.github.io/llm-universe/#/C2/4.%20%E8%B0%83%E7%94%A8%E8%AE%AF%E9%A3%9E%E6%98%9F%E7%81%AB</a></p>]]></content>
    
    
    <categories>
      
      <category>AI&amp;ML</category>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datawhale</tag>
      
      <tag>LLM</tag>
      
      <tag>AI&amp;ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL学习笔记1：SQL语法结构及DDL CREATE指令</title>
    <link href="/2023/11/17/SQL/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%EF%BC%9ASQL%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84%E5%8F%8ADDL-CREATE%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/11/17/SQL/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%EF%BC%9ASQL%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84%E5%8F%8ADDL-CREATE%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1、SQL基本语法结构"><a href="#1、SQL基本语法结构" class="headerlink" title="1、SQL基本语法结构"></a>1、SQL基本语法结构</h2><p>SQL分为三类：</p><p>1、数据定义语言DDL</p><blockquote><p>用于<strong>创建</strong>和<strong>定义</strong>数据库对象，并且将对这些对象的定义保存到数据字典中。通过DDL语句可以创建数据库对象，修改数据库对象和删除数据库对象等。</p></blockquote><p>常用的DDL语句及其功能：</p><table><thead><tr><th>DDL语句</th><th>功能说明</th></tr></thead><tbody><tr><td>CREATE</td><td>创建数据库</td></tr><tr><td>ALTER</td><td>修改数据库</td></tr><tr><td>DROP</td><td>删除数据库</td></tr><tr><td>RENAME</td><td>更改数据库对象的名称</td></tr><tr><td>TRUNCATE</td><td>删除表的全部内容</td></tr></tbody></table><p><strong>注：</strong>每一条DDL语句执行后，Oracle都将提交当前事务。</p><p>2、数据操纵语言DML</p><blockquote><p>主要用来处理数据库中的数据内容。允许用户对数据库中的数据进行查询、插入、更新、删除等操作。</p></blockquote><p>常用的DML语句及其功能：</p><table><thead><tr><th>DML语句</th><th>功能说明</th></tr></thead><tbody><tr><td>SELECT</td><td>从表或视图中检索数据行</td></tr><tr><td>INSERT</td><td>插入数据到表或视图</td></tr><tr><td>UPDATE</td><td>更新数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>CALL</td><td>调用过程</td></tr><tr><td>MERGE</td><td>合并（插入或修改）</td></tr><tr><td>COMMIT</td><td>将当前事务所做的更改永久化（写入数据库）</td></tr><tr><td>ROLLBACK</td><td>取消上次提交以来的所有操作</td></tr></tbody></table><p>3、数据控制语言DCL</p><blockquote><p>数据控制语言用于修改数据库<strong>结构</strong>的操作权限。</p></blockquote><p>DCL语句主要有2种：</p><table><thead><tr><th>DCL语句</th><th>功能说明</th></tr></thead><tbody><tr><td>GRANT</td><td>授予其他用户对数据库结构的访问权限</td></tr><tr><td>REVOKE</td><td>收回用户访问数据库结构的权限</td></tr></tbody></table><p>CRUD释义：</p><blockquote><p>增加、读取、更新、删除&#x2F;销毁</p></blockquote><p><img src="https://codestar.top/note-image/image-20230617154817200.png" alt="image-20230617154817200"></p><h2 id="2、SQL之DDL-CREATE"><a href="#2、SQL之DDL-CREATE" class="headerlink" title="2、SQL之DDL - CREATE"></a>2、SQL之DDL - CREATE</h2><h3 id="2-1、创建数据库-DATABASE"><a href="#2-1、创建数据库-DATABASE" class="headerlink" title="2.1、创建数据库(DATABASE)"></a>2.1、创建数据库(DATABASE)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE database_name<br><span class="hljs-comment">-- 示例：创建名为test_db1的数据库</span><br><span class="hljs-keyword">create</span> database test_db1<br></code></pre></td></tr></table></figure><h3 id="2-2、创建表-TABLE"><a href="#2-2、创建表-TABLE" class="headerlink" title="2.2、创建表(TABLE)"></a>2.2、创建表(TABLE)</h3><p>语法结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE TABLE 表名称<br>(<br>列名称1 数据类型,<br>列名称2 数据类型,<br>列名称3 数据类型,<br>....<br>)<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建Persons表，含5列：&quot;Id_P&quot;、&quot;LastName&quot;、&quot;FirstName&quot;、&quot;Address&quot; 以及 &quot;City&quot;</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Persons<br>(<br>Id_P <span class="hljs-type">int</span>,<br>LastName <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>FirstName <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>Address <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>City <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>)<br></code></pre></td></tr></table></figure><p>基础数据类型：</p><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">integer(size)<br/>int(size)<br/>smallint(size)<br/>tinyint(size)</td><td align="left">仅容纳整数。在括号内规定数字的最大位数。</td></tr><tr><td align="left">decimal(size,d)<br>numeric(size,d)</td><td align="left">容纳带有小数的数字。”size” 规定数字的最大位数。”d” 规定小数点右侧的最大位数。</td></tr><tr><td align="left">char(size)</td><td align="left">容纳固定长度的字符串（可容纳字母、数字以及特殊字符）。在括号中规定字符串的长度。</td></tr><tr><td align="left">varchar(size)</td><td align="left">容纳可变长度的字符串（可容纳字母、数字以及特殊的字符）。在括号中规定字符串的最大长度。</td></tr><tr><td align="left">date(yyyymmdd)</td><td align="left">容纳日期。</td></tr></tbody></table><p>创建完成之后使用<code>insert into</code>插入数据。</p><p><img src="https://codestar.top/note-image/image-20230617163358411.png" alt="image-20230617163358411"></p><h3 id="2-3、创建索引-INDEX"><a href="#2-3、创建索引-INDEX" class="headerlink" title="2.3、创建索引(INDEX)"></a>2.3、创建索引(INDEX)</h3><p><strong>索引：</strong>在不读取整个表的情况下，索引使数据库应用程序可以更快地查找数据</p><ul><li>创建简单索引：允许使用重复的值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- &quot;column_name&quot; 规定需要索引的列</span><br><span class="hljs-keyword">CREATE</span> INDEX index_name<br><span class="hljs-keyword">ON</span> table_name (column_name)<br></code></pre></td></tr></table></figure><ul><li>创建一个唯一索引：两个行不能拥有相同的索引值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX index_name<br><span class="hljs-keyword">ON</span> table_name (column_name)<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- Person表上创建Index_pers索引LastName列</span><br><span class="hljs-keyword">CREATE</span> INDEX Index_Pers<br><span class="hljs-keyword">ON</span> Person (LastName) <br><span class="hljs-comment">-- 降序排列</span><br><span class="hljs-keyword">CREATE</span> INDEX Index_Pers<br><span class="hljs-keyword">ON</span> Person (LastName <span class="hljs-keyword">DESC</span>) <br><span class="hljs-comment">-- 索引多个列：逗号隔开多列</span><br><span class="hljs-keyword">CREATE</span> INDEX Index_Pers<br><span class="hljs-keyword">ON</span> Person (LastName, FirstName)<br></code></pre></td></tr></table></figure><h3 id="2-4、创建视图-VIEW"><a href="#2-4、创建视图-VIEW" class="headerlink" title="2.4、创建视图(VIEW)"></a>2.4、创建视图(VIEW)</h3><p>视图是基于 SQL 语句的结果集的可视化的表。视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，我们也可以提交数据，就像这些来自于某个单一的表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_name <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建立一个包括 First_Name， Last_Name，和 Country 这三个栏位的视图</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_Customer<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> First_Name, Last_Name, Country<br><span class="hljs-keyword">FROM</span> Customer;<br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li><p>数据库的设计和结构不会受到视图中的函数、where 或 join 语句的影响。</p></li><li><p>视图总是显示最近的数据。每当用户查询视图时，数据库引擎通过使用 SQL 语句来重建数据</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基本原理及基础指令</title>
    <link href="/2023/11/16/Git/Git%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/11/16/Git/Git%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="一、GIT工作原理"><a href="#一、GIT工作原理" class="headerlink" title="一、GIT工作原理"></a>一、GIT工作原理</h2><h3 id="1、工作流程图"><a href="#1、工作流程图" class="headerlink" title="1、工作流程图"></a>1、工作流程图</h3><p>一般工作流程如下：</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源（本地工作目录）上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><p><img src="https://codestar.top/note-image/image-20210901215459286.png" alt="image-20210901215459286"></p><h3 id="2、内部结构图"><a href="#2、内部结构图" class="headerlink" title="2、内部结构图"></a>2、内部结构图</h3><ul><li>左侧为<strong>工作区</strong></li><li>右侧为<strong>版本库</strong></li><li>版本库中标记为 “index” 的区域是<strong>暂存区</strong>（stage&#x2F;index）</li><li>标记为 “master” 的是 <strong>master 分支所代表的目录树</strong>（远程端）</li></ul><p><img src="https://codestar.top/note-image/git%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="git工作原理"></p><p><img src="https://codestar.top/note-image/image-20210901215552081.png" alt="image-20210901215552081"></p><h3 id="3、常用命令间的关系"><a href="#3、常用命令间的关系" class="headerlink" title="3、常用命令间的关系"></a>3、常用命令间的关系</h3><p><img src="https://codestar.top/note-image/image-20210901221244248.png" alt="image-20210901221244248"></p><p><strong>说明：</strong></p><ul><li>workspace：工作区</li><li>staging area：暂存区&#x2F;缓存区</li><li>local repository：版本库或本地仓库</li><li>remote repository：远程仓库</li></ul><h2 id="二、GIT基本操作"><a href="#二、GIT基本操作" class="headerlink" title="二、GIT基本操作"></a>二、GIT基本操作</h2><h3 id="1、仓库构建"><a href="#1、仓库构建" class="headerlink" title="1、仓库构建"></a>1、仓库构建</h3><p> git 创建仓库的命令：</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git init</code></td><td align="left">初始化仓库</td></tr><tr><td align="left"><code>git clone</code></td><td align="left">拷贝一份远程仓库，也就是下载一个项目。</td></tr></tbody></table><h3 id="2、提交与修改"><a href="#2、提交与修改" class="headerlink" title="2、提交与修改"></a>2、提交与修改</h3><p><strong>Git 的工作</strong>：创建、保存你的项目快照及与之后的快照进行对比。</p><p>创建与提交项目快照的命令：</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git add</code></td><td align="left">添加文件到仓库</td></tr><tr><td align="left"><code>git status</code></td><td align="left">查看仓库当前的状态，显示有变更的文件。</td></tr><tr><td align="left"><code>git diff</code></td><td align="left">比较文件的不同，即暂存区和工作区的差异。</td></tr><tr><td align="left"><code>git commit</code></td><td align="left">提交暂存区到本地仓库。</td></tr><tr><td align="left"><code>git reset</code></td><td align="left">回退版本。</td></tr><tr><td align="left"><code>git rm</code></td><td align="left">删除工作区文件。</td></tr><tr><td align="left"><code>git mv</code></td><td align="left">移动或重命名工作区文件。</td></tr></tbody></table><h3 id="3、日志查看"><a href="#3、日志查看" class="headerlink" title="3、日志查看"></a>3、日志查看</h3><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git log</code></td><td align="left">查看历史提交记录</td></tr><tr><td align="left"><code>git blame &lt;file&gt;</code></td><td align="left">以列表形式查看指定文件的历史修改记录</td></tr></tbody></table><h3 id="4、远程操作"><a href="#4、远程操作" class="headerlink" title="4、远程操作"></a>4、远程操作</h3><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git remote</code></td><td align="left">远程仓库操作</td></tr><tr><td align="left"><code>git fetch</code></td><td align="left">从远程获取代码库</td></tr><tr><td align="left"><code>git pull</code></td><td align="left">下载远程代码并合并</td></tr><tr><td align="left"><code>git push</code></td><td align="left">上传远程代码并合并</td></tr></tbody></table><h2 id="三、GIT分支管理"><a href="#三、GIT分支管理" class="headerlink" title="三、GIT分支管理"></a>三、GIT分支管理</h2><p><strong>分支模型</strong>：优势，可通过建立额外分支独立出主线开发，且不影响主线的同时继续工作。</p><p><strong>创建分支命令：</strong>没有参数时，git branch会列出你在本地的分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch (branchname)</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当前分支为master分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch</span><br>* master<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当前可用分支两个，当前分支为<span class="hljs-built_in">test</span></span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch <span class="hljs-built_in">test</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch</span><br>  master<br>* test<br></code></pre></td></tr></table></figure><p><strong>切换分支命令:</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">git checkout <span class="hljs-comment">(branchname)</span><br></code></pre></td></tr></table></figure><p><strong>合并分支命令:</strong></p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitee连接指导</title>
    <link href="/2023/11/16/Git/Gitee%E8%BF%9E%E6%8E%A5%E6%8C%87%E5%AF%BC/"/>
    <url>/2023/11/16/Git/Gitee%E8%BF%9E%E6%8E%A5%E6%8C%87%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="1、git生成公钥"><a href="#1、git生成公钥" class="headerlink" title="1、git生成公钥"></a>1、git生成公钥</h2><p>打开ssh bash面板，执行以下命令生成公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">-t 公钥名称， -C 指定生成sshkey的名称</span><br>ssh-keygen -t ed25519 -C &quot;xxxxx@xxxxx.com&quot;  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Generating public/private ed25519 key pair...</span><br></code></pre></td></tr></table></figure><p>三次回车之后，结果如下：</p><p><img src="https://codestar.top/note-image/image-20211108112736481.png" alt="image-20211108112736481"></p><p>公钥生成结束，存放位置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">路径</span><br>~/.ssh/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">公钥</span><br>~/.ssh/id_ed25519.pub<br><span class="hljs-meta prompt_"># </span><span class="language-bash">私钥</span><br>~/.ssh/id_ed25519<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20211108113003666.png" alt="image-20211108113003666"></p><h2 id="2、gitee添加公钥"><a href="#2、gitee添加公钥" class="headerlink" title="2、gitee添加公钥"></a>2、gitee添加公钥</h2><p>查看生成的公钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat ~/.ssh/id_ed25519.pub<br></code></pre></td></tr></table></figure><p>复制生成的公钥，所有内容。进入gitee：通过仓库主页 <strong>「管理」-&gt;「部署公钥管理」-&gt;「添加部署公钥」</strong> ，添加生成的 public key 添加到仓库中。</p><p><img src="https://codestar.top/note-image/image-20211108113326138.png" alt="image-20211108113326138"></p><p>添加完成，本地确认：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@gitee.com<br></code></pre></td></tr></table></figure><p>首次使用需要确认并添加主机到本机SSH可信列表。若返回 <code>Hi XXX! You&#39;ve successfully authenticated, but Gitee.com does not provide shell access.</code> 内容，则证明添加成功。</p><p>首次：</p><p><img src="https://codestar.top/note-image/image-20211108113630718.png" alt="image-20211108113630718"></p><p>非首次：</p><p><img src="https://codestar.top/note-image/image-20211108113644310.png" alt="image-20211108113644310"></p><h2 id="3、基本配置"><a href="#3、基本配置" class="headerlink" title="3、基本配置"></a>3、基本配置</h2><h3 id="3-1、配置全局账户"><a href="#3-1、配置全局账户" class="headerlink" title="3.1、配置全局账户"></a>3.1、配置全局账户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局用户</span><br>git config --global user.name &quot;miniboy&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">全局邮箱</span><br>git config --global user.email example@example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看配置</span><br>git config --list<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20211108114925163.png" alt="image-20211108114925163"></p><p>如果用了 <strong>–global</strong> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p><p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git&#x2F;config 文件里。</p><h3 id="3-2、文本编辑器"><a href="#3-2、文本编辑器" class="headerlink" title="3.2、文本编辑器"></a>3.2、文本编辑器</h3><p>设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">$ git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global core.editor emacs</span><br></code></pre></td></tr></table></figure><h3 id="3-3、差异分析工具"><a href="#3-3、差异分析工具" class="headerlink" title="3.3、差异分析工具"></a>3.3、差异分析工具</h3><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">$ git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global merge.tool vimdiff</span><br></code></pre></td></tr></table></figure><p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。也可以指定使用自己开发的工具，自定义方法，另外有机会介绍。</p><h3 id="3-4、查看配置信息"><a href="#3-4、查看配置信息" class="headerlink" title="3.4、查看配置信息"></a>3.4、查看配置信息</h3><p>要检查已有的配置信息，可以使用 git config –list 命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ git<span class="hljs-built_in"> config </span>--list<br>http.<span class="hljs-attribute">postbuffer</span>=2M<br>user.<span class="hljs-attribute">name</span>=runoob<br>user.<span class="hljs-attribute">email</span>=test@runoob.com<br></code></pre></td></tr></table></figure><p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 &#x2F;etc&#x2F;gitconfig 和 ~&#x2F;.gitconfig），不过最终 Git 实际采用的是最后一个。</p><p>这些配置我们也可以在 <strong>~&#x2F;.gitconfig</strong> 或 <strong>&#x2F;etc&#x2F;gitconfig</strong> 看到，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.gitconfig <br></code></pre></td></tr></table></figure><p>显示内容如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[http]</span><br>    <span class="hljs-attr">postBuffer</span> = <span class="hljs-number">2</span>M<br><span class="hljs-section">[user]</span><br>    <span class="hljs-attr">name</span> = runoob<br>    <span class="hljs-attr">email</span> = test@runoob.com<br></code></pre></td></tr></table></figure><p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ git config <span class="hljs-keyword">user</span>.name<br>runoob<br></code></pre></td></tr></table></figure><h2 id="4、登录账户"><a href="#4、登录账户" class="headerlink" title="4、登录账户"></a>4、登录账户</h2><p>首次push代码会出现账号密码输入框。</p><p>输入用户名和账号正常登陆gitee即可。</p><h2 id="5、本地建立工作区"><a href="#5、本地建立工作区" class="headerlink" title="5、本地建立工作区"></a>5、本地建立工作区</h2><h3 id="5-1、初始化当前文件夹"><a href="#5-1、初始化当前文件夹" class="headerlink" title="5.1、初始化当前文件夹"></a>5.1、初始化当前文件夹</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">移动到当前文件夹</span><br>cd /d/GitRepositories/repo1/big-data-notes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化文件夹</span><br>git init<br></code></pre></td></tr></table></figure><p>初始化后的结果：</p><p><img src="https://codestar.top/note-image/image-20211108114126189.png" alt="image-20211108114126189"></p><h3 id="5-2、克隆代码库"><a href="#5-2、克隆代码库" class="headerlink" title="5.2、克隆代码库"></a>5.2、克隆代码库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">克隆仓库</span><br>git clone https://gitee.com/codergzq/my-test-code.git<br></code></pre></td></tr></table></figure><p>完成克隆之后，进入对应工作目录，查看远程仓库。</p><p><img src="https://codestar.top/note-image/image-20211108114714627.png" alt="image-20211108114714627"></p><p>至此，已完成配置，后续可进行分支、仓库的各种管理操作。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitKraken代码基本操作指导</title>
    <link href="/2023/11/16/Git/GitKraken%E4%BB%A3%E7%A0%81%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E6%8C%87%E5%AF%BC/"/>
    <url>/2023/11/16/Git/GitKraken%E4%BB%A3%E7%A0%81%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E6%8C%87%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="1、克隆仓库"><a href="#1、克隆仓库" class="headerlink" title="1、克隆仓库"></a>1、克隆仓库</h2><h3 id="1-1、基本步骤"><a href="#1-1、基本步骤" class="headerlink" title="1.1、基本步骤"></a>1.1、基本步骤</h3><p>点击“+”号打开新的页签New Tab，选择Clone a repo：</p><p><img src="https://codestar.top/note-image/image-20230804113914069.png" alt="image-20230804113914069"></p><p>选定本地一个文件夹，并填入<strong>仓库的url地址</strong>，点击<strong>“Clone the repo!”</strong>即可：</p><p><img src="https://codestar.top/note-image/image-20230804114055398.png" alt="image-20230804114055398"></p><p><strong>&#x3D;&#x3D;注：&#x3D;&#x3D;<strong>需要选取的文件夹必须为</strong>空文件夹</strong>，否则会clone失败或覆盖掉本地文件。</p><p><strong>仓库url获取</strong>：Gitee及GitHub所在的位置如下，看到后直接复制即可：</p><p><img src="https://codestar.top/note-image/image-20230804114708827.png" alt="image-20230804114708827"></p><p><img src="https://codestar.top/note-image/image-20230804114825383.png" alt="image-20230804114825383"></p><p><strong>&#x3D;&#x3D;注：&#x3D;&#x3D;</strong></p><ul><li><p>除去第一个“Clone with URL”选项，其他选项均为<strong>登录账户使用</strong>或<strong>升级付费使用</strong>。</p></li><li><p>克隆的仓库<strong>若为私有库</strong>，<strong>会弹出账号密码弹窗，输入对应平台的账号密码</strong>，点击<strong>login</strong>即可：</p></li><li><p>公有库则无需密码，直接可以克隆成功</p></li></ul><p>出现此弹窗，即为成功，“Open Now”打开克隆下来的仓库，之后便可以进行代码提交及修改更新等操作了。</p><p><img src="https://codestar.top/note-image/image-20230804120452869.png" alt="image-20230804120452869"></p><h3 id="1-2、克隆仓库示例"><a href="#1-2、克隆仓库示例" class="headerlink" title="1.2、克隆仓库示例"></a>1.2、克隆仓库示例</h3><p>此处以<strong>GitHub中的uiautomator2仓库</strong>为例，拷贝仓库地址：</p><p><img src="https://codestar.top/note-image/image-20230804120758174.png" alt="image-20230804120758174"></p><p>选中空文件夹，并填入仓库url地址，点击”Clone the repo!”：</p><p><img src="https://codestar.top/note-image/image-20230804120936267.png" alt="image-20230804120936267"></p><p>存在一个进度条，等待clone完成</p><p><img src="https://codestar.top/note-image/image-20230804120959602.png" alt="image-20230804120959602"></p><p>克隆成功：</p><p><img src="https://codestar.top/note-image/image-20230804121026018.png" alt="image-20230804121026018"></p><h2 id="2、拉取更新"><a href="#2、拉取更新" class="headerlink" title="2、拉取更新"></a>2、拉取更新</h2><p>进入仓库后，点击pull拉取最新代码，<strong>默认为master分支</strong>：</p><p><img src="https://codestar.top/note-image/image-20230804121455762.png" alt="image-20230804121455762"></p><p>如要切换分支，点击branch，填入对应仓库中存在的分支名称即可切换：</p><p><img src="https://codestar.top/note-image/image-20230804121633576.png" alt="image-20230804121633576"></p><h2 id="3、提交修改"><a href="#3、提交修改" class="headerlink" title="3、提交修改"></a>3、提交修改</h2><h3 id="3-1、流程示意图"><a href="#3-1、流程示意图" class="headerlink" title="3.1、流程示意图"></a>3.1、流程示意图</h3><p><strong>Local WorkSpace  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Staging Area  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Local Repository  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Remote Repository</strong></p><p><img src="https://codestar.top/note-image/image-20230804142305001.png" alt="image-20230804142305001"></p><h3 id="3-2、修改文件"><a href="#3-2、修改文件" class="headerlink" title="3.2、修改文件"></a>3.2、修改文件</h3><p>修改库中任意文件，以图中文件示例，修改之后会存在一个差异点，表明本地文件与remote端不一致，有新内容可提交：</p><p><img src="https://codestar.top/note-image/image-20230804141940766.png" alt="image-20230804141940766"></p><h3 id="3-3、Stage文件"><a href="#3-3、Stage文件" class="headerlink" title="3.3、Stage文件"></a>3.3、Stage文件</h3><p>填入提交意见之后，点击“Stage all changes”将文件存入Staging Area：</p><p><img src="https://codestar.top/note-image/image-20230804142649118.png" alt="image-20230804142649118"></p><p>之后在<strong>Staged Files</strong>会查看到刚才stage的文件，之后修改意见同步展示，如果需要回退修改，可以点击此区域的“Unstage all changes”按钮：</p><p><img src="https://codestar.top/note-image/image-20230804142954207.png" alt="image-20230804142954207"></p><h3 id="3-4、commit文件"><a href="#3-4、commit文件" class="headerlink" title="3.4、commit文件"></a>3.4、commit文件</h3><p>在文件已经存入Staging Area后，点击“Commit changes to 1 file”将文件存入本地仓库（Local Repository），此时本地仓库进度会更新：</p><p><img src="https://codestar.top/note-image/image-20230804143641805.png" alt="image-20230804143641805"></p><h2 id="4、更新remote仓库"><a href="#4、更新remote仓库" class="headerlink" title="4、更新remote仓库"></a>4、更新remote仓库</h2><p>在所有的修改已经提交到 Local Repository 后，点击push更新remote端仓库文件：</p><p><img src="https://codestar.top/note-image/image-20230804143847499.png" alt="image-20230804143847499"></p><p>push完成之后，两者的进度会再次保持一致：</p><p><img src="https://codestar.top/note-image/image-20230804143954473.png" alt="image-20230804143954473"></p><p>至此，1次代码修改提交的流程完成。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Gitkraken</tag>
      
      <tag>Git可视化工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git可视化工具 Gitkraken安装过程指南</title>
    <link href="/2023/11/16/Git/Git%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7-Gitkraken%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E6%8C%87%E5%8D%97/"/>
    <url>/2023/11/16/Git/Git%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7-Gitkraken%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="1、软件下载"><a href="#1、软件下载" class="headerlink" title="1、软件下载"></a>1、软件下载</h2><p>Gitkraken最后一个免费版本为：6.5.1。后续的新版本本地私有库打开都为<strong>收费功能</strong>。</p><p>可用的下载链接：</p><table><thead><tr><th>平台</th><th>文件名</th><th>下载链接</th></tr></thead><tbody><tr><td>win-x86</td><td>GitKrakenSetup-6.5.1-x86.exe</td><td><a href="https://ihawo.liner.fun/usr/uploads/2020/09/700118875.exe">下载</a></td></tr><tr><td>win-x64</td><td>GitKrakenSetup-6.5.1-x64.exe</td><td><a href="https://ihawo.liner.fun/usr/uploads/2020/09/2110903104.exe">下载</a></td></tr><tr><td>linux-rpm</td><td>GitKraken-v6.5.1.rpm</td><td><a href="https://ihawo.liner.fun/usr/uploads/2020/09/3454936649.rpm">下载</a></td></tr><tr><td>linux-deb</td><td>GitKraken-v6.5.1.deb</td><td><a href="https://ihawo.liner.fun/usr/uploads/2020/09/3894812982.deb">下载</a></td></tr><tr><td>linux-tar.gz</td><td>GitKraken-v6.5.1.tar.gz</td><td><a href="https://ihawo.liner.fun/usr/uploads/2020/09/12847260.gz">下载</a></td></tr><tr><td>mac</td><td>GitKraken-v6.5.1.zip</td><td><a href="https://ihawo.liner.fun/usr/uploads/2020/09/2065013024.zip">下载</a></td></tr></tbody></table><p>下载对应版本后，直接双击文件安装即可。</p><p>想下载新版本的可以去官网下载，最新版本为9.0.1</p><p><a href="https://www.gitkraken.com/download">https://www.gitkraken.com/download</a></p><p>订阅费用$4.95&#x2F;用户&#x2F;月。</p><h2 id="2、屏蔽自动更新"><a href="#2、屏蔽自动更新" class="headerlink" title="2、屏蔽自动更新"></a>2、屏蔽自动更新</h2><h3 id="2-1、host文件屏蔽更新"><a href="#2-1、host文件屏蔽更新" class="headerlink" title="2.1、host文件屏蔽更新"></a>2.1、host文件屏蔽更新</h3><p>修改hosts文件，当连接到以下域名时首先会从hosts文件中索引，将其设备本机地址进行屏蔽：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Windows\System32\drivers\etc\hosts<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加以下内容</span><br>0.0.0.0 release.gitkraken.com<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230606173130627.png" alt="image-20230606173130627"></p><h3 id="2-1、删除更新程序"><a href="#2-1、删除更新程序" class="headerlink" title="2.1、删除更新程序"></a>2.1、删除更新程序</h3><p>程序所在路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\&lt;你的用户名&gt;\AppData\Local\gitkraken<br></code></pre></td></tr></table></figure><p>删除Update.exe程序</p><h2 id="3、启动应用"><a href="#3、启动应用" class="headerlink" title="3、启动应用"></a>3、启动应用</h2><p>正常启动会出现这个页面：</p><p><img src="https://codestar.top/note-image/image-20230113173027315.png" alt="image-20230113173027315"></p><p>支持两种账号登陆：GitHub账号、Gitkraken账户：</p><p><img src="https://codestar.top/note-image/image-20230113173121550.png" alt="image-20230113173121550"></p><p>首次打开无法绕过上面的弹窗，关闭软件，重新打开右上角会出现<strong>X</strong>关闭按钮：</p><p><img src="https://codestar.top/note-image/image-20230803180308957.png" alt="image-20230803180308957"></p><p>关闭弹窗之后，后面软件就可以正常的使用了。</p><p>页面右下角有一个激活日期，不用管它，清零后也不影响使用：</p><p><img src="https://codestar.top/note-image/image-20230803180436879.png" alt="image-20230803180436879"></p><p>注：由于在<a href="###2.1host%E6%96%87%E4%BB%B6%E5%B1%8F%E8%94%BD%E6%9B%B4%E6%96%B0">2.1host文件屏蔽更新</a>节中屏蔽了对应的域名，不建议登录账户，直接免登录使用即可，需要拉库直接clone即可。</p><p>参考文章：</p><p><a href="https://blog.csdn.net/weixin_43335226/article/details/107091568">https://blog.csdn.net/weixin_43335226/article/details/107091568</a></p><p><a href="https://zhuanlan.zhihu.com/p/98960725">https://zhuanlan.zhihu.com/p/98960725</a></p><p><a href="https://www.zhihu.com/tardis/zm/art/98960725?source_id=1005">https://www.zhihu.com/tardis/zm/art/98960725?source_id=1005</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Gitkraken</tag>
      
      <tag>Git可视化工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM笔记1：了解大模型的历史及特点</title>
    <link href="/2023/11/15/AI_ML/DatawhaleLearn/LLM%E7%AC%94%E8%AE%B01%EF%BC%9A%E4%BA%86%E8%A7%A3%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8E%86%E5%8F%B2%E5%8F%8A%E7%89%B9%E7%82%B9/"/>
    <url>/2023/11/15/AI_ML/DatawhaleLearn/LLM%E7%AC%94%E8%AE%B01%EF%BC%9A%E4%BA%86%E8%A7%A3%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8E%86%E5%8F%B2%E5%8F%8A%E7%89%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><h3 id="1-1、词义解惑"><a href="#1-1、词义解惑" class="headerlink" title="1.1、词义解惑"></a>1.1、词义解惑</h3><p>部分专业名词缩略词表：</p><table><thead><tr><th>缩写</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>LLM</td><td>Large Language Model</td><td>大语言模型：参数量达到10亿级别以上的(不同领域定义会存在偏差)</td></tr><tr><td>PLM</td><td>Pre-trained Language Model</td><td>预训练语言模型：这种模型是在大规模文本数据上进行预训练，然后可以通过微调或其他技术来适应特定的自然语言处理任务。常见的PLM包括BERT、GPT等。</td></tr><tr><td>AGI</td><td>Artificial General Intelligence</td><td>通用人工智能</td></tr></tbody></table><h3 id="1-2、关于大模型LLM的认识"><a href="#1-2、关于大模型LLM的认识" class="headerlink" title="1.2、关于大模型LLM的认识"></a>1.2、关于大模型LLM的认识</h3><p>​现如今LLM（大语言模型）发展迅速，在各种应用领域都有不错的应用效果，如在<strong>自然语言处理</strong>领域，LLM可以帮助计算机更好地理解和生成文本，包括写文章、回答问题、翻译语言等。在<strong>信息检索</strong>领域，它可以改进搜索引擎，让我们更轻松地找到所需的信息。在<strong>计算机视觉</strong>领域，研究人员还在努力让计算机理解图像和文字，以改善多媒体交互。下面来了解一下语言模型的发展历程。</p><h2 id="2、语言模型发展简史"><a href="#2、语言模型发展简史" class="headerlink" title="2、语言模型发展简史"></a>2、语言模型发展简史</h2><p>梳理的一张发展简图：</p><p><img src="https://codestar.top/note-image/image-20231115014623579.png" alt="image-20231115014623579"></p><p>参考：<a href="https://datawhalechina.github.io/llm-universe/#/C1/1.%20%E4%BB%80%E4%B9%88%E6%98%AF%E2%BC%A4%E6%A8%A1%E5%9E%8B">https://datawhalechina.github.io/llm-universe/#/C1/1.%20%E4%BB%80%E4%B9%88%E6%98%AF%E2%BC%A4%E6%A8%A1%E5%9E%8B</a></p><h2 id="3、国内外的LLM发展"><a href="#3、国内外的LLM发展" class="headerlink" title="3、国内外的LLM发展"></a>3、国内外的LLM发展</h2><h3 id="3-1、大模型的发展"><a href="#3-1、大模型的发展" class="headerlink" title="3.1、大模型的发展"></a>3.1、大模型的发展</h3><p>2019年大模型开始进入爆发式发展，至今在各大科技公司或研究机构已有非常多的LLM落地实现。下面是按时间线【2019年 - 2023年 6月】列出的LLM发展轨迹，其中仅包含模型参数量超100亿的大模型，如下图所示：</p><p><img src="https://codestar.top/note-image/LLMs-0623-final.png" alt="大语言模型"></p><p>图来源于：<a href="https://arxiv.org/abs/23018223">https://arxiv.org/abs/23018223</a></p><h3 id="3-2、国外代表性LLM大模型"><a href="#3-2、国外代表性LLM大模型" class="headerlink" title="3.2、国外代表性LLM大模型"></a>3.2、国外代表性LLM大模型</h3><h4 id="3-2-1、开源模型"><a href="#3-2-1、开源模型" class="headerlink" title="3.2.1、开源模型"></a>3.2.1、开源模型</h4><table><thead><tr><th align="left">LLM名称</th><th align="left">参数量</th><th align="left">上下文长度</th><th align="left">发布厂商&#x2F;研究机构</th><th align="left">开源地址</th></tr></thead><tbody><tr><td align="left">LLaMA系列</td><td align="left">70亿-650亿</td><td align="left">32k-256k</td><td align="left">Meta</td><td align="left"><a href="https://github.com/facebookresearch/llama">https://github.com/facebookresearch/llama</a></td></tr></tbody></table><h4 id="3-2-2、闭源模型"><a href="#3-2-2、闭源模型" class="headerlink" title="3.2.2、闭源模型"></a>3.2.2、闭源模型</h4><p>国外现如今的LLM发展很迅速，在继OpenAI发布ChatGPT之后，各大厂商纷纷推出自己的大语言模型，具有代表性的LLM如下：</p><table><thead><tr><th align="left">LLM名称</th><th align="left">参数量</th><th align="left">上下文长度</th><th align="left">发布厂商&#x2F;研究机构</th><th align="left">发布时间</th><th align="left">学习知识库截止日期</th></tr></thead><tbody><tr><td align="left">GPT-4 Turbo</td><td align="left">未公布</td><td align="left">128k</td><td align="left">OpenAI</td><td align="left">2023 年 11 月 7 日</td><td align="left">2023 年 4 月</td></tr><tr><td align="left">GPT-4</td><td align="left">1.8 万亿（猜测）</td><td align="left">未公布</td><td align="left">OpenAI</td><td align="left">2023 年 3月</td><td align="left">2021 年 9 月</td></tr><tr><td align="left">GPT-3.5</td><td align="left">1750亿</td><td align="left">16k</td><td align="left">OpenAI</td><td align="left">2023 年 3月</td><td align="left">2021 年 9 月</td></tr><tr><td align="left">Claude 2</td><td align="left">860.1 亿(猜测)</td><td align="left">200K</td><td align="left">Anthropic 公司</td><td align="left">2023 年 7 月 11 日</td><td align="left">2022 年 11 月</td></tr><tr><td align="left">Claude</td><td align="left">62亿</td><td align="left">100K</td><td align="left">Anthropic 公司</td><td align="left">2023 年 3 月 15 日</td><td align="left">2022 年 3 月</td></tr><tr><td align="left">PaLM 2</td><td align="left">34亿</td><td align="left">未公布</td><td align="left">Google</td><td align="left">2022 年 5 月</td><td align="left">未公布</td></tr></tbody></table><h3 id="3-3、国内代表性LLM大模型"><a href="#3-3、国内代表性LLM大模型" class="headerlink" title="3.3、国内代表性LLM大模型"></a>3.3、国内代表性LLM大模型</h3><h4 id="3-3-1、开源模型"><a href="#3-3-1、开源模型" class="headerlink" title="3.3.1、开源模型"></a>3.3.1、开源模型</h4><table><thead><tr><th align="left">LLM名称</th><th align="left">参数量</th><th align="left">上下文长度</th><th align="left">发布厂商&#x2F;研究机构</th><th align="left">开源地址</th></tr></thead><tbody><tr><td align="left">GLM系列</td><td align="left">62 亿</td><td align="left">2k</td><td align="left">清华大学&amp;智谱 AI</td><td align="left"><a href="https://github.com/THUDM">https://github.com/THUDM</a></td></tr><tr><td align="left">通义千问（Qwen）</td><td align="left">70亿(7B)&amp;140亿(7B)</td><td align="left">8k</td><td align="left">阿里巴巴</td><td align="left"><a href="https://github.com/QwenLM/Qwen/tree/main">https://github.com/QwenLM/Qwen/tree/main</a></td></tr><tr><td align="left">Baichuan系列</td><td align="left">70 亿</td><td align="left">4k</td><td align="left">百川智能</td><td align="left"><a href="https://github.com/baichuan-inc">https://github.com/baichuan-inc</a></td></tr><tr><td align="left">Yi</td><td align="left">60亿&amp;340亿</td><td align="left">200k</td><td align="left">零一万物</td><td align="left"><a href="https://github.com/01-ai/Yi">https://github.com/01-ai/Yi</a></td></tr></tbody></table><h4 id="3-3-2、闭源模型"><a href="#3-3-2、闭源模型" class="headerlink" title="3.3.2、闭源模型"></a>3.3.2、闭源模型</h4><table><thead><tr><th align="left">LLM名称</th><th align="left">参数量</th><th align="left">上下文长度</th><th align="left">发布厂商&#x2F;研究机构</th><th align="left">发布时间</th><th align="left">学习知识库截止日期</th></tr></thead><tbody><tr><td align="left">文心一言（4.0）</td><td align="left">2600 亿</td><td align="left">未公布</td><td align="left">百度</td><td align="left">2023 年 3 月</td><td align="left">未公布</td></tr><tr><td align="left">星火大模型</td><td align="left">1700 亿</td><td align="left">未公布</td><td align="left">科大讯飞</td><td align="left">2023 年 5 月 6 日</td><td align="left">未公布</td></tr></tbody></table><h2 id="4、LLM可能的应用场景"><a href="#4、LLM可能的应用场景" class="headerlink" title="4、LLM可能的应用场景"></a>4、LLM可能的应用场景</h2><p>​目前在LLM方面的应用，最多的便是Chat机器人，通过与人类对话的形式，理解人类指令和执行各种复杂任务。这一形式，大大的扩展了人们的想象空间，基于LLM的能力，可以让其充当各种角色来与自己对话，并可作为一个领域专家来回答或解决自己所提出的问题，当然目前这种对话形式以文字较多，后续会逐渐扩展到其他各种输入类型，如视频、语音、图像等等内容，并且在多模态领域也已有各种相对成熟的模型来调用，如<strong>GPT-4与DALL·E 3</strong>的联合，扩展了ChatGPT在图像生成方面的能力，未来的应用范围必定会非常的广泛。</p><h2 id="5、我们如何利用LLM构建应用？"><a href="#5、我们如何利用LLM构建应用？" class="headerlink" title="5、我们如何利用LLM构建应用？"></a>5、我们如何利用LLM构建应用？</h2><h3 id="5-1、思考"><a href="#5-1、思考" class="headerlink" title="5.1、思考"></a>5.1、思考</h3><p>​在上述介绍了非常多的大语言模型，各有千秋，那么除了使用原生的Chat应用，我们还能够使用它们来做什么？目前大模型能够执行各种任务，代码编写、求解数学问题、写作建议、图像生成、摘要总结、搜索信息等等。那么这些能力，我们是否可以通过这些惊奇的能力来拓展应用的使用场景或者自定义应用的能力，那么我们如何来通过LLM来构建出我们自己的应用？在这个问题上，目前已经有了一个相对稳定的一个开发框架——<a href="https://www.langchain.com/">LangChain</a>。LangChain为开源工具，</p><p>为了将大模型整条链路能够部署在端侧，即部署为应用，这个工具实现了将整个链路连接在一起，可以更便捷的开发上层应用，在制作自己专属的LLM应用上更为的简单。</p><h3 id="5-2、LangChain"><a href="#5-2、LangChain" class="headerlink" title="5.2、LangChain"></a>5.2、LangChain</h3><p>​LangChain是一个用于开发由语言模型驱动的应用程序的框架，可以将不同的LLM模型、向量数据库、交互层 Prompt、外部知识、外部代理工具等工具前部整合到一起，进而方便我们可以自由构建专属LLM应用。</p><ul><li><p>相关资源：</p><blockquote><p>Langchain官网：<a href="https://www.langchain.com/">https://www.langchain.com/</a></p><p>中文官方文档：<a href="https://www.langchain.asia/">https://www.langchain.asia/</a></p><p>官方仓库：<a href="https://github.com/langchain-ai/langchain">https://github.com/langchain-ai/langchain</a></p></blockquote></li></ul><p>​框架由几个部分组成：</p><ul><li><p>LangChain 库：</p><blockquote><p> Python 和 JavaScript 库。包含无数组件的接口和集成，将这些组件组合成链和代理的基本运行时，以及链和代理的现成实现</p></blockquote></li><li><p>LangChain模板：</p><blockquote><p>一组易于部署的参考架构，适用于各种任务</p></blockquote></li><li><p>LangServe：</p><blockquote><p>用于将LangChain链部署为REST API的库</p></blockquote></li><li><p>LangSmith：</p><blockquote><p> 开发者平台，可调试、测试、评估和监控基于任何LLM框架构建的链，并与LangChain无缝集成</p></blockquote></li></ul><p>基本的结构图如下：</p><p><img src="https://codestar.top/note-image/image-20231115011536625.png" alt="image-20231115011536625"></p><p>参考：</p><p>1）<a href="https://python.langchain.com/docs/get_started/introduction">https://python.langchain.com/docs/get_started/introduction</a></p><p>2）<a href="https://datawhalechina.github.io/llm-universe/#/C1/4.%20%E4%BB%80%E4%B9%88%E6%98%AF%20LangChain">https://datawhalechina.github.io/llm-universe/#/C1/4.%20%E4%BB%80%E4%B9%88%E6%98%AF%20LangChain</a></p>]]></content>
    
    
    <categories>
      
      <category>AI&amp;ML</category>
      
      <category>LLM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datawhale</tag>
      
      <tag>LLM</tag>
      
      <tag>AI&amp;ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索引擎技术及使用技巧</title>
    <link href="/2023/11/07/Skills/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/11/07/Skills/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%8A%80%E6%9C%AF%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="1、搜索引擎概论"><a href="#1、搜索引擎概论" class="headerlink" title="1、搜索引擎概论"></a>1、搜索引擎概论</h2><p>搜索引擎的本质是在一堆建立好索引的网页中，按照查询的条件查询指定的内容，可以理解为是一个大规模的网页数据库。因为这个原因，当一个网站页面地址未提交到对应的搜索引擎的“网页数据库”中，那么我们就无法通过这个搜索引擎查询到对应的页面内容。我们现在常用的一些搜索引擎，像Google、Baidu、Bing、Sogou背后都存储着各自的”大型网页数据库”。按照这个原理，我们就能够按照指定的搜索格式，来优化我们的搜索技巧，而不是只是单纯的按照直接输入关键字来查找结果。</p><h2 id="2、搜索引擎技巧"><a href="#2、搜索引擎技巧" class="headerlink" title="2、搜索引擎技巧"></a>2、搜索引擎技巧</h2><h3 id="2-1、准确搜索"><a href="#2-1、准确搜索" class="headerlink" title="2.1、准确搜索"></a>2.1、准确搜索</h3><p>使用双引号”text”：这样搜索引擎只会返回和关键词<strong>完全吻合</strong>的搜索结果，在不加双引号的情况下,有的时候, 两个词中间加一个空格, 它会分别搜索两个词</p><p>示例：精准搜索含有“搜索引擎”关键字的网页，<strong>注意引号为英文引号</strong></p><blockquote><p>“搜索引擎”</p></blockquote><p><img src="https://codestar.top/note-image/image-20230820231242007.png" alt="image-20230820231242007"></p><h3 id="2-2、排除关键词"><a href="#2-2、排除关键词" class="headerlink" title="2.2、排除关键词"></a>2.2、排除关键词</h3><p>使用 <em>-</em> 这个减号对指定内容进行排除：</p><p>示例：查找苹果，但过滤掉与iPhone相关的内容</p><blockquote><p>苹果 -iPhone</p></blockquote><p><img src="https://codestar.top/note-image/image-20231116232810623.png" alt="image-20231116232810623"></p><p>过滤多个关键字可以叠加使用”减号”，示例：</p><blockquote><p>苹果 -iPhone -ipad</p></blockquote><p><strong>注：</strong>需要注意的是，搜索引擎会尽可能的排除特定页面中的关键字，但无法完全排除相关主题的搜索结果。</p><h3 id="2-3、用-OR-或-逻辑进行搜索"><a href="#2-3、用-OR-或-逻辑进行搜索" class="headerlink" title="2.3、用 OR (或)逻辑进行搜索"></a>2.3、用 OR (或)逻辑进行搜索</h3><p>默认搜索下, 搜索引擎会反馈所有和查询词汇相关的结果, 如果通过<em>OR</em> 搜索, 可以得到和两个关键词<strong>分别相关</strong>的结果, 而不仅仅是和两个关键词都同时相关的结果</p><p>示例：</p><blockquote><p>“baidu” or “google”</p></blockquote><h3 id="2-4、同义词搜索"><a href="#2-4、同义词搜索" class="headerlink" title="2.4、同义词搜索~"></a>2.4、同义词搜索~</h3><p>有时，搜索不太具体的术语很有用。如果您不确定将使用哪个术语，您可以使用同义词搜索。在未能准确判断关键词的情况下，你可以通过 <em>~</em> 进行同义词搜索</p><p>示例：</p><blockquote><p>浙江~大学、javascript-声波图</p></blockquote><h3 id="2-5、站内搜索"><a href="#2-5、站内搜索" class="headerlink" title="2.5、站内搜索"></a>2.5、站内搜索</h3><p>在输入框输入<em>site: 网址 关键字</em>，就会在输入的网址内进行站内关键字搜索</p><p>示例：</p><blockquote><p>site: imooc.com Google</p></blockquote><p><strong>优先展示制定站点内的搜索结果，展示完全之后会列出其他网站搜索结果：</strong></p><p><img src="https://codestar.top/note-image/image-20230820231936293.png" alt="image-20230820231936293"></p><h3 id="2-6、使用-星号替代缺失内容"><a href="#2-6、使用-星号替代缺失内容" class="headerlink" title="2.6、使用*星号替代缺失内容"></a>2.6、使用*星号替代缺失内容</h3><p>使用*星号，在特定的位置替代确实的内容</p><p>示例：</p><blockquote><p>site:quora.com *baidu</p></blockquote><p><img src="https://codestar.top/note-image/image-20230820232714938.png" alt="image-20230820232714938"></p><h3 id="2-7、使用-搜索数字范围"><a href="#2-7、使用-搜索数字范围" class="headerlink" title="2.7、使用..搜索数字范围"></a>2.7、使用<code>..</code>搜索数字范围</h3><p>使用..搜索特定范围的内容。</p><p>例如：搜索UML在2020~2023年的相关信息</p><blockquote><p>UML 2020.. 2023</p></blockquote><p>会返回两个数值之间的结果</p><p><img src="https://codestar.top/note-image/image-20230820233133301.png" alt="image-20230820233133301"></p><h3 id="2-8、在网页标题中链接搜索关键词"><a href="#2-8、在网页标题中链接搜索关键词" class="headerlink" title="2.8、在网页标题中链接搜索关键词"></a>2.8、在网页标题中链接搜索关键词</h3><p>通过intitle关键字，可以在网页链接中链接到与关键字一致的网页。</p><p><strong>示例：</strong>在网页title中，链接与“后台登录”相关的网页</p><blockquote><p>intitle 后台登录</p></blockquote><p><img src="https://codestar.top/note-image/image-20231116233609311.png" alt="image-20231116233609311"></p><h3 id="2-9、搜索相关网站"><a href="#2-9、搜索相关网站" class="headerlink" title="2.9、搜索相关网站"></a>2.9、搜索相关网站</h3><p>使用<em>related: 网址</em> 就会得到这个网址相关的结果</p><p><strong>示例：</strong></p><blockquote><p>related:github.com ~ big-data</p></blockquote><p>查找与github.com相关联的网站</p><p><img src="https://codestar.top/note-image/image-20231116231946738.png" alt="image-20231116231946738"></p><h3 id="2-10、index-of-查找特定类型页面或文件"><a href="#2-10、index-of-查找特定类型页面或文件" class="headerlink" title="2.10、index of 查找特定类型页面或文件"></a>2.10、index of 查找特定类型页面或文件</h3><p>“index of” 可以用来在搜索引擎中查找特定类型页面或文件，可以用来突破一些网站的下载限制。与第13条有点类似，但区别在于这一项搜索出的为一个特定文件的清单，而不是指定的一个文件。</p><p>示例：</p><blockquote><p>index of &#x2F;电子书</p><p>index of &#x2F;mp3</p></blockquote><p><img src="https://codestar.top/note-image/image-20231116234602381.png" alt="image-20231116234602381"></p><h3 id="2-11、and同时基于多个条件搜索"><a href="#2-11、and同时基于多个条件搜索" class="headerlink" title="2.11、and同时基于多个条件搜索"></a>2.11、and同时基于多个条件搜索</h3><p>使用and关键字，可以基于多个条件同时进行搜索</p><p><strong>示例：</strong></p><blockquote><p>inurl:login and intitle:后台登录</p></blockquote><p><img src="https://codestar.top/note-image/image-20230820235521766.png" alt="image-20230820235521766"></p><h3 id="2-12、link将查找链接到另一个指定页面"><a href="#2-12、link将查找链接到另一个指定页面" class="headerlink" title="2.12、link将查找链接到另一个指定页面"></a>2.12、link将查找链接到另一个指定页面</h3><p>通过在搜索内容中加入link，可以将搜索内容链接到一个指定的页面</p><p><strong>示例：</strong></p><blockquote><p>link:github.com</p></blockquote><p><img src="https://codestar.top/note-image/image-20231116233936812.png" alt="image-20231116233936812"></p><h3 id="2-13、针对文件类型搜索"><a href="#2-13、针对文件类型搜索" class="headerlink" title="2.13、针对文件类型搜索"></a>2.13、针对文件类型搜索</h3><p>使用filetype关键字来指定搜索到的结果中的文件类型。</p><p>示例：只查找pdf类型的文档</p><blockquote><p>filetype:PDF you don’t know JavaScript</p></blockquote><p><img src="https://codestar.top/note-image/image-20230820235922393.png" alt="image-20230820235922393"></p><p>Google所支持的索引文件类型可以参考官方：<a href="https://developers.google.com/search/docs/crawling-indexing/indexable-file-types?hl=zh-cn">https://developers.google.com/search/docs/crawling-indexing/indexable-file-types?hl=zh-cn</a></p><p>截个图~</p><p><img src="https://codestar.top/note-image/image-20231116234923549.png" alt="image-20231116234923549"></p><h3 id="2-14、查找您的-IP-地址"><a href="#2-14、查找您的-IP-地址" class="headerlink" title="2.14、查找您的 IP 地址"></a>2.14、查找您的 IP 地址</h3><p>当想查询本机的公共IP地址时，可以使用<code>my ip address</code>这一条指令，搜索之后结果会显示自己的公共IP地址：</p><p><img src="https://codestar.top/note-image/image-20231116235106955.png" alt="image-20231116235106955"></p><h3 id="2-15、其他"><a href="#2-15、其他" class="headerlink" title="2.15、其他"></a>2.15、其他</h3><p>另外还有许多的搜索技巧，可以查看下面的图，截取了部分供查阅：</p><p><img src="https://codestar.top/note-image/image-20230821000940395.png" alt="image-20230821000940395"></p><p><strong>上面的搜索技巧，可以混合在一起使用，熟练运用之后，搜索功能将会变得更加强，并且更加准确，而不再是只查找一个关键字。</strong></p><p>参考文档：</p><p><a href="https://blog.csdn.net/qq_34033853/article/details/79311303">https://blog.csdn.net/qq_34033853/article/details/79311303</a></p><p><a href="https://blog.csdn.net/huang714/article/details/119914060">https://blog.csdn.net/huang714/article/details/119914060</a></p>]]></content>
    
    
    <categories>
      
      <category>搜索引擎</category>
      
      <category>Google</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搜索引擎技巧</tag>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网卡修复程序执行出现0x80004005错误代码问题解决</title>
    <link href="/2023/11/07/System/Windows/%E7%BD%91%E5%8D%A1%E4%BF%AE%E5%A4%8D%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%87%BA%E7%8E%B00x80004005%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/11/07/System/Windows/%E7%BD%91%E5%8D%A1%E4%BF%AE%E5%A4%8D%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%87%BA%E7%8E%B00x80004005%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="1、初步修复指令"><a href="#1、初步修复指令" class="headerlink" title="1、初步修复指令"></a>1、初步修复指令</h2><p>参考：<a href="https://baijiahao.baidu.com/s?id=1715556202388908891&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1715556202388908891&amp;wfr=spider&amp;for=pc</a></p><p>以管理员身份运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">regsvr32 softpub.dll<br>regsvr32 wintrust.dll<br>regsvr32 initpki.dll<br></code></pre></td></tr></table></figure><h2 id="2、regsvr32-initpki-dll执行报错问题解决"><a href="#2、regsvr32-initpki-dll执行报错问题解决" class="headerlink" title="2、regsvr32 initpki.dll执行报错问题解决"></a>2、regsvr32 initpki.dll执行报错问题解决</h2><p>参考：<a href="https://blog.csdn.net/qq_41943240/article/details/115220254">https://blog.csdn.net/qq_41943240/article/details/115220254</a></p><p>执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">arch</span> = Get-WMIObject -Class Win32_Processor -ComputerName LocalHost | Select-Object AddressWidth</span> <br>Write-Host &quot;1. Stopping Windows Update Services...&quot; <br>Stop-Service -Name BITS <br>Stop-Service -Name wuauserv <br>Stop-Service -Name appidsvc <br>Stop-Service -Name cryptsvc <br>Write-Host &quot;2. Remove QMGR Data file...&quot; <br>Remove-Item &quot;$env:allusersprofile\Application Data\Microsoft\Network\Downloader\qmgr*.dat&quot; -ErrorAction SilentlyContinue <br>Write-Host &quot;3. Renaming the Software Distribution and CatRoot Folder...&quot; <br>Rename-Item $env:systemroot\SoftwareDistribution SoftwareDistribution.bak -ErrorAction SilentlyContinue <br>Rename-Item $env:systemroot\System32\Catroot2 catroot2.bak -ErrorAction SilentlyContinue <br>Write-Host &quot;4. Removing old Windows Update log...&quot; <br>Remove-Item $env:systemroot\WindowsUpdate.log -ErrorAction SilentlyContinue <br>Write-Host &quot;5. Resetting the Windows Update Services to defualt settings...&quot; <br>&quot;sc.exe sdset bits D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;AU)(A;;CCLCSWRPWPDTLOCRRC;;;PU)&quot; <br>&quot;sc.exe sdset wuauserv D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;AU)(A;;CCLCSWRPWPDTLOCRRC;;;PU)&quot; <br>Set-Location $env:systemroot\system32 <br>Write-Host &quot;6. Registering some DLLs...&quot; <br>regsvr32.exe /s atl.dll <br>regsvr32.exe /s urlmon.dll <br>regsvr32.exe /s mshtml.dll <br>regsvr32.exe /s shdocvw.dll <br>regsvr32.exe /s browseui.dll <br>regsvr32.exe /s jscript.dll <br>regsvr32.exe /s vbscript.dll <br>regsvr32.exe /s scrrun.dll <br>regsvr32.exe /s msxml.dll <br>regsvr32.exe /s msxml3.dll <br>regsvr32.exe /s msxml6.dll <br>regsvr32.exe /s actxprxy.dll <br>regsvr32.exe /s softpub.dll <br>regsvr32.exe /s wintrust.dll <br>regsvr32.exe /s dssenh.dll <br>regsvr32.exe /s rsaenh.dll <br>regsvr32.exe /s gpkcsp.dll <br>regsvr32.exe /s sccbase.dll <br>regsvr32.exe /s slbcsp.dll <br>regsvr32.exe /s cryptdlg.dll <br>regsvr32.exe /s oleaut32.dll <br>regsvr32.exe /s ole32.dll <br>regsvr32.exe /s shell32.dll <br>regsvr32.exe /s initpki.dll <br>regsvr32.exe /s wuapi.dll <br>regsvr32.exe /s wuaueng.dll <br>regsvr32.exe /s wuaueng1.dll <br>regsvr32.exe /s wucltui.dll <br>regsvr32.exe /s wups.dll <br>regsvr32.exe /s wups2.dll <br>regsvr32.exe /s wuweb.dll <br>regsvr32.exe /s qmgr.dll <br>regsvr32.exe /s qmgrprxy.dll <br>regsvr32.exe /s wucltux.dll <br>regsvr32.exe /s muweb.dll <br>regsvr32.exe /s wuwebv.dll <br>Write-Host &quot;7) Removing WSUS client settings...&quot; <br>REG DELETE &quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate&quot; /v AccountDomainSid /f <br>REG DELETE &quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate&quot; /v PingID /f <br>REG DELETE &quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate&quot; /v SusClientId /f <br>Write-Host &quot;8) Resetting the WinSock...&quot; <br>netsh winsock reset <br>netsh winhttp reset proxy <br>Write-Host &quot;9) Delete all BITS jobs...&quot; <br>Get-BitsTransfer | Remove-BitsTransfer <br>Write-Host &quot;10) Attempting to install the Windows Update Agent...&quot; <br><span class="hljs-meta prompt_">if($</span><span class="language-bash"><span class="hljs-built_in">arch</span> -eq 64)&#123;</span> <br>wusa Windows8-RT-KB2937636-x64 /quiet <br>&#125; <br>else&#123; <br>wusa Windows8-RT-KB2937636-x86 /quiet <br>&#125; <br>Write-Host &quot;11) Starting Windows Update Services...&quot; <br>Start-Service -Name BITS <br>Start-Service -Name wuauserv <br>Start-Service -Name appidsvc <br>Start-Service -Name cryptsvc <br>Write-Host &quot;12) Forcing discovery...&quot; <br>wuauclt /resetauthorization /detectnow <br>Write-Host &quot;Process complete. Please reboot your computer.&quot; <br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221212104125540.png" alt="image-20221212104125540"></p><p><img src="https://codestar.top/note-image/image-20221212104125540.png" alt="image-20221212104125540"></p><p><img src="https://codestar.top/note-image/image-20221212104112299.png" alt="image-20221212104112299"></p><p>直接补齐对应dll文件：</p><p>参考：<a href="http://www.dllzj.com/initpki.dll/">http://www.dllzj.com/initpki.dll/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝到一下文件夹</span><br>C:\Windows\SysWOW64<br>C:\Windows\System32<br></code></pre></td></tr></table></figure><h2 id="3、换个方法–清除网卡旧配置"><a href="#3、换个方法–清除网卡旧配置" class="headerlink" title="3、换个方法–清除网卡旧配置"></a>3、换个方法–清除网卡旧配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重置网卡</span><br>netsh winsock reset catalog<br>netsh int ip reset reset.log<br></code></pre></td></tr></table></figure><p>重启系统后检查网卡配置，恢复为默认状态：</p><p><img src="https://codestar.top/note-image/image-20221212120334898.png" alt="image-20221212120334898"></p><p>删除对应子项注册表：</p><p><img src="https://codestar.top/note-image/image-20221212140333170.png" alt="image-20221212140333170"></p><h2 id="4、诊断服务开启"><a href="#4、诊断服务开启" class="headerlink" title="4、诊断服务开启"></a>4、诊断服务开启</h2><p><kbd>win</kbd>+<kbd>r</kbd>打开运行窗口，运行services.msc，进入服务面板，检查以下项是否开启：</p><p><img src="https://codestar.top/note-image/image-20221212122316122.png" alt="image-20221212122316122"></p><h2 id="5、网卡驱动重置"><a href="#5、网卡驱动重置" class="headerlink" title="5、网卡驱动重置"></a>5、网卡驱动重置</h2><p><kbd>win</kbd>+<kbd>r</kbd>打开运行窗口，输入devmgmt.msc，进入设备管理器。</p><p><img src="https://codestar.top/note-image/image-20221212122508987.png" alt="image-20221212122508987"></p><p>网络适配器，卸载对应设备：</p><p><img src="https://codestar.top/note-image/image-20221212122532652.png" alt="image-20221212122532652"></p><p>之后重新连接网卡即可：</p><p><img src="https://codestar.top/note-image/image-20221212140525730.png" alt="image-20221212140525730"></p><h2 id="6、参考方法"><a href="#6、参考方法" class="headerlink" title="6、参考方法"></a>6、参考方法</h2><p><a href="https://zhidao.baidu.com/question/2148256226206548268.html">https://zhidao.baidu.com/question/2148256226206548268.html</a></p><p><a href="https://wenku.baidu.com/view/a1cbed5fbb4ae45c3b3567ec102de2bd9705de5d.html?_wkts_=1670816062878&bdQuery=%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE%E7%9A%84%E5%86%85%E5%AE%B9%E6%B8%85%E9%99%A4">https://wenku.baidu.com/view/a1cbed5fbb4ae45c3b3567ec102de2bd9705de5d.html?_wkts_=1670816062878&amp;bdQuery=%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE%E7%9A%84%E5%86%85%E5%AE%B9%E6%B8%85%E9%99%A4</a></p><p><a href="https://www.zizhi888.cn/itbaike/31328.html">https://www.zizhi888.cn/itbaike/31328.html</a></p><p><a href="http://t.zoukankan.com/fulse-p-6276858.html">http://t.zoukankan.com/fulse-p-6276858.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>设备管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>网卡设备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins操作指导-Base1：jenkins安装</title>
    <link href="/2023/11/06/CICD/jenkins/Jenkins%E6%93%8D%E4%BD%9C%E6%8C%87%E5%AF%BC-Base1%EF%BC%9Ajenkins%E5%AE%89%E8%A3%85/"/>
    <url>/2023/11/06/CICD/jenkins/Jenkins%E6%93%8D%E4%BD%9C%E6%8C%87%E5%AF%BC-Base1%EF%BC%9Ajenkins%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="1、Java11配置安装"><a href="#1、Java11配置安装" class="headerlink" title="1、Java11配置安装"></a>1、Java11配置安装</h2><p><strong>Tips：</strong>新版Jenkins要求系统安装的Java版本至少为Java11，在安装Jenkins之前，先配置一下本地的java环境，适配新版Jenkins。</p><p>下载java11安装包：<a href="https://www.techspot.com/downloads/5553-java-jdk.html">https://www.techspot.com/downloads/5553-java-jdk.html</a></p><p>选择下面Windows类型，进入下载页面：</p><p><img src="https://codestar.top/note-image/image-20230815095841852.png" alt="image-20230815095841852"></p><p>在执行前，需要配置一下java11的环境变量：<kbd>win</kbd>+<kbd>r</kbd>打开执行面板，输入<code>sysdm.cpl</code>进入系统属性面板，切换至“高级”页签，点击环境变量：</p><p><img src="https://codestar.top/note-image/image-20230815101418996.png" alt="image-20230815101418996"></p><p>要配置的环境变量有3个，在系统变量中配置，分别是下面这几项：</p><p>1、JAVA_HOME：把java安装根路径填入</p><p><img src="https://codestar.top/note-image/image-20230815101230726.png" alt="image-20230815101230726"></p><p>2、CLASS_PATH:输入<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; </code></p><p><img src="https://codestar.top/note-image/image-20230815101629462.png" alt="image-20230815101629462"></p><p>3、path：添加可执行文件路径，填入<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code></p><p><img src="https://codestar.top/note-image/image-20230815101905409.png" alt="image-20230815101905409"></p><p>修改完了，点击确认即可。之前打开的运行面板需要关闭重新打开。</p><p>运行面板输入<code>java -version</code>，出现下面执行结果，说明配置正常。</p><p><img src="https://codestar.top/note-image/image-20230815102117537.png" alt="image-20230815102117537"></p><h2 id="2、Jenkins下载"><a href="#2、Jenkins下载" class="headerlink" title="2、Jenkins下载"></a>2、Jenkins下载</h2><p>在配置完成java环境之后，从官网下载Windows安装包，官网：<a href="https://www.jenkins.io/zh/download/">https://www.jenkins.io/zh/download/</a></p><p>选择下面的类型：</p><p><img src="https://codestar.top/note-image/image-20230815094803461.png" alt="image-20230815094803461"></p><p>下载完成之后，双击应用程序，跟随指导安装即可：</p><p>端口默认8080</p><p><img src="https://codestar.top/note-image/image-20230815095201603.png" alt="image-20230815095201603"></p><p>配置java，最新版本jenkins只支持java11或java17：</p><p><img src="https://codestar.top/note-image/image-20230815095336909.png" alt="image-20230815095336909"></p><p>在参考第一节配置完Java11后，进入下一步：</p><p><img src="https://codestar.top/note-image/image-20230815100153469.png" alt="image-20230815100153469"></p><p><img src="https://codestar.top/note-image/image-20230815100219161.png" alt="image-20230815100219161"></p><p>一路到底，出现下面页面则安装完成：</p><p><img src="https://codestar.top/note-image/image-20230815100513334.png" alt="image-20230815100513334"></p><p>安装完成之后，<strong>PC不会展示可执行图标</strong>，jenkins通过指令来打开。</p><h2 id="3、启动jenkins服务"><a href="#3、启动jenkins服务" class="headerlink" title="3、启动jenkins服务"></a>3、启动jenkins服务</h2><p>要启动jenkins需要进入到其安装路径下，执行相应指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar jenkins.war --httpPort=8080<br></code></pre></td></tr></table></figure><p>启动完成之后，在浏览器打开控制页面地址：<a href="http://localhost:8080/">http://localhost:8080</a></p><p><img src="https://codestar.top/note-image/image-20230815102836219.png" alt="image-20230815102836219"></p><p>首次安装启动，会出现管理员密码校验：</p><p>从下面路径查看密码填到下面的页面，解锁权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\ProgramData\Jenkins\.jenkins\secrets\initialAdminPassword<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230815102907208.png" alt="image-20230815102907208"></p><p>进入之后，会出现插件引导页面，我这里选择“安装推荐的插件”：</p><p><img src="https://codestar.top/note-image/image-20230815103121109.png" alt="image-20230815103121109"></p><p>之后进入插件下载页面，等待插件安装完成即可开始使用了：</p><p><img src="https://codestar.top/note-image/image-20230815103212930.png" alt="image-20230815103212930"></p><p>创建账户：下面的信息填完，均为<strong>必填</strong></p><p><img src="https://codestar.top/note-image/image-20230815103641757.png" alt="image-20230815103641757"></p><p>设置URL，这里我保持了默认：</p><p><img src="https://codestar.top/note-image/image-20230815103748752.png" alt="image-20230815103748752"></p><p>配置完毕：</p><p><img src="https://codestar.top/note-image/image-20230815103813581.png" alt="image-20230815103813581"></p><h2 id="4、其他Jenkins操作"><a href="#4、其他Jenkins操作" class="headerlink" title="4、其他Jenkins操作"></a>4、其他Jenkins操作</h2><h3 id="4-1、关闭Jenkins服务"><a href="#4-1、关闭Jenkins服务" class="headerlink" title="4.1、关闭Jenkins服务"></a>4.1、关闭Jenkins服务</h3><p>在Jenkins服务器的网址url地址后加上<strong>exit</strong>：</p><p><a href="http://localhost:8080/exit">http://localhost:8080/exit</a></p><h3 id="4-2、重启Jenkies服务"><a href="#4-2、重启Jenkies服务" class="headerlink" title="4.2、重启Jenkies服务"></a>4.2、重启Jenkies服务</h3><p>在Jenkins服务器URL地址后加内容<strong>restart</strong></p><p>  <a href="http://localhost:8080/restart">http://localhost:8080/restart</a></p><h3 id="4-3、重新加载配置信息"><a href="#4-3、重新加载配置信息" class="headerlink" title="4.3、重新加载配置信息"></a>4.3、重新加载配置信息</h3><p>在Jenkins服务器URL地址后加内容<strong>reload</strong></p><p>  <a href="http://localhost:8080/reload">http://localhost:8080/reload</a></p>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
      <tag>持续集成</tag>
      
      <tag>CICD工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA新建maven项目出现x图标，运行报错解决方法</title>
    <link href="/2023/11/04/Coding/JAVA/IDEA%E6%96%B0%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0x%E5%9B%BE%E6%A0%87%EF%BC%8C%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2023/11/04/Coding/JAVA/IDEA%E6%96%B0%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%E5%87%BA%E7%8E%B0x%E5%9B%BE%E6%A0%87%EF%BC%8C%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1、问题现象"><a href="#1、问题现象" class="headerlink" title="1、问题现象"></a>1、问题现象</h2><p>IDEA2022.3.3，新建maven-archetype项目后，出现图标异常问题，左上角会显示x图标。并且无法执行程序：</p><p><img src="https://codestar.top/note-image/image-20230524094939415.png" alt="image-20230524094939415"></p><p><img src="https://codestar.top/note-image/image-20230524094913810.png" alt="image-20230524094913810"></p><p><strong>问题原因分析：</strong>判断为文件路径结构异常，未识别到以下路径的文件，导致执行异常。尝试删除<code>package $org.example;</code>，依旧提示找不到对应类：</p><p><img src="https://codestar.top/note-image/image-20230524094757419.png" alt="image-20230524094757419"></p><p>问题原因：</p><p>选择的项目为maven archetype项目构建，此项目生成的目录结构不同于maven项目。如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">archetype<br>|-- pom.xml<br>`-- src<br>    `-- main<br>        `-- resources<br>            |-- META-INF<br>            |   `-- maven<br>            |       `--archetype-metadata.xml<br>            `-- archetype-resources<br>                |-- pom.xml<br>                `-- src<br>                    |-- main<br>                    |   `-- java<br>                    |       `-- App.java<br>                    `-- test<br>                        `-- java<br>                            `-- AppTest.java<br></code></pre></td></tr></table></figure><p>而此项目生成对应的Module结构体为maven项目结构，如下：</p><p><img src="https://codestar.top/note-image/image-20230524150755533.png" alt="image-20230524150755533"></p><p>因而，导致除resources路径能识别之外，其他路径均无法识别，导致找不到对应的packages和class。因而执行之后程序报错。</p><p>解决方法：使用maven-quickstart快速创建项目。</p><p><img src="https://codestar.top/note-image/image-20230524155451915.png" alt="image-20230524155451915"></p><p>依据电脑性能生成时间长短不一，出现BUILD SUCCESS即生成成功：</p><p><img src="https://codestar.top/note-image/image-20230524160602362.png" alt="image-20230524160602362"></p><p>创建完成的路径结构如下：</p><p><img src="https://codestar.top/note-image/image-20230524160707938.png" alt="image-20230524160707938"></p><p>缺少的resources路径可自行创建。</p><h2 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h2><h3 id="2-1、修改启动配置"><a href="#2-1、修改启动配置" class="headerlink" title="2-1、修改启动配置"></a>2-1、修改启动配置</h3><p>点击窗口右上角运行配置图标，选择<code>Edit Configurations...</code></p><p><img src="https://codestar.top/note-image/image-20230524095259624.png" alt="image-20230524095259624"></p><p><img src="https://codestar.top/note-image/image-20230524110142397.png" alt="image-20230524110142397"></p><h2 id="3、创建maven项目"><a href="#3、创建maven项目" class="headerlink" title="3、创建maven项目"></a>3、创建maven项目</h2><p>选择创建一个快速maven项目：</p><p><img src="https://codestar.top/note-image/image-20230524154307157.png" alt="image-20230524154307157"></p><p><img src="https://codestar.top/note-image/image-20230524114708392.png" alt="image-20230524114708392"></p><p>加载本地maven骨架：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-DarchetypeCatalog=local<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230524114845490.png" alt="image-20230524114845490"></p><h2 id="5、创建maven-archetype"><a href="#5、创建maven-archetype" class="headerlink" title="5、创建maven archetype"></a>5、创建maven archetype</h2><h3 id="5-1、配置maven"><a href="#5-1、配置maven" class="headerlink" title="5-1、配置maven"></a>5-1、配置maven</h3><p>IDEA中，使用<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd>快捷键，打开设置页面，搜索maven进入maven配置页面，具体设置如下：</p><p><img src="https://codestar.top/note-image/image-20230524141943170.png" alt="image-20230524141943170"></p><p>修改完成后apply应用，点击OK即可。</p><h3 id="5-2、修改配置文件"><a href="#5-2、修改配置文件" class="headerlink" title="5-2、修改配置文件"></a>5-2、修改配置文件</h3><p>编辑器打开setting配置文件修改：</p><h4 id="1）maven镜像源修改"><a href="#1）maven镜像源修改" class="headerlink" title="1）maven镜像源修改"></a>1）maven镜像源修改</h4><p>此处用的是阿里源：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- mirror</span><br><span class="hljs-comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="hljs-comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span><br><span class="hljs-comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">  &lt;mirror&gt;</span><br><span class="hljs-comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span><br><span class="hljs-comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span><br><span class="hljs-comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class="hljs-comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span><br><span class="hljs-comment">  &lt;/mirror&gt;</span><br><span class="hljs-comment">   --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blocked</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">blocked</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2）配置本地仓库路径："><a href="#2）配置本地仓库路径：" class="headerlink" title="2）配置本地仓库路径："></a>2）配置本地仓库路径：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- localRepository</span><br><span class="hljs-comment">   | The path to the local repository maven will use to store artifacts.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="hljs-comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\codefiles\MavenRepo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-3、创建maven-archetype项目"><a href="#5-3、创建maven-archetype项目" class="headerlink" title="5-3、创建maven archetype项目"></a>5-3、创建maven archetype项目</h3><p>新建项目：</p><p><img src="https://codestar.top/note-image/image-20230524122435042.png" alt="image-20230524122435042"></p><p>使用Maven archetype模板新建（相较于maven，提高了加载速度），参考以下配置：</p><p><img src="https://codestar.top/note-image/image-20230524143314409.png" alt="image-20230524143314409"></p><h2 id="6、maven及maven-archetype对比"><a href="#6、maven及maven-archetype对比" class="headerlink" title="6、maven及maven archetype对比"></a>6、maven及maven archetype对比</h2><p>maven archetype目录结构：</p><p><img src="https://codestar.top/note-image/image-20230524150553771.png" alt="image-20230524150553771"></p><p>maven 标准目录结构：</p><p><img src="https://codestar.top/note-image/image-20230524150755533.png" alt="image-20230524150755533"></p><p>maven-quick-start目录结构：</p><p><img src="https://codestar.top/note-image/image-20230524152123543.png" alt="image-20230524152123543"></p><p>参考文档：</p><p><a href="https://maven.apache.org/guides/mini/guide-creating-archetypes.html">Apache官方文档</a></p><p><a href="https://blog.csdn.net/zzvar/article/details/114879815">https://blog.csdn.net/zzvar/article/details/114879815</a></p><p><a href="https://juejin.cn/s/maven%20archetype%E5%92%8Cmaven%E7%9A%84%E5%8C%BA%E5%88%AB">https://juejin.cn/s/maven%20archetype%E5%92%8Cmaven%E7%9A%84%E5%8C%BA%E5%88%AB</a></p><p><a href="https://juejin.cn/post/7052210790748651551">https://juejin.cn/post/7052210790748651551</a></p><p><a href="https://blog.csdn.net/anddyhua/article/details/88548791">https://blog.csdn.net/anddyhua/article/details/88548791</a></p><p><a href="https://www.jianshu.com/p/03b41d172e5e">https://www.jianshu.com/p/03b41d172e5e</a></p><p><a href="https://blog.csdn.net/qq_42490075/article/details/106957579">https://blog.csdn.net/qq_42490075/article/details/106957579</a></p><p><a href="https://blog.csdn.net/hgnuxc_1993/article/details/125427590">https://blog.csdn.net/hgnuxc_1993/article/details/125427590</a></p>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Maven项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用IDEA编译封装Android APK操作方法</title>
    <link href="/2023/11/03/Coding/JAVA/%E5%88%A9%E7%94%A8IDEA%E7%BC%96%E8%AF%91%E5%B0%81%E8%A3%85Android%20APK%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <url>/2023/11/03/Coding/JAVA/%E5%88%A9%E7%94%A8IDEA%E7%BC%96%E8%AF%91%E5%B0%81%E8%A3%85Android%20APK%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>**&#x3D;&#x3D;注：&#x3D;&#x3D;**以下步骤基于IDEA Community 2023.1.1版本操作。</p><p><img src="https://codestar.top/note-image/image-20231110003802687.png" alt="image-20231110003802687"></p><h2 id="1、安装Android-SDK"><a href="#1、安装Android-SDK" class="headerlink" title="1、安装Android SDK"></a>1、安装Android SDK</h2><p><img src="https://codestar.top/note-image/image-20230516182304899.png" alt="image-20230516182304899"></p><p>一开始检查无SDK安装，点击next进行安装：</p><p><img src="https://codestar.top/note-image/image-20230516182512814.png" alt="image-20230516182512814"></p><p>修改安装的内容，默认安装SDK即可，修改安装位置，点击next继续安装：</p><p><img src="https://codestar.top/note-image/image-20230516182440374.png" alt="image-20230516182440374"></p><p>继续next：</p><p><img src="https://codestar.top/note-image/image-20230516182649248.png" alt="image-20230516182649248"></p><p>同意协议，点击finish：</p><p><img src="https://codestar.top/note-image/image-20230516182757532.png" alt="image-20230516182757532"></p><p>之后会进入安装过程：</p><p><img src="https://codestar.top/note-image/image-20230516182846165.png" alt="image-20230516182846165"></p><p>最后下载完成finish即可。</p><h2 id="2、创建Android项目"><a href="#2、创建Android项目" class="headerlink" title="2、创建Android项目"></a>2、创建Android项目</h2><p>安装完SDK之后，next继续创建模板：</p><p><img src="https://codestar.top/note-image/image-20230516183928652.png" alt="image-20230516183928652"></p><p>选择Empty Activity模板：</p><p><img src="https://codestar.top/note-image/image-20230516184345674.png" alt="image-20230516184345674"></p><p><img src="https://codestar.top/note-image/image-20230516184801891.png" alt="image-20230516184801891"></p><p><img src="https://codestar.top/note-image/image-20230516185015732.png" alt="image-20230516185015732"></p><p><img src="https://codestar.top/note-image/image-20230517091251806.png" alt="image-20230517091251806"></p><h2 id="3、项目结构"><a href="#3、项目结构" class="headerlink" title="3、项目结构"></a>3、项目结构</h2><p>生成项目后，主要的结构如下：</p><p><img src="https://codestar.top/note-image/image-20230517141803431.png" alt="image-20230517141803431"></p><p>项目默认创建了主活动文件，目录为src&#x2F;main&#x2F;java&#x2F;com.*.*下面的MainActivity.kt，并且创建对应的主页面res&#x2F;layout&#x2F;activity_main.xml，<TextView>中默认写入了Hello World。</p><h2 id="4、运行环境准备"><a href="#4、运行环境准备" class="headerlink" title="4、运行环境准备"></a>4、运行环境准备</h2><p>在run窗口配置，进入Device Manager中新建虚拟设备：</p><p><img src="https://codestar.top/note-image/image-20230517142157196.png" alt="image-20230517142157196"></p><p><img src="https://codestar.top/note-image/image-20230517142311897.png" alt="image-20230517142311897"></p><p>选择任意一种phone设备，之后next进入下一步：</p><p><img src="https://codestar.top/note-image/image-20230517142510075.png" alt="image-20230517142510075"></p><p>获取手机镜像：</p><ul><li>选择镜像：</li></ul><p><img src="https://codestar.top/note-image/image-20230517142708298.png" alt="image-20230517142708298"></p><ul><li>同意协议之后，下载镜像：</li></ul><p><img src="https://codestar.top/note-image/image-20230517142737944.png" alt="image-20230517142737944"></p><p>等待下载完成：</p><p><img src="https://codestar.top/note-image/image-20230517143012763.png" alt="image-20230517143012763"></p><p>安装完成：</p><p><img src="https://codestar.top/note-image/image-20230517150615464.png" alt="image-20230517150615464"></p><ul><li>安装HAXM</li></ul><p><img src="https://codestar.top/note-image/image-20230517150721174.png" alt="image-20230517150721174"></p><p><img src="https://codestar.top/note-image/image-20230517150745014.png" alt="image-20230517150745014"></p><p>选则安装程序，同意协议，点击next继续（安装过程弹出需要管理员权限，同意安装即可）：</p><p><img src="https://codestar.top/note-image/image-20230517150820053.png" alt="image-20230517150820053"></p><p>安装完成，finish结束：</p><p><img src="https://codestar.top/note-image/image-20230517150930328.png" alt="image-20230517150930328"></p><p>安装结束后，此提示依旧存在，可忽略，此页面为静态页面，后续重新打开页面会修复：</p><p><img src="https://codestar.top/note-image/image-20230517151154107.png" alt="image-20230517151154107"></p><ul><li>选中镜像，继续下一步创建：</li></ul><p><img src="https://codestar.top/note-image/image-20230517151139175.png" alt="image-20230517151139175"></p><p>finish完成创建：</p><p><img src="https://codestar.top/note-image/image-20230517151448373.png" alt="image-20230517151448373"></p><p>创建完成之后会出现在虚拟设备列表中：</p><p><img src="https://codestar.top/note-image/image-20230517151405917.png" alt="image-20230517151405917"></p><h2 id="5、安卓虚拟机运行APP"><a href="#5、安卓虚拟机运行APP" class="headerlink" title="5、安卓虚拟机运行APP"></a>5、安卓虚拟机运行APP</h2><p>选择虚拟机直接点击右上角运行图标运行APP</p><p><img src="https://codestar.top/note-image/image-20230517154808072.png" alt="image-20230517154808072"></p><p>运行后如下：</p><p><img src="https://codestar.top/note-image/image-20230517154646772.png" alt="image-20230517154646772"></p><p>缩小虚拟设备列表：</p><p><img src="https://codestar.top/note-image/Snipaste_2023-05-17_15-52-20.png" alt="Snipaste_2023-05-17_15-52-20"></p><p>截图：</p><p><img src="https://codestar.top/note-image/image-20230517154622689.png" alt="image-20230517154622689"></p><p>将HelloWrord字样修改成其他，然后点击运行按钮旁的第二个重启按钮，更新的代码会即时生效而不用重启<a href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E6%9C%BA&spm=1001.2101.3001.7020">虚拟机</a>，开发过程中便于我们调试。</p><ul><li>修改布局内容</li></ul><p>选中元素，右击进入Go to XML：</p><p><img src="https://codestar.top/note-image/image-20230517155853605.png" alt="image-20230517155853605"></p><p>或点击页面右上角Code进入编辑：</p><p><img src="https://codestar.top/note-image/image-20230517160041903.png" alt="image-20230517160041903"></p><p>XML页面可以修改页面布局，点击右上角design切换至原来页面：</p><p><img src="https://codestar.top/note-image/image-20230517155757627.png" alt="image-20230517155757627"></p><h2 id="6、发布APK"><a href="#6、发布APK" class="headerlink" title="6、发布APK"></a>6、发布APK</h2><p>开发完应用app后，我们就可以发布成apk，提供他人下载安装。</p><p>发布方法：</p><p>点击Build—》Generate Signed Bundle &#x2F; APK</p><p><img src="https://codestar.top/note-image/image-20230517161604019.png" alt="image-20230517161604019"></p><p>选择APK，next：</p><p><img src="https://codestar.top/note-image/image-20230517161627540.png" alt="image-20230517161627540"></p><p>Key store path，选择新建key文件</p><p><img src="https://codestar.top/note-image/image-20230517161717098.png" alt="image-20230517161717098"></p><p>按照提示填写key存放路径和Password以及名称和组织，点击OK继续下一步：</p><p><strong>注：</strong>后续每一轮打包发布APK都需要此key文件和Password，很重要，记好谨防丢失。</p><p><img src="https://codestar.top/note-image/image-20230517162141618.png" alt="image-20230517162141618"></p><p>记住密码，进入下一步：</p><p><img src="https://codestar.top/note-image/image-20230517163133491.png" alt="image-20230517163133491"></p><p>选择发布版本有debug和release两种，选择其中一个进行打包：debug是内测版文件比较大，用于开发调试。release是发行版比较小，运行也快。</p><p><img src="https://codestar.top/note-image/image-20230517163442348.png" alt="image-20230517163442348"></p><p><img src="https://codestar.top/note-image/image-20230517165038317.png" alt="image-20230517165038317"></p><p>打包完成apk的输出目录默认会在app下如目标路径下如AndroidAPP\app\release，确认完成后，该目录下就生成了apk文件，发到手机上就能安装运行了。</p><p>至此整个APK封装发布流程完成了。</p>]]></content>
    
    
    <categories>
      
      <category>Android技术</category>
      
      <category>Android-APK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>apk包编译</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android adb 利用wlan局域网进行无线调试方法</title>
    <link href="/2023/10/31/System/Android/Android%20adb%20%E5%88%A9%E7%94%A8wlan%E5%B1%80%E5%9F%9F%E7%BD%91%E8%BF%9B%E8%A1%8C%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    <url>/2023/10/31/System/Android/Android%20adb%20%E5%88%A9%E7%94%A8wlan%E5%B1%80%E5%9F%9F%E7%BD%91%E8%BF%9B%E8%A1%8C%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h2><p>利用两端设备同处同一个局域网实现数据共享，连接adb设备，通过无线局域网进行数据传输，调试。</p><h2 id="2、无线设备连接"><a href="#2、无线设备连接" class="headerlink" title="2、无线设备连接"></a>2、无线设备连接</h2><p><strong>注：</strong>首次连接需使用USB线</p><h3 id="2-1、TCP端口启用"><a href="#2-1、TCP端口启用" class="headerlink" title="2-1、TCP端口启用"></a>2-1、TCP端口启用</h3><p>待连Android设备，开启tcp连接，放开5555端口（可自定义1023-65535都可以用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">以5555端口开启TCP连接</span><br>adb tcpid 5555<br></code></pre></td></tr></table></figure><p>执行无报错即可：</p><p><img src="https://codestar.top/note-image/image-20230804111208300.png" alt="image-20230804111208300"></p><h3 id="2-2、启用热点"><a href="#2-2、启用热点" class="headerlink" title="2-2、启用热点"></a>2-2、启用热点</h3><p>待连Android设备开启无线热点，检查对应IP地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell ifconfig<br></code></pre></td></tr></table></figure><p>检查wlan2 IP地址：</p><p><img src="https://codestar.top/note-image/image-20230411200715363.png" alt="image-20230411200715363"></p><h3 id="2-3、连接adb设备"><a href="#2-3、连接adb设备" class="headerlink" title="2-3、连接adb设备"></a>2-3、连接adb设备</h3><ul><li><p>1、PC连接Android设备热点</p></li><li><p>2、指定5555端口（2-1配置的端口）连接设备：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb connect 192.168.46.1:5555<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230804111304500.png" alt="image-20230804111304500"></p><p>出现connected表示已连接adb设备。</p><h3 id="2-4、检查设备连接"><a href="#2-4、检查设备连接" class="headerlink" title="2-4、检查设备连接"></a>2-4、检查设备连接</h3><p>检查设备连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb devices -l<br></code></pre></td></tr></table></figure><p>已连接的设备展示如下：</p><p><img src="https://codestar.top/note-image/image-20231031002843478.png" alt="image-20231031002843478"></p><p>后续可以正常的执行所有支持的adb指令：</p><p><img src="https://codestar.top/note-image/image-20230804111451998.png" alt="image-20230804111451998"></p>]]></content>
    
    
    <categories>
      
      <category>Android技术</category>
      
      <category>Android调试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm下载源如何修改为其他源地址</title>
    <link href="/2023/10/29/Coding/npm%E4%B8%8B%E8%BD%BD%E6%BA%90%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%85%B6%E4%BB%96%E6%BA%90%E5%9C%B0%E5%9D%80/"/>
    <url>/2023/10/29/Coding/npm%E4%B8%8B%E8%BD%BD%E6%BA%90%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%85%B6%E4%BB%96%E6%BA%90%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1、国内源地址清单"><a href="#1、国内源地址清单" class="headerlink" title="1、国内源地址清单"></a>1、国内源地址清单</h2><p>官方的源地址： <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></p><p>由于服务器在海外，国内访问速度会慢很多。下面是我搜集的一些npm国内的镜像源</p><table><thead><tr><th align="center">源名称</th><th align="center">npm源地址</th><th align="center">推荐指数</th></tr></thead><tbody><tr><td align="center">淘宝新镜像源</td><td align="center"><a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></td><td align="center">★★★★</td></tr><tr><td align="center">腾讯云镜像源</td><td align="center"><a href="http://mirrors.cloud.tencent.com/npm/">http://mirrors.cloud.tencent.com/npm/</a></td><td align="center">★★★</td></tr><tr><td align="center">华为云镜像源</td><td align="center"><a href="https://mirrors.huaweicloud.com/repository/npm/">https://mirrors.huaweicloud.com/repository/npm/</a></td><td align="center">★★★</td></tr><tr><td align="center">cnpm镜像地址</td><td align="center"><a href="http://registry.cnpmjs.org/">http://registry.cnpmjs.org</a></td><td align="center">★★</td></tr><tr><td align="center">淘宝旧源镜像</td><td align="center"><a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></td><td align="center">★</td></tr></tbody></table><p>其中淘宝旧镜像源在2022年5月31日废弃，不过至今（2023年10月29日）还是能正常使用，建议是使用新版镜像源。</p><h2 id="2、修改npm源"><a href="#2、修改npm源" class="headerlink" title="2、修改npm源"></a>2、修改npm源</h2><h3 id="2-1、临时修改"><a href="#2-1、临时修改" class="headerlink" title="2.1、临时修改"></a>2.1、临时修改</h3><p>如果只是在某一次使用源，可以临时修改，通过在install命令前加上<code>--registry 源地址</code>即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：使用淘宝npm源下载cnpm</span><br>npm --registry https://registry.npm.taobao.org install cnpm<br></code></pre></td></tr></table></figure><h3 id="2-2、永久修改"><a href="#2-2、永久修改" class="headerlink" title="2.2、永久修改"></a>2.2、永久修改</h3><h4 id="方法一：使用命令行修改"><a href="#方法一：使用命令行修改" class="headerlink" title="方法一：使用命令行修改"></a>方法一：使用命令行修改</h4><p>永久配置，直接使用指令修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>修改之后生效如下，查询npm配置的源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config get registry<br></code></pre></td></tr></table></figure><p>返回淘宝镜像源说明配置已经生效了：</p><p><img src="https://codestar.top/note-image/image-20231029161636529.png" alt="image-20231029161636529"></p><p>按照个人喜好配置相应的镜像源即可。</p><h4 id="方法二：直接修改配置文件"><a href="#方法二：直接修改配置文件" class="headerlink" title="方法二：直接修改配置文件"></a>方法二：直接修改配置文件</h4><p>在自己的电脑<code>C:\Users\username</code>上修改<code>.npmrc</code>文件，如没有则新建txt文件，把名称和后缀改成一样即可。</p><p>然后将其中的内容修改如下：[D:\Node.js]替换成自己的安装路径，registry改为镜像源地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">prefix=D:\Node.js\node_global<br>cache=D:\Node.js\node_cache<br>registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231029163854250.png" alt="image-20231029163854250"></p><h2 id="3、npm仓库管理工具"><a href="#3、npm仓库管理工具" class="headerlink" title="3、npm仓库管理工具"></a>3、npm仓库管理工具</h2><p>使用<code>nrm</code>来进行仓库管理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g nrm<br></code></pre></td></tr></table></figure><p>通过工具查看可配置的镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nrm ls<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231029162829130.png" alt="image-20231029162829130"></p><p>其他更多的使用方法，可以查看官方说明：<a href="https://github.com/Pana/nrm">https://github.com/Pana/nrm</a></p>]]></content>
    
    
    <categories>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux中的COREDUMP基础知识及配置方法</title>
    <link href="/2023/10/24/System/Linux/Linux%E4%B8%AD%E7%9A%84COREDUMP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <url>/2023/10/24/System/Linux/Linux%E4%B8%AD%E7%9A%84COREDUMP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1、coredump简介"><a href="#1、coredump简介" class="headerlink" title="1、coredump简介"></a>1、coredump简介</h2><p>​在系统的运行过程中，有许多时候会出现程序运行不正常的情况，进而产生崩溃现象，而为了方便记录和追溯问题的发生进程和或相关的线程信息，亦或是崩溃时间等，有了coredump这种文件。</p><ul><li><p>Linux中的dump文件为core文件，以core开头，类似如下：</p><p><img src="https://codestar.top/note-image/image-20230112112849208.png" alt="image-20230112112849208"></p></li><li><p>Windows中dump文件为dmp文件，类似如下：</p><p><img src="https://codestar.top/note-image/image-20230112112958003.png" alt="image-20230112112958003"></p></li></ul><h2 id="2、core生成限制"><a href="#2、core生成限制" class="headerlink" title="2、core生成限制"></a>2、core生成限制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查core生成大小限制</span><br>ulimit -c<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查文件大小限制</span><br>ulimit<br><span class="hljs-meta prompt_"># </span><span class="language-bash">限制大小不超过1024KB</span><br>ulimit -c 1024<br></code></pre></td></tr></table></figure><p>返回值含义：</p><ul><li>0—-禁止生成core文件</li><li>ulimited—-未限制core大小</li><li>数值—-限制大小不超过该设定值KB</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设定为无限制</span><br>ulimit -c unlimited<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230112105439700.png" alt="image-20230112105439700"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查所有的用户配置，各项返回值含义同上</span><br>ulimit -a<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230112113607292.png" alt="image-20230112113607292"></p><p>设定单一用户程序上限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设定单个用户程序上限为3：限制生成的dump数量</span><br>ulimit -u 3<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230112114526249.png" alt="image-20230112114526249"></p><p>设定之后，会将单个程序的core数量限制在设定值之内：</p><p><img src="https://codestar.top/note-image/image-20231024014749829.png" alt="image-20231024014749829"></p><h2 id="3、core相关配置"><a href="#3、core相关配置" class="headerlink" title="3、core相关配置"></a>3、core相关配置</h2><h3 id="3-1、配置文件"><a href="#3-1、配置文件" class="headerlink" title="3-1、配置文件"></a>3-1、配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置文件</span><br>/proc/sys/kernel/core_pattern<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询结果为执行core生成的程序路径，及生成格式</span><br>cat /proc/sys/kernel/core_pattern<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230112105615231.png" alt="image-20230112105615231"></p><p>程序段中记录着详细的core生成路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /bin/coredump-handler.sh<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231024014844990.png" alt="image-20231024014844990"></p><h3 id="3-2、配置文件格式"><a href="#3-2、配置文件格式" class="headerlink" title="3-2、配置文件格式"></a>3-2、配置文件格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">％p 转储过程的PID<br>％u （数字）转储进程的实际UID<br>％G （数字）转储过程的实际GID<br>％s 引起转储的信号数<br>％t 转储时间，表示为自1970年1月1日00:00:00 +0000（UTC）以来的秒数<br>％H 主机名（与uname（2）返回的节点名相同）<br>％e 可执行文件名（无路径前缀）<br>％E 可执行文件的路径名，用斜杠（’/’）替换为感叹号（’！’）。<br>％C 崩溃过程的核心文件大小软资源限制（自Linux 2.6.24开始）<br></code></pre></td></tr></table></figure><h2 id="4、core生成验证"><a href="#4、core生成验证" class="headerlink" title="4、core生成验证"></a>4、core生成验证</h2><p>使用kill指令或pkill指令来验证core生成逻辑：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">根据进程名来abort进程并生成core文件</span><br>pkill -6 proc_name<br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据PID来abort进程并生成core文件</span><br>ps -aux | grep proc_name<br>kill -6 [PID]<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231024014918951.png" alt="image-20231024014918951"></p><p><strong>拓展：</strong><code>kill -l</code>查看kill对应的信号量列表</p><p><img src="https://codestar.top/note-image/image-20230112142536039.png" alt="image-20230112142536039"></p><h2 id="5、core调试"><a href="#5、core调试" class="headerlink" title="5、core调试"></a>5、core调试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">gdb 程序名称 core名称</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：</span><br>gdb someip_manager core_someip_manager__6609_1672103695<br></code></pre></td></tr></table></figure><p>gdb面板输入<code>where</code>或者<code>bt</code>查找出错的那一行或函数，具体错误信息可以在<code>#0~#05</code>中查看：</p><p><img src="https://codestar.top/note-image/image-20230112142121648.png" alt="image-20230112142121648"></p><p><img src="https://codestar.top/note-image/image-20230112162822742.png" alt="image-20230112162822742"></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>调试技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>COREDUMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下如何开启允许root用户远程登录</title>
    <link href="/2023/10/23/System/Linux/Linux%E4%B8%8B%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E5%85%81%E8%AE%B8root%E7%94%A8%E6%88%B7%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    <url>/2023/10/23/System/Linux/Linux%E4%B8%8B%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E5%85%81%E8%AE%B8root%E7%94%A8%E6%88%B7%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h2><p>在很多时候，远程登录使用的是用户身份登录，在系统路径下的文件无法通过用户角色直接下载。下载的话，需要将文件移动到当前用户有权限的路径下才能下载，比较麻烦。而另一种下载方法是以root用户的身份登录系统进行原路径下载，但多数SSH为了提高系统安全性，<strong>默认关闭了root远程登录的权限</strong>，需手动配置SSH，使其能够允许root远程登录，以Ubuntu系统为参考，具体操作如下。</p><h2 id="2、配置SSH"><a href="#2、配置SSH" class="headerlink" title="2、配置SSH"></a>2、配置SSH</h2><ul><li>查找配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">一般为这个路径：</span><br>/etc/ssh/sshd_config<br><span class="hljs-meta prompt_"># </span><span class="language-bash">无此路径的情况下直接查找配置文件</span><br>find / -name *sshd_config<br></code></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/ssh/sshd_config<br><span class="hljs-meta prompt_"># </span><span class="language-bash">键入i进入编辑模式，加入以下内容。wq保存</span><br>PermitRootLogin yes<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230530115045644.png" alt="image-20230530115045644"></p><h2 id="3、重启服务进程"><a href="#3、重启服务进程" class="headerlink" title="3、重启服务进程"></a>3、重启服务进程</h2><h3 id="3-1、SSH与SSHD进程的区别"><a href="#3-1、SSH与SSHD进程的区别" class="headerlink" title="3-1、SSH与SSHD进程的区别"></a>3-1、SSH与SSHD进程的区别</h3><p>SSH与SSHD主要区别在于主动或被动连接：</p><ul><li>SSH为<strong>客户端</strong>主动远程其他设备即服务端；</li><li>SSHD为<strong>服务端</strong>被动接收来其他设备的SSH请求。</li></ul><p>具体差异点总结如下：</p><table><thead><tr><th>类别</th><th align="left">SSH</th><th>SSHD</th></tr></thead><tbody><tr><td>定义</td><td align="left">SSH是Secure Shell的缩写，它是一种加密网络协议，用于远程登录和安全文件传输。</td><td>SSHD是SSH Daemon的缩写，是运行在服务器端的SSH软件守护进程。</td></tr><tr><td>作用</td><td align="left">用来进行远程连接、远程管理和传输文件等操作。</td><td>作为服务器端软件，接收来自客户端的连接请求，并为其提供安全的远程登录和文件传输功能。</td></tr><tr><td>运行位置</td><td align="left">运行在<strong>客户端</strong>上。</td><td>运行在<strong>服务端</strong>上。</td></tr><tr><td>端口号</td><td align="left">默认使用22端口。</td><td>默认使用22端口。</td></tr><tr><td>用户验证</td><td align="left">通过用户名和密码进行验证。</td><td>支持多种用户验证方式，包括用户名和密码、公钥认证、Kerberos身份验证等。</td></tr><tr><td>安全性</td><td align="left">基于公开密钥加密技术，采用对称加密和非对称加密相结合的方式保证数据传输的安全性。</td><td>通过数字证书和加密算法保障通信过程中数据的安全性和完整性。</td></tr><tr><td>使用范围</td><td align="left">适用于Linux、Unix、Mac OS等操作系统。</td><td>适用于Linux、Unix、Mac OS等操作系统。</td></tr></tbody></table><h3 id="3-2、重启SSHD生效配置"><a href="#3-2、重启SSHD生效配置" class="headerlink" title="3-2、重启SSHD生效配置"></a>3-2、重启SSHD生效配置</h3><p>以下指令重启SSHD服务，两条指令等价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart sshd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>service sshd restart<br></code></pre></td></tr></table></figure><p>执行上述指令会重启SSHD服务，也就是重启整个SSH<strong>服务器进程</strong>，同时也会<strong>重新加载配置文件</strong>。这个命令通常用于对SSH服务器进行设置和调试时，或者在修改SSH服务配置后使其生效。执行该命令不会影响其他正在运行的进程，只会重启SSH服务进程。</p><h2 id="4、root用户下载文件"><a href="#4、root用户下载文件" class="headerlink" title="4、root用户下载文件"></a>4、root用户下载文件</h2><h3 id="4-1、root用户远程登录"><a href="#4-1、root用户远程登录" class="headerlink" title="4-1、root用户远程登录"></a>4-1、root用户远程登录</h3><p>使用远程登录软件或平台填入root名称及Linux设备IP，这里我使用的是<strong>MobaXterm</strong>，之后会认证要求输入root密码，登入即可：</p><p><img src="https://codestar.top/note-image/image-20230530120223288.png" alt="image-20230530120223288"></p><p>登录成功如下，进入Linux服务器shell面板：</p><p><img src="https://codestar.top/note-image/image-20230530120301175.png" alt="image-20230530120301175"></p><h3 id="4-2、下载文件"><a href="#4-2、下载文件" class="headerlink" title="4-2、下载文件"></a>4-2、下载文件</h3><p>使用ftp下载工具：如FileZilla，xftp、MobaXterm（集成到软件内部），同样输入Linux端IP、用户名（root）、密码及端口（22）登录远程设备，进入需要下载的文件路径，拖动文件至本地路径下载即可：</p><p><img src="https://codestar.top/note-image/image-20230530120934802.png" alt="image-20230530120934802"></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>SSH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSH远程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python安装报错之0x80072f7d错误解决方法</title>
    <link href="/2023/10/21/Coding/Python/Python%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E4%B9%8B0x80072f7d%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2023/10/21/Coding/Python/Python%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E4%B9%8B0x80072f7d%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一、问题现象"><a href="#一、问题现象" class="headerlink" title="一、问题现象"></a>一、问题现象</h2><p>安装过程中出现报错：0x80072f7d - 未指定的错误</p><p><img src="https://codestar.top/note-image/image-20231022234449760.png" alt="image-20231022234449760"></p><p>这个问题发生，导致后续无法配置Python环境，必须要解决掉它。</p><h2 id="二、问题原因"><a href="#二、问题原因" class="headerlink" title="二、问题原因"></a>二、问题原因</h2><p>为了弄清是什么原因导致出现这种致命性问题，去找了一下”度娘”，发现原因如下：</p><blockquote><p>在Python的安装过程中，会涉及到数据传输，其中会涉及到一个协议TLS，安全传输层协议，安装Python的过程中必须要TLS协议的支持，我本机没有开启TLS协议导致出错。目前TLS1.2是常见传输协议版本，不过有的网站还是TLS1.1。所以得同时开启两个协议，TLS1.1、TLS1.2，具体操作来看解决方法。</p></blockquote><h2 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h2><p>1、<kbd>win</kbd>+<kbd>r</kbd>打开运行界面，输入<code>control</code>，打开控制面板：</p><p>2、进入“网络和Internet”：</p><p><img src="https://codestar.top/note-image/image-20231022234509493.png" alt="image-20231022234509493"></p><p>2、点击“Internet选项”：</p><p><img src="https://codestar.top/note-image/image-20231022234640504.png" alt="image-20231022234640504"></p><p>3、“Internet属性”中进入“高级”，勾选“使用TLS1.1”、“使用TLS1.2”：</p><p><img src="https://codestar.top/note-image/image-20231022234803305.png" alt="image-20231022234803305"></p><p>点击应用，重新安装Python。</p><h2 id="四、重新安装Python"><a href="#四、重新安装Python" class="headerlink" title="四、重新安装Python"></a>四、重新安装Python</h2><p>重新安装，选择对应的安装路径和安装选项，一路下一步安装即可，中间安装各类包需要费些时间，等待安装成功即可：</p><p><img src="https://codestar.top/note-image/image-20231022234824356.png" alt="image-20231022234824356"></p><p>大功告成，安装成功~</p><p><img src="https://codestar.top/note-image/image-20231022234840585.png" alt="image-20231022234840585"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows中Java安装及环境变量配置</title>
    <link href="/2023/10/21/System/Windows/Windows%E4%B8%ADJava%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/10/21/System/Windows/Windows%E4%B8%ADJava%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1、下载jdk安装包"><a href="#1、下载jdk安装包" class="headerlink" title="1、下载jdk安装包"></a>1、下载jdk安装包</h2><p>通过以下镜像站下载jdk安装包：<a href="https://www.techspot.com/downloads/5553-java-jdk.html">https://www.techspot.com/downloads/5553-java-jdk.html</a></p><p>这里我选择的是Java11，选择对应的平台下载即可：</p><p><img src="https://codestar.top/note-image/image-20230820212852255.png" alt="image-20230820212852255"></p><p>在该页面下，还有Java其他的版本提供下载，需要的可以进入对应页面用同样的方式下载：</p><p><img src="https://codestar.top/note-image/image-20230820212953315.png" alt="image-20230820212953315"></p><h2 id="2、安装JDK"><a href="#2、安装JDK" class="headerlink" title="2、安装JDK"></a>2、安装JDK</h2><p>下载完成之后，双击安装包：</p><p><img src="https://codestar.top/note-image/image-20230820213208823.png" alt="image-20230820213208823"></p><p>根据安装向导，自定义安装路径，一路安装完成即可。安装完成了之后，还无法使用，需要配置环境变量才能在PC中各环境下使用。</p><h2 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h2><h3 id="3-1、环境变量配置页进入"><a href="#3-1、环境变量配置页进入" class="headerlink" title="3.1、环境变量配置页进入"></a>3.1、环境变量配置页进入</h3><p>环境变量需要配置的内容有三点，分别是JAVA_HOME、CLASSPATH、path。Windows中<kbd>win</kbd>+<kbd>r</kbd>打开运行面板，输入<code>sysdm.cpl</code>，进入<strong>系统属性</strong>页面：</p><p><img src="https://codestar.top/note-image/image-20230820213715533.png" alt="image-20230820213715533"></p><p>之后切到<strong>高级</strong>页签，点击<strong>环境变量</strong>进入环境变量配置页面，进入之后就开始配置具体的变量名了：</p><p><img src="https://codestar.top/note-image/image-20230820213825582.png" alt="image-20230820213825582"></p><h3 id="3-2、环境变量1：JAVA-HOME"><a href="#3-2、环境变量1：JAVA-HOME" class="headerlink" title="3.2、环境变量1：JAVA_HOME"></a>3.2、环境变量1：JAVA_HOME</h3><p>在系统变量中，<strong>新建</strong>环境变量，变量名给”JAVA_HOME”，变量值<strong>填入JAVA的安装根目录</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">根据实际情况填入</span><br>D:\JDK11<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230820214141226.png" alt="image-20230820214141226"></p><h3 id="3-3、环境变量2：CLASSPATH"><a href="#3-3、环境变量2：CLASSPATH" class="headerlink" title="3.3、环境变量2：CLASSPATH"></a>3.3、环境变量2：CLASSPATH</h3><p>这个环境变量配置的为<strong>JAVA所有依赖的包路径</strong>。</p><p>同样，在系统变量中<strong>新建</strong>环境变量，变量名给”CLASSPATH”，变量值填入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">注意，最前面有个.</span><br>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230820214359184.png" alt="image-20230820214359184"></p><p>%JAVA_HOME%意思为取<strong>名称为”JAVA_HOME”的环境变量</strong>的值，即写成这样也可以，两者等价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">.;D:\JDK11\lib\dt.jar;D:\JDK11\lib\tools.jar;<br></code></pre></td></tr></table></figure><p>推荐上面的写法，方便管理。</p><h3 id="3-4、环境变量3：Path"><a href="#3-4、环境变量3：Path" class="headerlink" title="3.4、环境变量3：Path"></a>3.4、环境变量3：Path</h3><p>这个环境变量配置的为<strong>Java中jdk和jre的可执行bin文件</strong>。</p><p>找到Path环境变量，新建两条，填入以下内容：Windows10中建议分开写，不然会出现无法识别。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">合并写法</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">分开写法</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">JAVA_HOME%\bin</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">JAVA_HOME%\jre\bin</span><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230820215621671.png" alt="image-20230820215621671"></p><h2 id="4、验证安装"><a href="#4、验证安装" class="headerlink" title="4、验证安装"></a>4、验证安装</h2><p>进入powershell面板，输入<code>java --version</code>验证配置，如果正常返回版本号，则环境配置成功：</p><p><img src="https://codestar.top/note-image/image-20230820215906035.png" alt="image-20230820215906035"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>环境变量</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>JAVA</tag>
      
      <tag>JAVA环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记本安装纯净Ubuntu 22.04 LTS系统全流程</title>
    <link href="/2023/10/12/System/Linux/%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85%E7%BA%AF%E5%87%80Ubuntu%2022.04%20LTS%E7%B3%BB%E7%BB%9F%E5%85%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/10/12/System/Linux/%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85%E7%BA%AF%E5%87%80Ubuntu%2022.04%20LTS%E7%B3%BB%E7%BB%9F%E5%85%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1、镜像下载"><a href="#1、镜像下载" class="headerlink" title="1、镜像下载"></a>1、镜像下载</h2><p>阿里云镜像站下载Ubuntu 22.04 LTS系统镜像：<a href="https://mirrors.aliyun.com/ubuntu-releases/22.04/">https://mirrors.aliyun.com/ubuntu-releases/22.04/</a></p><p><img src="https://codestar.top/note-image/image-20221103221343334.png" alt="image-20221103221343334"></p><h2 id="2、启动盘制作"><a href="#2、启动盘制作" class="headerlink" title="2、启动盘制作"></a>2、启动盘制作</h2><p><img src="https://codestar.top/note-image/image-20221031235342705.png" alt="image-20221031235342705"></p><p>打开后的镜像在这里：</p><p><img src="https://codestar.top/note-image/image-20221031235414003.png" alt="image-20221031235414003"></p><p>点击启动-写入硬盘映像，该步骤<strong>需要管理员</strong>权限：</p><p><img src="https://codestar.top/note-image/image-20221031235725870.png" alt="image-20221031235725870"></p><p>镜像文件会自动同步：</p><p>选择对应的磁盘驱动器和写入方式：注意别选错盘，该步骤会对选中盘先进行格式化。</p><p><img src="https://codestar.top/note-image/image-20221031235652288.png" alt="image-20221031235652288"></p><p>点击写入，开始制作。大约3-5分钟：</p><p><img src="https://codestar.top/note-image/image-20221101201949072.png" alt="image-20221101201949072"></p><p>刻录成功：</p><p><img src="https://codestar.top/note-image/image-20221101202254151.png" alt="image-20221101202254151"></p><h2 id="3、系统安装"><a href="#3、系统安装" class="headerlink" title="3、系统安装"></a>3、系统安装</h2><h3 id="3-1、BIOS设置"><a href="#3-1、BIOS设置" class="headerlink" title="3-1、BIOS设置"></a>3-1、BIOS设置</h3><ul><li>SATA工作方式确认</li></ul><p>笔记本开启按<strong>F2</strong>进入BIOS，确保为AHCI模式，之后保存配置重启。</p><p>&#x3D;&#x3D;注：&#x3D;&#x3D;不同品牌笔记本进入BIOS不太一样，本文以戴尔笔记本为例。</p><p><img src="https://codestar.top/note-image/image-20221103221825965.png" alt="image-20221103221825965"></p><ul><li>切换U盘启动</li></ul><p>重启按<strong>F12</strong>进入启动方式选择，在UEFI选项中选择USB设备，选中后回车，启动安装。</p><p><img src="https://codestar.top/note-image/image-20221103222031067.png" alt="image-20221103222031067"></p><h3 id="3-2、Ubuntu安装引导"><a href="#3-2、Ubuntu安装引导" class="headerlink" title="3-2、Ubuntu安装引导"></a>3-2、Ubuntu安装引导</h3><ul><li>安装界面</li></ul><p>选择<strong>*Try or Install Ubuntu</strong></p><p><img src="https://codestar.top/note-image/image-20221103222341452.png" alt="image-20221103222341452"></p><p>进入启动页面</p><p><img src="https://codestar.top/note-image/image-20221103222459925.png" alt="image-20221103222459925"></p><ul><li>安装引导</li></ul><p>语言下拉到列表最下方，选择<strong>中文(简体)<strong>，点击</strong>安装Ubuntu</strong></p><p><img src="https://codestar.top/note-image/image-20221103222550069.png" alt="image-20221103222550069"></p><ul><li>键盘布局</li></ul><p>两项均选择Chinese，点击继续</p><p><img src="https://codestar.top/note-image/image-20221103222703887.png" alt="image-20221103222703887"></p><ul><li>软件安装</li></ul><p>选中正常安装，想节省安装时间，可以取消勾选”<strong>安装Ubuntu时下载更新</strong>“，点击继续</p><p><img src="https://codestar.top/note-image/image-20221103222819398.png" alt="image-20221103222819398"></p><ul><li>安装类型</li></ul><p>如果想同Windows共存，选择第一项。此处我需要安装纯Ubuntu系统，选择第二项。点击继续</p><p><img src="https://codestar.top/note-image/image-20221103223137388.png" alt="image-20221103223137388"></p><p><strong>注：</strong>如果需要ZFS文件系统，可以在高级特性中选择，添加。</p><p><img src="https://codestar.top/note-image/image-20221103223320624.png" alt="image-20221103223320624"></p><ul><li>选择安装盘</li></ul><p>选择需要清除并安装的系统盘，点击继续安装</p><p><img src="https://codestar.top/note-image/image-20221103223203877.png" alt="image-20221103223203877"></p><p>提示写入确定弹窗，会进行格式化，点击继续即可：</p><p><img src="https://codestar.top/note-image/image-20221103223420973.png" alt="image-20221103223420973"></p><ul><li>时区选择</li></ul><p>搜索选择，上海时区，点击继续</p><p><img src="https://codestar.top/note-image/image-20221103223420973.png" alt="image-20221103223420973"></p><ul><li>设置用户名</li></ul><p><img src="https://codestar.top/note-image/image-20221103223645533.png" alt="image-20221103223645533"></p><ul><li>进入安装过程</li></ul><p><img src="https://codestar.top/note-image/image-20221103223714202.png" alt="image-20221103223714202"></p><p><img src="https://codestar.top/note-image/image-20221103223721816.png" alt="image-20221103223721816"></p><ul><li>安装完成启动</li></ul><p>安装完成后需要移除U盘，再启动。</p><p><img src="https://codestar.top/note-image/image-20221103223747669.png" alt="image-20221103223747669"></p><p>启动完成，就大功告成啦：</p><p><img src="https://codestar.top/note-image/image-20221103223839534.png" alt="image-20221103223839534"></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>系统安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux系统</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 22.04 LTS静态IP配置及源更新</title>
    <link href="/2023/10/12/System/Linux/Ubuntu%2022.04%20LTS%E9%9D%99%E6%80%81IP%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%BA%90%E6%9B%B4%E6%96%B0/"/>
    <url>/2023/10/12/System/Linux/Ubuntu%2022.04%20LTS%E9%9D%99%E6%80%81IP%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%BA%90%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1、网络模式确认"><a href="#1、网络模式确认" class="headerlink" title="1、网络模式确认"></a>1、网络模式确认</h2><p><strong>注：</strong>以下操作均基于VMWARE虚拟环境，需要确认虚拟网络配置为NAT模式。</p><p>检查方式：编辑——&gt;虚拟网络编辑器，进入到以下页面。配置和记住当前设置的<strong>网关IP、子网掩码、IP段</strong></p><p><img src="https://codestar.top/note-image/image-20221007114038651.png" alt="image-20221007114038651"></p><h2 id="2、静态IP配置"><a href="#2、静态IP配置" class="headerlink" title="2、静态IP配置"></a>2、静态IP配置</h2><h3 id="2-1、切换管理员权限"><a href="#2-1、切换管理员权限" class="headerlink" title="2-1、切换管理员权限"></a>2-1、切换管理员权限</h3><p>开启虚拟机，进入到terminal，切换到管理员模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">执行后输入登录用户密码</span><br>sudo -i<br><span class="hljs-meta prompt_"># </span><span class="language-bash">初装系统root密码为随机密码，需要自行更改</span><br>passwd root<br><span class="hljs-meta prompt_"># </span><span class="language-bash">按照提示之后输入命令更改密码，提示successful为更新成功</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">之后登录执行以下指令直接进入管理员模式</span><br>su<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007144407345.png" alt="image-20221007144407345"></p><h3 id="2-2、修改网络配置"><a href="#2-2、修改网络配置" class="headerlink" title="2-2、修改网络配置"></a>2-2、修改网络配置</h3><p>Ubuntu自17.10版本以来，引入了Netplan网络配置工具，通过netplan进行管理，对应的配置文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新安装的系统建议使用vi或nano编辑器修改文件内容，不支持vim</span><br>vi /etc/netplan/01-network-manager-all.yaml<br>nano /etc/netplan/01-network-manager-all.yaml<br></code></pre></td></tr></table></figure><p>配置内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Let NetworkManager manage all devices on this system</span><br>network:<br>  ethernets:<br>    ens33:<br>      dhcp4: no<br>      dhcp6: no<br>      # 该项可选，不加也可行<br>      optional: true<br>      addresses:<br>      # 静态IP，需要在第一节配置的IP段内<br>       - 192.168.31.103/24<br>      routes:<br>       - to: default<br>       # 网关设置，需要和第一节检查的网关一致<br>         via: 192.168.31.2<br>      nameservers:<br>      # 网关配置格式还可采用该格式，多个地址采用英文逗号相隔<br>      # addresses: [114.114.114.114,8.8.8.8]<br>        addresses:<br>          - 114.114.114.114<br>          - 8.8.8.8<br>        search:<br>          - localhost<br>          - local<br>  version: 2<br>  renderer: NetworkManager<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007153350141.png" alt="image-20221007153350141"></p><h3 id="2-3、生效配置"><a href="#2-3、生效配置" class="headerlink" title="2-3、生效配置"></a>2-3、生效配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">测试配置；正常如下</span><br>sudo netplan try<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007154513775.png" alt="image-20221007154513775"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">应用配置：不报错即可</span><br>sudo netplan apply<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007151929466.png" alt="image-20221007151929466"></p><p>检查是否生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ip addr<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007151023164.png" alt="image-20221007151023164"></p><p>连通性检查：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007151121767.png" alt="image-20221007151121767"></p><h3 id="2-4、常用工具安装"><a href="#2-4、常用工具安装" class="headerlink" title="2-4、常用工具安装"></a>2-4、常用工具安装</h3><p>在系统使用过程中有一些工具为常用工具，建议安装，如vim、net-tools（对应ifconfig指令）、curl。该部分内容自行参考安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim编辑器，vi的升级版</span><br>apt install vim -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ifconfig、netstat命令工具</span><br>apt install net-tools -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">web服务器请求工具</span><br>apt install curl -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行以下指令一键安装</span><br>apt install vim -y;apt install net-tools -y;apt install curl -y<br></code></pre></td></tr></table></figure><h2 id="3、镜像源更新"><a href="#3、镜像源更新" class="headerlink" title="3、镜像源更新"></a>3、镜像源更新</h2><h3 id="3-1、可用源列表"><a href="#3-1、可用源列表" class="headerlink" title="3-1、可用源列表"></a>3-1、可用源列表</h3><p><strong>注：</strong>不同系统版本设定的源不同，以下针对22.04版本。</p><h4 id="1）清华源"><a href="#1）清华源" class="headerlink" title="1）清华源"></a>1）清华源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span><br></code></pre></td></tr></table></figure><h4 id="2）阿里源"><a href="#2）阿里源" class="headerlink" title="2）阿里源"></a>2）阿里源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><h4 id="3）中科大源"><a href="#3）中科大源" class="headerlink" title="3）中科大源"></a>3）中科大源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse<br></code></pre></td></tr></table></figure><h4 id="4）网易源"><a href="#4）网易源" class="headerlink" title="4）网易源"></a>4）网易源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.163.com/ubuntu/ jammy main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ jammy-backports main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><h3 id="3-2、更新源"><a href="#3-2、更新源" class="headerlink" title="3-2、更新源"></a>3-2、更新源</h3><p>将原来的源文件进行备份：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /etc/apt/sources.list /etc/apt/sources.list.bak<br></code></pre></td></tr></table></figure><p>新建源文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">填入上一节的任意一项可用源，之后执行Esc : 输入wq保存退出</span><br>vi /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007150111288.png" alt="image-20221007150111288"></p><p>更新软件源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt update -y<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007145149148.png" alt="image-20221007145149148"></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>系统安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux系统</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下CPU压测执行指导</title>
    <link href="/2023/10/12/System/Linux/Linux%E4%B8%8BCPU%E5%8E%8B%E6%B5%8B%E6%89%A7%E8%A1%8C%E6%8C%87%E5%AF%BC/"/>
    <url>/2023/10/12/System/Linux/Linux%E4%B8%8BCPU%E5%8E%8B%E6%B5%8B%E6%89%A7%E8%A1%8C%E6%8C%87%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>拉起两个进程，执行文件拷贝，输出空文件。可压测到100%，持续执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in `seq 1 $(cat /proc/cpuinfo |grep &quot;physical id&quot; |wc -l)`; do dd if=/dev/zero of=/dev/null &amp; done<br></code></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>持续计算圆周率，bc命令。可压测到100</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">计算小数点后5000位</span><br>echo &quot;scale=5000; 4*a(1)&quot; | bc -l -q<br></code></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>编写一个循环，可压测到65%左右，持续执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">编写一个脚本文件，持续执行该循环，往空文件中写入1。实际不会生成新文件。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">filename=cputest.sh</span><br>while [ 1 ]<br>do<br>echo 1 &gt;&gt; /dev/null<br>done<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加执行权限</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或执行<span class="hljs-built_in">chmod</span> +x cputest.sh</span><br>chmod 777 cputest.sh<br></code></pre></td></tr></table></figure><h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><p>模拟用户不断地访问，并发进程，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">************常规执行*************</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不会占用过多资源</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">!/bin/bash</span><br>Njob=15    #任务总数<br>for ((i=0; i&lt;$Njob; i++)); do<br>&#123;<br>          echo  &quot;progress $i is sleeping for 3 seconds zzz…&quot;<br>          sleep  3<br>&#125;<br>done<br>echo -e &quot;time-consuming: $SECONDS    seconds&quot;    #显示脚本执行耗时<br><span class="hljs-meta prompt_"># </span><span class="language-bash">************并发执行*************</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">!/bin/bash</span><br>Njob=15<br>for ((i=0; i&lt;$Njob; i++)); do<br>          echo  &quot;progress $i is sleeping for 3 seconds zzz…&quot;<br>          sleep  3 &amp;       #循环内容放到后台执行<br>done<br>wait      #等待循环结束再执行wait后面的内容<br>echo -e &quot;time-consuming: $SECONDS    seconds&quot;    #显示脚本执行耗时<br></code></pre></td></tr></table></figure><h2 id="压测脚本"><a href="#压测脚本" class="headerlink" title="压测脚本"></a>压测脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">并发运行的最佳实践</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">总进程数</span><br>Sp=2500<br><span class="hljs-meta prompt_"># </span><span class="language-bash">并发数,并发数过大可能造成系统崩溃</span><br>Qp=250<br><span class="hljs-meta prompt_"># </span><span class="language-bash">存放进程的队列</span><br>Qarr=();<br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行进程数</span><br>run=0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将进程的添加到队列里的函数</span><br>function push() &#123;<br>Qarr=($&#123;Qarr[@]&#125; $1)<br>run=$&#123;#Qarr[@]&#125;<br>&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检测队列里的进程是否运行完毕</span><br>function check() &#123;<br>oldQ=($&#123;Qarr[@]&#125;)<br>Qarr=()<br>for p in &quot;$&#123;oldQ[@]&#125;&quot;;do<br>if [[ -d &quot;/proc/$p&quot; ]];then<br>Qarr=($&#123;Qarr[@]&#125; $p)<br>fi<br>done<br>run=$&#123;#Qarr[@]&#125;<br>&#125;<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">main</span><br>for((i=0; i&lt;$Sp; i++));do<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 500000`; <span class="hljs-keyword">do</span> curl -o /dev/null -s -w %&#123;http_code&#125;:%&#123;time_total&#125; http://www.baidu.com ;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-keyword">done</span></span><br>echo &quot;running $i &quot;<br>sleep 3 &amp;<br>push $!<br>while [[ $run -gt $Qp ]];do<br>check<br>sleep 0.1<br>done<br>done<br>echo -e &quot;time-consuming: $SECONDS seconds&quot; #显示脚本执行耗时<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>CPU压测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPU压力测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
