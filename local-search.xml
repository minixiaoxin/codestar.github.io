<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>利用IDEA编译封装Android APK操作方法</title>
    <link href="/2023/11/03/%E5%88%A9%E7%94%A8IDEA%E7%BC%96%E8%AF%91%E5%B0%81%E8%A3%85Android%20APK%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <url>/2023/11/03/%E5%88%A9%E7%94%A8IDEA%E7%BC%96%E8%AF%91%E5%B0%81%E8%A3%85Android%20APK%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="利用IDEA编译封装Android-APK操作方法"><a href="#利用IDEA编译封装Android-APK操作方法" class="headerlink" title="利用IDEA编译封装Android APK操作方法"></a>利用IDEA编译封装Android APK操作方法</h1><p><strong>注：</strong>以下步骤基于IDEA Community 2023.1.1版本操作。</p><h2 id="1、安装Android-SDK"><a href="#1、安装Android-SDK" class="headerlink" title="1、安装Android SDK"></a>1、安装Android SDK</h2><p><img src="https://codestar.top/note-image/image-20230516182304899.png" alt="image-20230516182304899"></p><p>一开始检查无SDK安装，点击next进行安装：</p><p><img src="https://codestar.top/note-image/image-20230516182512814.png" alt="image-20230516182512814"></p><p>修改安装的内容，默认安装SDK即可，修改安装位置，点击next继续安装：</p><p><img src="https://codestar.top/note-image/image-20230516182440374.png" alt="image-20230516182440374"></p><p>继续next：</p><p><img src="https://codestar.top/note-image/image-20230516182649248.png" alt="image-20230516182649248"></p><p>同意协议，点击finish：</p><p><img src="https://codestar.top/note-image/image-20230516182757532.png" alt="image-20230516182757532"></p><p>之后会进入安装过程：</p><p><img src="https://codestar.top/note-image/image-20230516182846165.png" alt="image-20230516182846165"></p><p>最后下载完成finish即可。</p><h2 id="2、创建Android项目"><a href="#2、创建Android项目" class="headerlink" title="2、创建Android项目"></a>2、创建Android项目</h2><p>安装完SDK之后，next继续创建模板：</p><p><img src="https://codestar.top/note-image/image-20230516183928652.png" alt="image-20230516183928652"></p><p>选择Empty Activity模板：</p><p><img src="https://codestar.top/note-image/image-20230516184345674.png" alt="image-20230516184345674"></p><p><img src="https://codestar.top/note-image/image-20230516184801891.png" alt="image-20230516184801891"></p><p><img src="https://codestar.top/note-image/image-20230516185015732.png" alt="image-20230516185015732"></p><p><img src="https://codestar.top/note-image/image-20230517091251806.png" alt="image-20230517091251806"></p><h2 id="3、项目结构"><a href="#3、项目结构" class="headerlink" title="3、项目结构"></a>3、项目结构</h2><p>生成项目后，主要的结构如下：</p><p><img src="https://codestar.top/note-image/image-20230517141803431.png" alt="image-20230517141803431"></p><p>项目默认创建了主活动文件，目录为src&#x2F;main&#x2F;java&#x2F;com.*.*下面的MainActivity.kt，并且创建对应的主页面res&#x2F;layout&#x2F;activity_main.xml，<TextView>中默认写入了Hello World。</p><h2 id="4、运行环境准备"><a href="#4、运行环境准备" class="headerlink" title="4、运行环境准备"></a>4、运行环境准备</h2><p>在run窗口配置，进入Device Manager中新建虚拟设备：</p><p><img src="https://codestar.top/note-image/image-20230517142157196.png" alt="image-20230517142157196"></p><p><img src="https://codestar.top/note-image/image-20230517142311897.png" alt="image-20230517142311897"></p><p>选择任意一种phone设备，之后next进入下一步：</p><p><img src="https://codestar.top/note-image/image-20230517142510075.png" alt="image-20230517142510075"></p><p>获取手机镜像：</p><ul><li>选择镜像：</li></ul><p><img src="https://codestar.top/note-image/image-20230517142708298.png" alt="image-20230517142708298"></p><ul><li>同意协议之后，下载镜像：</li></ul><p><img src="https://codestar.top/note-image/image-20230517142737944.png" alt="image-20230517142737944"></p><p>等待下载完成：</p><p><img src="https://codestar.top/note-image/image-20230517143012763.png" alt="image-20230517143012763"></p><p>安装完成：</p><p><img src="https://codestar.top/note-image/image-20230517150615464.png" alt="image-20230517150615464"></p><ul><li>安装HAXM</li></ul><p><img src="https://codestar.top/note-image/image-20230517150721174.png" alt="image-20230517150721174"></p><p><img src="https://codestar.top/note-image/image-20230517150745014.png" alt="image-20230517150745014"></p><p>选则安装程序，同意协议，点击next继续（安装过程弹出需要管理员权限，同意安装即可）：</p><p><img src="https://codestar.top/note-image/image-20230517150820053.png" alt="image-20230517150820053"></p><p>安装完成，finish结束：</p><p><img src="https://codestar.top/note-image/image-20230517150930328.png" alt="image-20230517150930328"></p><p>安装结束后，此提示依旧存在，可忽略，此页面为静态页面，后续重新打开页面会修复：</p><p><img src="https://codestar.top/note-image/image-20230517151154107.png" alt="image-20230517151154107"></p><ul><li>选中镜像，继续下一步创建：</li></ul><p><img src="https://codestar.top/note-image/image-20230517151139175.png" alt="image-20230517151139175"></p><p>finish完成创建：</p><p><img src="https://codestar.top/note-image/image-20230517151448373.png" alt="image-20230517151448373"></p><p>创建完成之后会出现在虚拟设备列表中：</p><p><img src="https://codestar.top/note-image/image-20230517151405917.png" alt="image-20230517151405917"></p><h2 id="5、安卓虚拟机运行APP"><a href="#5、安卓虚拟机运行APP" class="headerlink" title="5、安卓虚拟机运行APP"></a>5、安卓虚拟机运行APP</h2><p>选择虚拟机直接点击右上角运行图标运行APP</p><p><img src="https://codestar.top/note-image/image-20230517154808072.png" alt="image-20230517154808072"></p><p>运行后如下：</p><p><img src="https://codestar.top/note-image/image-20230517154646772.png" alt="image-20230517154646772"></p><p>缩小虚拟设备列表：</p><p><img src="https://codestar.top/note-image/Snipaste_2023-05-17_15-52-20.png" alt="Snipaste_2023-05-17_15-52-20"></p><p>截图：</p><p><img src="https://codestar.top/note-image/image-20230517154622689.png" alt="image-20230517154622689"></p><p>将HelloWrord字样修改成其他，然后点击运行按钮旁的第二个重启按钮，更新的代码会即时生效而不用重启<a href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E6%9C%BA&spm=1001.2101.3001.7020">虚拟机</a>，开发过程中便于我们调试。</p><ul><li>修改布局内容</li></ul><p>选中元素，右击进入Go to XML：</p><p><img src="https://codestar.top/note-image/image-20230517155853605.png" alt="image-20230517155853605"></p><p>或点击页面右上角Code进入编辑：</p><p><img src="https://codestar.top/note-image/image-20230517160041903.png" alt="image-20230517160041903"></p><p>XML页面可以修改页面布局，点击右上角design切换至原来页面：</p><p><img src="https://codestar.top/note-image/image-20230517155757627.png" alt="image-20230517155757627"></p><h2 id="6、发布APK"><a href="#6、发布APK" class="headerlink" title="6、发布APK"></a>6、发布APK</h2><p>开发完应用app后，我们就可以发布成apk，提供他人下载安装。</p><p>发布方法：</p><p>点击Build—》Generate Signed Bundle &#x2F; APK</p><p><img src="https://codestar.top/note-image/image-20230517161604019.png" alt="image-20230517161604019"></p><p>选择APK，next：</p><p><img src="https://codestar.top/note-image/image-20230517161627540.png" alt="image-20230517161627540"></p><p>Key store path，选择新建key文件</p><p><img src="https://codestar.top/note-image/image-20230517161717098.png" alt="image-20230517161717098"></p><p>按照提示填写key存放路径和Password以及名称和组织，点击OK继续下一步：</p><p><strong>注：</strong>后续每一轮打包发布APK都需要此key文件和Password，很重要，记好谨防丢失。</p><p><img src="https://codestar.top/note-image/image-20230517162141618.png" alt="image-20230517162141618"></p><p>记住密码，进入下一步：</p><p><img src="/IDEA%E7%BC%96%E8%AF%91%E5%B0%81%E8%A3%85APK%E6%8C%87%E5%AF%BC.assets/image-20230517163133491.png" alt="image-20230517163133491"></p><p>选择发布版本有debug和release两种，选择其中一个进行打包：debug是内测版文件比较大，用于开发调试。release是发行版比较小，运行也快。</p><p><img src="https://codestar.top/note-image/image-20230517163442348.png" alt="image-20230517163442348"></p><p><img src="https://codestar.top/note-image/image-20230517165038317.png" alt="image-20230517165038317"></p><p>打包完成apk的输出目录默认会在app下如目标路径下如AndroidAPP\app\release，确认完成后，该目录下就生成了apk文件，发到手机上就能安装运行了。</p><p>至此整个APK封装发布流程完成了。</p>]]></content>
    
    
    <categories>
      
      <category>Android技术</category>
      
      <category>Android-APK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>apk包编译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android adb 利用wlan局域网进行无线调试方法</title>
    <link href="/2023/10/31/Android%20adb%20%E5%88%A9%E7%94%A8wlan%E5%B1%80%E5%9F%9F%E7%BD%91%E8%BF%9B%E8%A1%8C%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    <url>/2023/10/31/Android%20adb%20%E5%88%A9%E7%94%A8wlan%E5%B1%80%E5%9F%9F%E7%BD%91%E8%BF%9B%E8%A1%8C%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-adb-利用wlan局域网进行无线调试方法"><a href="#Android-adb-利用wlan局域网进行无线调试方法" class="headerlink" title="Android adb 利用wlan局域网进行无线调试方法"></a>Android adb 利用wlan局域网进行无线调试方法</h1><h2 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h2><p>利用两端设备同处同一个局域网实现数据共享，连接adb设备，通过无线局域网进行数据传输，调试。</p><h2 id="2、无线设备连接"><a href="#2、无线设备连接" class="headerlink" title="2、无线设备连接"></a>2、无线设备连接</h2><p><strong>注：</strong>首次连接需使用USB线</p><h3 id="2-1、TCP端口启用"><a href="#2-1、TCP端口启用" class="headerlink" title="2-1、TCP端口启用"></a>2-1、TCP端口启用</h3><p>待连Android设备，开启tcp连接，放开5555端口（可自定义1023-65535都可以用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">以5555端口开启TCP连接</span><br>adb tcpid 5555<br></code></pre></td></tr></table></figure><p>执行无报错即可：</p><p><img src="https://codestar.top/note-image/image-20230804111208300.png" alt="image-20230804111208300"></p><h3 id="2-2、启用热点"><a href="#2-2、启用热点" class="headerlink" title="2-2、启用热点"></a>2-2、启用热点</h3><p>待连Android设备开启无线热点，检查对应IP地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell ifconfig<br></code></pre></td></tr></table></figure><p>检查wlan2 IP地址：</p><p><img src="https://codestar.top/note-image/image-20230411200715363.png" alt="image-20230411200715363"></p><h3 id="2-3、连接adb设备"><a href="#2-3、连接adb设备" class="headerlink" title="2-3、连接adb设备"></a>2-3、连接adb设备</h3><ul><li><p>1、PC连接Android设备热点</p></li><li><p>2、指定5555端口（2-1配置的端口）连接设备：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb connect 192.168.46.1:5555<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230804111304500.png" alt="image-20230804111304500"></p><p>出现connected表示已连接adb设备。</p><h3 id="2-4、检查设备连接"><a href="#2-4、检查设备连接" class="headerlink" title="2-4、检查设备连接"></a>2-4、检查设备连接</h3><p>检查设备连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb devices -l<br></code></pre></td></tr></table></figure><p>已连接的设备展示如下：</p><p><img src="https://codestar.top/note-image/image-20231031002843478.png" alt="image-20231031002843478"></p><p>后续可以正常的执行所有支持的adb指令：</p><p><img src="https://codestar.top/note-image/image-20230804111451998.png" alt="image-20230804111451998"></p>]]></content>
    
    
    <categories>
      
      <category>Android技术</category>
      
      <category>Android调试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm下载源如何修改为其他源地址</title>
    <link href="/2023/10/29/npm%E4%B8%8B%E8%BD%BD%E6%BA%90%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%85%B6%E4%BB%96%E6%BA%90%E5%9C%B0%E5%9D%80/"/>
    <url>/2023/10/29/npm%E4%B8%8B%E8%BD%BD%E6%BA%90%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%85%B6%E4%BB%96%E6%BA%90%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h1 id="npm下载源如何修改为其他源地址"><a href="#npm下载源如何修改为其他源地址" class="headerlink" title="npm下载源如何修改为其他源地址"></a>npm下载源如何修改为其他源地址</h1><h2 id="1、国内源地址清单"><a href="#1、国内源地址清单" class="headerlink" title="1、国内源地址清单"></a>1、国内源地址清单</h2><p>官方的源地址： <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></p><p>由于服务器在海外，国内访问速度会慢很多。下面是我搜集的一些npm国内的镜像源</p><table><thead><tr><th align="center">源名称</th><th align="center">npm源地址</th><th align="center">推荐指数</th></tr></thead><tbody><tr><td align="center">淘宝新镜像源</td><td align="center"><a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></td><td align="center">★★★★</td></tr><tr><td align="center">腾讯云镜像源</td><td align="center"><a href="http://mirrors.cloud.tencent.com/npm/">http://mirrors.cloud.tencent.com/npm/</a></td><td align="center">★★★</td></tr><tr><td align="center">华为云镜像源</td><td align="center"><a href="https://mirrors.huaweicloud.com/repository/npm/">https://mirrors.huaweicloud.com/repository/npm/</a></td><td align="center">★★★</td></tr><tr><td align="center">cnpm镜像地址</td><td align="center"><a href="http://registry.cnpmjs.org/">http://registry.cnpmjs.org</a></td><td align="center">★★</td></tr><tr><td align="center">淘宝旧源镜像</td><td align="center"><a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></td><td align="center">★</td></tr></tbody></table><p>其中淘宝旧镜像源在2022年5月31日废弃，不过至今（2023年10月29日）还是能正常使用，建议是使用新版镜像源。</p><h2 id="2、修改npm源"><a href="#2、修改npm源" class="headerlink" title="2、修改npm源"></a>2、修改npm源</h2><h3 id="2-1、临时修改"><a href="#2-1、临时修改" class="headerlink" title="2.1、临时修改"></a>2.1、临时修改</h3><p>如果只是在某一次使用源，可以临时修改，通过在install命令前加上<code>--registry 源地址</code>即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：使用淘宝npm源下载cnpm</span><br>npm --registry https://registry.npm.taobao.org install cnpm<br></code></pre></td></tr></table></figure><h3 id="2-2、永久修改"><a href="#2-2、永久修改" class="headerlink" title="2.2、永久修改"></a>2.2、永久修改</h3><h4 id="方法一：使用命令行修改"><a href="#方法一：使用命令行修改" class="headerlink" title="方法一：使用命令行修改"></a>方法一：使用命令行修改</h4><p>永久配置，直接使用指令修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>修改之后生效如下，查询npm配置的源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config get registry<br></code></pre></td></tr></table></figure><p>返回淘宝镜像源说明配置已经生效了：</p><p><img src="https://codestar.top/note-image/image-20231029161636529.png" alt="image-20231029161636529"></p><p>按照个人喜好配置相应的镜像源即可。</p><h4 id="方法二：直接修改配置文件"><a href="#方法二：直接修改配置文件" class="headerlink" title="方法二：直接修改配置文件"></a>方法二：直接修改配置文件</h4><p>在自己的电脑<code>C:\Users\username</code>上修改<code>.npmrc</code>文件，如没有则新建txt文件，把名称和后缀改成一样即可。</p><p>然后将其中的内容修改如下：[D:\Node.js]替换成自己的安装路径，registry改为镜像源地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">prefix=D:\Node.js\node_global<br>cache=D:\Node.js\node_cache<br>registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231029163854250.png" alt="image-20231029163854250"></p><h2 id="3、npm仓库管理工具"><a href="#3、npm仓库管理工具" class="headerlink" title="3、npm仓库管理工具"></a>3、npm仓库管理工具</h2><p>使用<code>nrm</code>来进行仓库管理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g nrm<br></code></pre></td></tr></table></figure><p>通过工具查看可配置的镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nrm ls<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231029162829130.png" alt="image-20231029162829130"></p><p>其他更多的使用方法，可以查看官方说明：<a href="https://github.com/Pana/nrm">https://github.com/Pana/nrm</a></p>]]></content>
    
    
    <categories>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>coredump基础知识及操作-linux篇</title>
    <link href="/2023/10/24/coredump%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8A%E6%93%8D%E4%BD%9C-linux%E7%AF%87/"/>
    <url>/2023/10/24/coredump%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8A%E6%93%8D%E4%BD%9C-linux%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="1、coredump简介"><a href="#1、coredump简介" class="headerlink" title="1、coredump简介"></a>1、coredump简介</h2><p>​在系统的运行过程中，有许多时候会出现程序运行不正常的情况，进而产生崩溃现象，而为了方便记录和追溯问题的发生进程和或相关的线程信息，亦或是崩溃时间等，有了coredump这种文件。</p><ul><li><p>Linux中的dump文件为core文件，以core开头，类似如下：</p><p><img src="https://codestar.top/note-image/image-20230112112849208.png" alt="image-20230112112849208"></p></li><li><p>Windows中dump文件为dmp文件，类似如下：</p><p><img src="https://codestar.top/note-image/image-20230112112958003.png" alt="image-20230112112958003"></p></li></ul><h2 id="2、core生成限制"><a href="#2、core生成限制" class="headerlink" title="2、core生成限制"></a>2、core生成限制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查core生成大小限制</span><br>ulimit -c<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查文件大小限制</span><br>ulimit<br><span class="hljs-meta prompt_"># </span><span class="language-bash">限制大小不超过1024KB</span><br>ulimit -c 1024<br></code></pre></td></tr></table></figure><p>返回值含义：</p><ul><li>0—-禁止生成core文件</li><li>ulimited—-未限制core大小</li><li>数值—-限制大小不超过该设定值KB</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设定为无限制</span><br>ulimit -c unlimited<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230112105439700.png" alt="image-20230112105439700"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查所有的用户配置，各项返回值含义同上</span><br>ulimit -a<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230112113607292.png" alt="image-20230112113607292"></p><p>设定单一用户程序上限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设定单个用户程序上限为3：限制生成的dump数量</span><br>ulimit -u 3<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230112114526249.png" alt="image-20230112114526249"></p><p>设定之后，会将单个程序的core数量限制在设定值之内：</p><p><img src="https://codestar.top/note-image/image-20231024014749829.png" alt="image-20231024014749829"></p><h2 id="3、core相关配置"><a href="#3、core相关配置" class="headerlink" title="3、core相关配置"></a>3、core相关配置</h2><h3 id="3-1、配置文件"><a href="#3-1、配置文件" class="headerlink" title="3-1、配置文件"></a>3-1、配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置文件</span><br>/proc/sys/kernel/core_pattern<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询结果为执行core生成的程序路径，及生成格式</span><br>cat /proc/sys/kernel/core_pattern<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230112105615231.png" alt="image-20230112105615231"></p><p>程序段中记录着详细的core生成路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /bin/coredump-handler.sh<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231024014844990.png" alt="image-20231024014844990"></p><h3 id="3-2、配置文件格式"><a href="#3-2、配置文件格式" class="headerlink" title="3-2、配置文件格式"></a>3-2、配置文件格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">％p 转储过程的PID<br>％u （数字）转储进程的实际UID<br>％G （数字）转储过程的实际GID<br>％s 引起转储的信号数<br>％t 转储时间，表示为自1970年1月1日00:00:00 +0000（UTC）以来的秒数<br>％H 主机名（与uname（2）返回的节点名相同）<br>％e 可执行文件名（无路径前缀）<br>％E 可执行文件的路径名，用斜杠（’/’）替换为感叹号（’！’）。<br>％C 崩溃过程的核心文件大小软资源限制（自Linux 2.6.24开始）<br></code></pre></td></tr></table></figure><h2 id="4、core生成验证"><a href="#4、core生成验证" class="headerlink" title="4、core生成验证"></a>4、core生成验证</h2><p>使用kill指令或pkill指令来验证core生成逻辑：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">根据进程名来abort进程并生成core文件</span><br>pkill -6 proc_name<br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据PID来abort进程并生成core文件</span><br>ps -aux | grep proc_name<br>kill -6 [PID]<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20231024014918951.png" alt="image-20231024014918951"></p><p><strong>拓展：</strong><code>kill -l</code>查看kill对应的信号量列表</p><p><img src="https://codestar.top/note-image/image-20230112142536039.png" alt="image-20230112142536039"></p><h2 id="5、core调试"><a href="#5、core调试" class="headerlink" title="5、core调试"></a>5、core调试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">gdb 程序名称 core名称</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">示例：</span><br>gdb someip_manager core_someip_manager__6609_1672103695<br></code></pre></td></tr></table></figure><p>gdb面板输入<code>where</code>或者<code>bt</code>查找出错的那一行或函数，具体错误信息可以在<code>#0~#05</code>中查看：</p><p><img src="https://codestar.top/note-image/image-20230112142121648.png" alt="image-20230112142121648"></p><p><img src="https://codestar.top/note-image/image-20230112162822742.png" alt="image-20230112162822742"></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>调试技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>COREDUMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下如何开启允许root用户远程登录</title>
    <link href="/2023/10/23/Linux%E4%B8%8B%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E5%85%81%E8%AE%B8root%E7%94%A8%E6%88%B7%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    <url>/2023/10/23/Linux%E4%B8%8B%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E5%85%81%E8%AE%B8root%E7%94%A8%E6%88%B7%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h2><p>在很多时候，远程登录使用的是用户身份登录，在系统路径下的文件无法通过用户角色直接下载。下载的话，需要将文件移动到当前用户有权限的路径下才能下载，比较麻烦。而另一种下载方法是以root用户的身份登录系统进行原路径下载，但多数SSH为了提高系统安全性，<strong>默认关闭了root远程登录的权限</strong>，需手动配置SSH，使其能够允许root远程登录，以Ubuntu系统为参考，具体操作如下。</p><h2 id="2、配置SSH"><a href="#2、配置SSH" class="headerlink" title="2、配置SSH"></a>2、配置SSH</h2><ul><li>查找配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">一般为这个路径：</span><br>/etc/ssh/sshd_config<br><span class="hljs-meta prompt_"># </span><span class="language-bash">无此路径的情况下直接查找配置文件</span><br>find / -name *sshd_config<br></code></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/ssh/sshd_config<br><span class="hljs-meta prompt_"># </span><span class="language-bash">键入i进入编辑模式，加入以下内容。wq保存</span><br>PermitRootLogin yes<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230530115045644.png" alt="image-20230530115045644"></p><h2 id="3、重启服务进程"><a href="#3、重启服务进程" class="headerlink" title="3、重启服务进程"></a>3、重启服务进程</h2><h3 id="3-1、SSH与SSHD进程的区别"><a href="#3-1、SSH与SSHD进程的区别" class="headerlink" title="3-1、SSH与SSHD进程的区别"></a>3-1、SSH与SSHD进程的区别</h3><p>SSH与SSHD主要区别在于主动或被动连接：</p><ul><li>SSH为<strong>客户端</strong>主动远程其他设备即服务端；</li><li>SSHD为<strong>服务端</strong>被动接收来其他设备的SSH请求。</li></ul><p>具体差异点总结如下：</p><table><thead><tr><th>类别</th><th align="left">SSH</th><th>SSHD</th></tr></thead><tbody><tr><td>定义</td><td align="left">SSH是Secure Shell的缩写，它是一种加密网络协议，用于远程登录和安全文件传输。</td><td>SSHD是SSH Daemon的缩写，是运行在服务器端的SSH软件守护进程。</td></tr><tr><td>作用</td><td align="left">用来进行远程连接、远程管理和传输文件等操作。</td><td>作为服务器端软件，接收来自客户端的连接请求，并为其提供安全的远程登录和文件传输功能。</td></tr><tr><td>运行位置</td><td align="left">运行在<strong>客户端</strong>上。</td><td>运行在<strong>服务端</strong>上。</td></tr><tr><td>端口号</td><td align="left">默认使用22端口。</td><td>默认使用22端口。</td></tr><tr><td>用户验证</td><td align="left">通过用户名和密码进行验证。</td><td>支持多种用户验证方式，包括用户名和密码、公钥认证、Kerberos身份验证等。</td></tr><tr><td>安全性</td><td align="left">基于公开密钥加密技术，采用对称加密和非对称加密相结合的方式保证数据传输的安全性。</td><td>通过数字证书和加密算法保障通信过程中数据的安全性和完整性。</td></tr><tr><td>使用范围</td><td align="left">适用于Linux、Unix、Mac OS等操作系统。</td><td>适用于Linux、Unix、Mac OS等操作系统。</td></tr></tbody></table><h3 id="3-2、重启SSHD生效配置"><a href="#3-2、重启SSHD生效配置" class="headerlink" title="3-2、重启SSHD生效配置"></a>3-2、重启SSHD生效配置</h3><p>以下指令重启SSHD服务，两条指令等价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart sshd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>service sshd restart<br></code></pre></td></tr></table></figure><p>执行上述指令会重启SSHD服务，也就是重启整个SSH<strong>服务器进程</strong>，同时也会<strong>重新加载配置文件</strong>。这个命令通常用于对SSH服务器进行设置和调试时，或者在修改SSH服务配置后使其生效。执行该命令不会影响其他正在运行的进程，只会重启SSH服务进程。</p><h2 id="4、root用户下载文件"><a href="#4、root用户下载文件" class="headerlink" title="4、root用户下载文件"></a>4、root用户下载文件</h2><h3 id="4-1、root用户远程登录"><a href="#4-1、root用户远程登录" class="headerlink" title="4-1、root用户远程登录"></a>4-1、root用户远程登录</h3><p>使用远程登录软件或平台填入root名称及Linux设备IP，这里我使用的是<strong>MobaXterm</strong>，之后会认证要求输入root密码，登入即可：</p><p><img src="https://codestar.top/note-image/image-20230530120223288.png" alt="image-20230530120223288"></p><p>登录成功如下，进入Linux服务器shell面板：</p><p><img src="https://codestar.top/note-image/image-20230530120301175.png" alt="image-20230530120301175"></p><h3 id="4-2、下载文件"><a href="#4-2、下载文件" class="headerlink" title="4-2、下载文件"></a>4-2、下载文件</h3><p>使用ftp下载工具：如FileZilla，xftp、MobaXterm（集成到软件内部），同样输入Linux端IP、用户名（root）、密码及端口（22）登录远程设备，进入需要下载的文件路径，拖动文件至本地路径下载即可：</p><p><img src="https://codestar.top/note-image/image-20230530120934802.png" alt="image-20230530120934802"></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>Linux-SSH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSH远程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python安装报错之0x80072f7d错误解决方法</title>
    <link href="/2023/10/21/Python%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E4%B9%8B0x80072f7d%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2023/10/21/Python%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E4%B9%8B0x80072f7d%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一、问题现象"><a href="#一、问题现象" class="headerlink" title="一、问题现象"></a>一、问题现象</h2><p>安装过程中出现报错：0x80072f7d - 未指定的错误</p><p><img src="https://codestar.top/note-image/image-20231022234449760.png" alt="image-20231022234449760"></p><p>这个问题发生，导致后续无法配置Python环境，必须要解决掉它。</p><h2 id="二、问题原因"><a href="#二、问题原因" class="headerlink" title="二、问题原因"></a>二、问题原因</h2><p>为了弄清是什么原因导致出现这种致命性问题，去找了一下”度娘”，发现原因如下：</p><blockquote><p>在Python的安装过程中，会涉及到数据传输，其中会涉及到一个协议TLS，安全传输层协议，安装Python的过程中必须要TLS协议的支持，我本机没有开启TLS协议导致出错。目前TLS1.2是常见传输协议版本，不过有的网站还是TLS1.1。所以得同时开启两个协议，TLS1.1、TLS1.2，具体操作来看解决方法。</p></blockquote><h2 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h2><p>1、<kbd>win</kbd>+<kbd>r</kbd>打开运行界面，输入<code>control</code>，打开控制面板：</p><p>2、进入“网络和Internet”：</p><p><img src="https://codestar.top/note-image/image-20231022234509493.png" alt="image-20231022234509493"></p><p>2、点击“Internet选项”：</p><p><img src="https://codestar.top/note-image/image-20231022234640504.png" alt="image-20231022234640504"></p><p>3、“Internet属性”中进入“高级”，勾选“使用TLS1.1”、“使用TLS1.2”：</p><p><img src="https://codestar.top/note-image/image-20231022234803305.png" alt="image-20231022234803305"></p><p>点击应用，重新安装Python。</p><h2 id="四、重新安装Python"><a href="#四、重新安装Python" class="headerlink" title="四、重新安装Python"></a>四、重新安装Python</h2><p>重新安装，选择对应的安装路径和安装选项，一路下一步安装即可，中间安装各类包需要费些时间，等待安装成功即可：</p><p><img src="https://codestar.top/note-image/image-20231022234824356.png" alt="image-20231022234824356"></p><p>大功告成，安装成功~</p><p><img src="https://codestar.top/note-image/image-20231022234840585.png" alt="image-20231022234840585"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python安装</tag>
      
      <tag>异常解决</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows中Java安装及环境变量配置</title>
    <link href="/2023/10/21/Windows%E4%B8%ADJava%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/10/21/Windows%E4%B8%ADJava%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1、下载jdk安装包"><a href="#1、下载jdk安装包" class="headerlink" title="1、下载jdk安装包"></a>1、下载jdk安装包</h2><p>通过以下镜像站下载jdk安装包：<a href="https://www.techspot.com/downloads/5553-java-jdk.html">https://www.techspot.com/downloads/5553-java-jdk.html</a></p><p>这里我选择的是Java11，选择对应的平台下载即可：</p><p><img src="https://codestar.top/note-image/image-20230820212852255.png" alt="image-20230820212852255"></p><p>在该页面下，还有Java其他的版本提供下载，需要的可以进入对应页面用同样的方式下载：</p><p><img src="https://codestar.top/note-image/image-20230820212953315.png" alt="image-20230820212953315"></p><h2 id="2、安装JDK"><a href="#2、安装JDK" class="headerlink" title="2、安装JDK"></a>2、安装JDK</h2><p>下载完成之后，双击安装包：</p><p><img src="https://codestar.top/note-image/image-20230820213208823.png" alt="image-20230820213208823"></p><p>根据安装向导，自定义安装路径，一路安装完成即可。安装完成了之后，还无法使用，需要配置环境变量才能在PC中各环境下使用。</p><h2 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h2><h3 id="3-1、环境变量配置页进入"><a href="#3-1、环境变量配置页进入" class="headerlink" title="3.1、环境变量配置页进入"></a>3.1、环境变量配置页进入</h3><p>环境变量需要配置的内容有三点，分别是JAVA_HOME、CLASSPATH、path。Windows中<kbd>win</kbd>+<kbd>r</kbd>打开运行面板，输入<code>sysdm.cpl</code>，进入<strong>系统属性</strong>页面：</p><p><img src="https://codestar.top/note-image/image-20230820213715533.png" alt="image-20230820213715533"></p><p>之后切到<strong>高级</strong>页签，点击<strong>环境变量</strong>进入环境变量配置页面，进入之后就开始配置具体的变量名了：</p><p><img src="https://codestar.top/note-image/image-20230820213825582.png" alt="image-20230820213825582"></p><h3 id="3-2、环境变量1：JAVA-HOME"><a href="#3-2、环境变量1：JAVA-HOME" class="headerlink" title="3.2、环境变量1：JAVA_HOME"></a>3.2、环境变量1：JAVA_HOME</h3><p>在系统变量中，<strong>新建</strong>环境变量，变量名给”JAVA_HOME”，变量值<strong>填入JAVA的安装根目录</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">根据实际情况填入</span><br>D:\JDK11<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230820214141226.png" alt="image-20230820214141226"></p><h3 id="3-3、环境变量2：CLASSPATH"><a href="#3-3、环境变量2：CLASSPATH" class="headerlink" title="3.3、环境变量2：CLASSPATH"></a>3.3、环境变量2：CLASSPATH</h3><p>这个环境变量配置的为<strong>JAVA所有依赖的包路径</strong>。</p><p>同样，在系统变量中<strong>新建</strong>环境变量，变量名给”CLASSPATH”，变量值填入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">注意，最前面有个.</span><br>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230820214359184.png" alt="image-20230820214359184"></p><p>%JAVA_HOME%意思为取<strong>名称为”JAVA_HOME”的环境变量</strong>的值，即写成这样也可以，两者等价：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">.;D:\JDK11\lib\dt.jar;D:\JDK11\lib\tools.jar;<br></code></pre></td></tr></table></figure><p>推荐上面的写法，方便管理。</p><h3 id="3-4、环境变量3：Path"><a href="#3-4、环境变量3：Path" class="headerlink" title="3.4、环境变量3：Path"></a>3.4、环境变量3：Path</h3><p>这个环境变量配置的为<strong>Java中jdk和jre的可执行bin文件</strong>。</p><p>找到Path环境变量，新建两条，填入以下内容：Windows10中建议分开写，不然会出现无法识别。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">合并写法</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">分开写法</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">JAVA_HOME%\bin</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">JAVA_HOME%\jre\bin</span><br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20230820215621671.png" alt="image-20230820215621671"></p><h2 id="4、验证安装"><a href="#4、验证安装" class="headerlink" title="4、验证安装"></a>4、验证安装</h2><p>进入powershell面板，输入<code>java --version</code>验证配置，如果正常返回版本号，则环境配置成功：</p><p><img src="https://codestar.top/note-image/image-20230820215906035.png" alt="image-20230820215906035"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记本安装纯净Ubuntu 22.04 LTS系统全流程</title>
    <link href="/2023/10/12/%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85%E7%BA%AF%E5%87%80Ubuntu%2022.04%20LTS%E7%B3%BB%E7%BB%9F%E5%85%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/10/12/%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%AE%89%E8%A3%85%E7%BA%AF%E5%87%80Ubuntu%2022.04%20LTS%E7%B3%BB%E7%BB%9F%E5%85%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1、镜像下载"><a href="#1、镜像下载" class="headerlink" title="1、镜像下载"></a>1、镜像下载</h2><p>阿里云镜像站下载Ubuntu 22.04 LTS系统镜像：<a href="https://mirrors.aliyun.com/ubuntu-releases/22.04/">https://mirrors.aliyun.com/ubuntu-releases/22.04/</a></p><p><img src="https://codestar.top/note-image/image-20221103221343334.png" alt="image-20221103221343334"></p><h2 id="2、启动盘制作"><a href="#2、启动盘制作" class="headerlink" title="2、启动盘制作"></a>2、启动盘制作</h2><p><img src="https://codestar.top/note-image/image-20221031235342705.png" alt="image-20221031235342705"></p><p>打开后的镜像在这里：</p><p><img src="https://codestar.top/note-image/image-20221031235414003.png" alt="image-20221031235414003"></p><p>点击启动-写入硬盘映像，该步骤<strong>需要管理员</strong>权限：</p><p><img src="https://codestar.top/note-image/image-20221031235725870.png" alt="image-20221031235725870"></p><p>镜像文件会自动同步：</p><p>选择对应的磁盘驱动器和写入方式：注意别选错盘，该步骤会对选中盘先进行格式化。</p><p><img src="https://codestar.top/note-image/image-20221031235652288.png" alt="image-20221031235652288"></p><p>点击写入，开始制作。大约3-5分钟：</p><p><img src="https://codestar.top/note-image/image-20221101201949072.png" alt="image-20221101201949072"></p><p>刻录成功：</p><p><img src="https://codestar.top/note-image/image-20221101202254151.png" alt="image-20221101202254151"></p><h2 id="3、系统安装"><a href="#3、系统安装" class="headerlink" title="3、系统安装"></a>3、系统安装</h2><h3 id="3-1、BIOS设置"><a href="#3-1、BIOS设置" class="headerlink" title="3-1、BIOS设置"></a>3-1、BIOS设置</h3><ul><li>SATA工作方式确认</li></ul><p>笔记本开启按<strong>F2</strong>进入BIOS，确保为AHCI模式，之后保存配置重启。</p><p>&#x3D;&#x3D;注：&#x3D;&#x3D;不同品牌笔记本进入BIOS不太一样，本文以戴尔笔记本为例。</p><p><img src="https://codestar.top/note-image/image-20221103221825965.png" alt="image-20221103221825965"></p><ul><li>切换U盘启动</li></ul><p>重启按<strong>F12</strong>进入启动方式选择，在UEFI选项中选择USB设备，选中后回车，启动安装。</p><p><img src="https://codestar.top/note-image/image-20221103222031067.png" alt="image-20221103222031067"></p><h3 id="3-2、Ubuntu安装引导"><a href="#3-2、Ubuntu安装引导" class="headerlink" title="3-2、Ubuntu安装引导"></a>3-2、Ubuntu安装引导</h3><ul><li>安装界面</li></ul><p>选择<strong>*Try or Install Ubuntu</strong></p><p><img src="https://codestar.top/note-image/image-20221103222341452.png" alt="image-20221103222341452"></p><p>进入启动页面</p><p><img src="https://codestar.top/note-image/image-20221103222459925.png" alt="image-20221103222459925"></p><ul><li>安装引导</li></ul><p>语言下拉到列表最下方，选择<strong>中文(简体)<strong>，点击</strong>安装Ubuntu</strong></p><p><img src="https://codestar.top/note-image/image-20221103222550069.png" alt="image-20221103222550069"></p><ul><li>键盘布局</li></ul><p>两项均选择Chinese，点击继续</p><p><img src="https://codestar.top/note-image/image-20221103222703887.png" alt="image-20221103222703887"></p><ul><li>软件安装</li></ul><p>选中正常安装，想节省安装时间，可以取消勾选”<strong>安装Ubuntu时下载更新</strong>“，点击继续</p><p><img src="https://codestar.top/note-image/image-20221103222819398.png" alt="image-20221103222819398"></p><ul><li>安装类型</li></ul><p>如果想同Windows共存，选择第一项。此处我需要安装纯Ubuntu系统，选择第二项。点击继续</p><p><img src="https://codestar.top/note-image/image-20221103223137388.png" alt="image-20221103223137388"></p><p><strong>注：</strong>如果需要ZFS文件系统，可以在高级特性中选择，添加。</p><p><img src="https://codestar.top/note-image/image-20221103223320624.png" alt="image-20221103223320624"></p><ul><li>选择安装盘</li></ul><p>选择需要清除并安装的系统盘，点击继续安装</p><p><img src="https://codestar.top/note-image/image-20221103223203877.png" alt="image-20221103223203877"></p><p>提示写入确定弹窗，会进行格式化，点击继续即可：</p><p><img src="https://codestar.top/note-image/image-20221103223420973.png" alt="image-20221103223420973"></p><ul><li>时区选择</li></ul><p>搜索选择，上海时区，点击继续</p><p><img src="https://codestar.top/note-image/image-20221103223420973.png" alt="image-20221103223420973"></p><ul><li>设置用户名</li></ul><p><img src="https://codestar.top/note-image/image-20221103223645533.png" alt="image-20221103223645533"></p><ul><li>进入安装过程</li></ul><p><img src="https://codestar.top/note-image/image-20221103223714202.png" alt="image-20221103223714202"></p><p><img src="https://codestar.top/note-image/image-20221103223721816.png" alt="image-20221103223721816"></p><ul><li>安装完成启动</li></ul><p>安装完成后需要移除U盘，再启动。</p><p><img src="https://codestar.top/note-image/image-20221103223747669.png" alt="image-20221103223747669"></p><p>启动完成，就大功告成啦：</p><p><img src="https://codestar.top/note-image/image-20221103223839534.png" alt="image-20221103223839534"></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>系统安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux系统</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 22.04 LTS静态IP配置及源更新</title>
    <link href="/2023/10/12/Ubuntu%2022.04%20LTS%E9%9D%99%E6%80%81IP%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%BA%90%E6%9B%B4%E6%96%B0/"/>
    <url>/2023/10/12/Ubuntu%2022.04%20LTS%E9%9D%99%E6%80%81IP%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%BA%90%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1、网络模式确认"><a href="#1、网络模式确认" class="headerlink" title="1、网络模式确认"></a>1、网络模式确认</h2><p><strong>注：</strong>以下操作均基于VMWARE虚拟环境，需要确认虚拟网络配置为NAT模式。</p><p>检查方式：编辑——&gt;虚拟网络编辑器，进入到以下页面。配置和记住当前设置的<strong>网关IP、子网掩码、IP段</strong></p><p><img src="https://codestar.top/note-image/image-20221007114038651.png" alt="image-20221007114038651"></p><h2 id="2、静态IP配置"><a href="#2、静态IP配置" class="headerlink" title="2、静态IP配置"></a>2、静态IP配置</h2><h3 id="2-1、切换管理员权限"><a href="#2-1、切换管理员权限" class="headerlink" title="2-1、切换管理员权限"></a>2-1、切换管理员权限</h3><p>开启虚拟机，进入到terminal，切换到管理员模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">执行后输入登录用户密码</span><br>sudo -i<br><span class="hljs-meta prompt_"># </span><span class="language-bash">初装系统root密码为随机密码，需要自行更改</span><br>passwd root<br><span class="hljs-meta prompt_"># </span><span class="language-bash">按照提示之后输入命令更改密码，提示successful为更新成功</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">之后登录执行以下指令直接进入管理员模式</span><br>su<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007144407345.png" alt="image-20221007144407345"></p><h3 id="2-2、修改网络配置"><a href="#2-2、修改网络配置" class="headerlink" title="2-2、修改网络配置"></a>2-2、修改网络配置</h3><p>Ubuntu自17.10版本以来，引入了Netplan网络配置工具，通过netplan进行管理，对应的配置文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新安装的系统建议使用vi或nano编辑器修改文件内容，不支持vim</span><br>vi /etc/netplan/01-network-manager-all.yaml<br>nano /etc/netplan/01-network-manager-all.yaml<br></code></pre></td></tr></table></figure><p>配置内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Let NetworkManager manage all devices on this system</span><br>network:<br>  ethernets:<br>    ens33:<br>      dhcp4: no<br>      dhcp6: no<br>      # 该项可选，不加也可行<br>      optional: true<br>      addresses:<br>      # 静态IP，需要在第一节配置的IP段内<br>       - 192.168.31.103/24<br>      routes:<br>       - to: default<br>       # 网关设置，需要和第一节检查的网关一致<br>         via: 192.168.31.2<br>      nameservers:<br>      # 网关配置格式还可采用该格式，多个地址采用英文逗号相隔<br>      # addresses: [114.114.114.114,8.8.8.8]<br>        addresses:<br>          - 114.114.114.114<br>          - 8.8.8.8<br>        search:<br>          - localhost<br>          - local<br>  version: 2<br>  renderer: NetworkManager<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007153350141.png" alt="image-20221007153350141"></p><h3 id="2-3、生效配置"><a href="#2-3、生效配置" class="headerlink" title="2-3、生效配置"></a>2-3、生效配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">测试配置；正常如下</span><br>sudo netplan try<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007154513775.png" alt="image-20221007154513775"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">应用配置：不报错即可</span><br>sudo netplan apply<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007151929466.png" alt="image-20221007151929466"></p><p>检查是否生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ip addr<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007151023164.png" alt="image-20221007151023164"></p><p>连通性检查：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007151121767.png" alt="image-20221007151121767"></p><h3 id="2-4、常用工具安装"><a href="#2-4、常用工具安装" class="headerlink" title="2-4、常用工具安装"></a>2-4、常用工具安装</h3><p>在系统使用过程中有一些工具为常用工具，建议安装，如vim、net-tools（对应ifconfig指令）、curl。该部分内容自行参考安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim编辑器，vi的升级版</span><br>apt install vim -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ifconfig、netstat命令工具</span><br>apt install net-tools -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">web服务器请求工具</span><br>apt install curl -y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行以下指令一键安装</span><br>apt install vim -y;apt install net-tools -y;apt install curl -y<br></code></pre></td></tr></table></figure><h2 id="3、镜像源更新"><a href="#3、镜像源更新" class="headerlink" title="3、镜像源更新"></a>3、镜像源更新</h2><h3 id="3-1、可用源列表"><a href="#3-1、可用源列表" class="headerlink" title="3-1、可用源列表"></a>3-1、可用源列表</h3><p><strong>注：</strong>不同系统版本设定的源不同，以下针对22.04版本。</p><h4 id="1）清华源"><a href="#1）清华源" class="headerlink" title="1）清华源"></a>1）清华源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span><br></code></pre></td></tr></table></figure><h4 id="2）阿里源"><a href="#2）阿里源" class="headerlink" title="2）阿里源"></a>2）阿里源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><h4 id="3）中科大源"><a href="#3）中科大源" class="headerlink" title="3）中科大源"></a>3）中科大源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse<br></code></pre></td></tr></table></figure><h4 id="4）网易源"><a href="#4）网易源" class="headerlink" title="4）网易源"></a>4）网易源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.163.com/ubuntu/ jammy main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ jammy-backports main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy-security main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy-updates main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy-proposed main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ jammy-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><h3 id="3-2、更新源"><a href="#3-2、更新源" class="headerlink" title="3-2、更新源"></a>3-2、更新源</h3><p>将原来的源文件进行备份：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /etc/apt/sources.list /etc/apt/sources.list.bak<br></code></pre></td></tr></table></figure><p>新建源文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">填入上一节的任意一项可用源，之后执行Esc : 输入wq保存退出</span><br>vi /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007150111288.png" alt="image-20221007150111288"></p><p>更新软件源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt update -y<br></code></pre></td></tr></table></figure><p><img src="https://codestar.top/note-image/image-20221007145149148.png" alt="image-20221007145149148"></p>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
      <category>系统安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux系统</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下CPU压测执行指导</title>
    <link href="/2023/10/12/Linux%E4%B8%8BCPU%E5%8E%8B%E6%B5%8B%E6%89%A7%E8%A1%8C%E6%8C%87%E5%AF%BC/"/>
    <url>/2023/10/12/Linux%E4%B8%8BCPU%E5%8E%8B%E6%B5%8B%E6%89%A7%E8%A1%8C%E6%8C%87%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>拉起两个进程，执行文件拷贝，输出空文件。可压测到100%，持续执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in `seq 1 $(cat /proc/cpuinfo |grep &quot;physical id&quot; |wc -l)`; do dd if=/dev/zero of=/dev/null &amp; done<br></code></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>持续计算圆周率，bc命令。可压测到100</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">计算小数点后5000位</span><br>echo &quot;scale=5000; 4*a(1)&quot; | bc -l -q<br></code></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>编写一个循环，可压测到65%左右，持续执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">编写一个脚本文件，持续执行该循环，往空文件中写入1。实际不会生成新文件。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">filename=cputest.sh</span><br>while [ 1 ]<br>do<br>echo 1 &gt;&gt; /dev/null<br>done<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加执行权限</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或执行<span class="hljs-built_in">chmod</span> +x cputest.sh</span><br>chmod 777 cputest.sh<br></code></pre></td></tr></table></figure><h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><p>模拟用户不断地访问，并发进程，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">************常规执行*************</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不会占用过多资源</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">!/bin/bash</span><br>Njob=15    #任务总数<br>for ((i=0; i&lt;$Njob; i++)); do<br>&#123;<br>          echo  &quot;progress $i is sleeping for 3 seconds zzz…&quot;<br>          sleep  3<br>&#125;<br>done<br>echo -e &quot;time-consuming: $SECONDS    seconds&quot;    #显示脚本执行耗时<br><span class="hljs-meta prompt_"># </span><span class="language-bash">************并发执行*************</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">!/bin/bash</span><br>Njob=15<br>for ((i=0; i&lt;$Njob; i++)); do<br>          echo  &quot;progress $i is sleeping for 3 seconds zzz…&quot;<br>          sleep  3 &amp;       #循环内容放到后台执行<br>done<br>wait      #等待循环结束再执行wait后面的内容<br>echo -e &quot;time-consuming: $SECONDS    seconds&quot;    #显示脚本执行耗时<br></code></pre></td></tr></table></figure><h2 id="压测脚本"><a href="#压测脚本" class="headerlink" title="压测脚本"></a>压测脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">并发运行的最佳实践</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">总进程数</span><br>Sp=2500<br><span class="hljs-meta prompt_"># </span><span class="language-bash">并发数,并发数过大可能造成系统崩溃</span><br>Qp=250<br><span class="hljs-meta prompt_"># </span><span class="language-bash">存放进程的队列</span><br>Qarr=();<br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行进程数</span><br>run=0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将进程的添加到队列里的函数</span><br>function push() &#123;<br>Qarr=($&#123;Qarr[@]&#125; $1)<br>run=$&#123;#Qarr[@]&#125;<br>&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检测队列里的进程是否运行完毕</span><br>function check() &#123;<br>oldQ=($&#123;Qarr[@]&#125;)<br>Qarr=()<br>for p in &quot;$&#123;oldQ[@]&#125;&quot;;do<br>if [[ -d &quot;/proc/$p&quot; ]];then<br>Qarr=($&#123;Qarr[@]&#125; $p)<br>fi<br>done<br>run=$&#123;#Qarr[@]&#125;<br>&#125;<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">main</span><br>for((i=0; i&lt;$Sp; i++));do<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 500000`; <span class="hljs-keyword">do</span> curl -o /dev/null -s -w %&#123;http_code&#125;:%&#123;time_total&#125; http://www.baidu.com ;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-keyword">done</span></span><br>echo &quot;running $i &quot;<br>sleep 3 &amp;<br>push $!<br>while [[ $run -gt $Qp ]];do<br>check<br>sleep 0.1<br>done<br>done<br>echo -e &quot;time-consuming: $SECONDS seconds&quot; #显示脚本执行耗时<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPU压力测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
